// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  idUser          Int              @id @default(autoincrement())
  name            String
  postname        String
  email           String           @unique
  password        String
  dateDeNaissance DateTime
  sexe            String
  pays            String
  avis            Avis[]
  film            Film[]
  serie           Serie[]
  telechargement  Telechargement[]
  favoris         Favoris[]
  historique      Historique[]
}

model Film {
  idFilm                 Int              @id @default(autoincrement())
  titre                  String
  realisateur            String
  anneeDeSortie          Int
  description            String
  acteur                 String
  dureeMoyenneParEpisode Float
  urlDeStreaming         String
  urlDeTelechargement    String
  telechargement         Telechargement[]
  user                   User             @relation(fields: [userId], references: [idUser])
  userId                 Int
  Avis                   Avis[]
  Favoris                Favoris[]
  Historique             Historique[]
}

model Serie {
  idSerie                Int              @id @default(autoincrement())
  titre                  String
  realisateur            String
  anneeDeSortie          Int
  description            String
  acteur                 String
  dureeMoyenneParEpisode Float
  urlDeStreaming         String
  urlDeTelechargement    String
  telechargement         Telechargement[]
  user                   User             @relation(fields: [userId], references: [idUser])
  userId                 Int
  Avis                   Avis[]
  Favoris                Favoris[]
  Historique             Historique[]
}

model Telechargement {
  id           Int      @id @default(autoincrement())
  date         DateTime
  film         Film     @relation(fields: [filmId], references: [idFilm])
  filmId       Int
  serie        Serie    @relation(fields: [serieId], references: [idSerie])
  serieId      Int
  qualiteVideo String
  User         User?    @relation(fields: [userIdUser], references: [idUser])
  userIdUser   Int?
}

model Avis {
  idAvis  Int     @id @default(autoincrement())
  user    User    @relation(fields: [userId], references: [idUser])
  userId  Int
  film    Film    @relation(fields: [filmId], references: [idFilm])
  filmId  Int
  serie   Serie   @relation(fields: [serieId], references: [idSerie])
  serieId Int
  comment String?
}

model Favoris {
  idFavoris BigInt @id @default(autoincrement())
  user      User   @relation(fields: [userId], references: [idUser])
  userId    Int
  film      Film   @relation(fields: [filmId], references: [idFilm])
  filmId    Int
  serie     Serie  @relation(fields: [serieId], references: [idSerie])
  serieId   Int
}

model Historique {
  idHistorique       BigInt   @id @default(autoincrement())
  user               User     @relation(fields: [userId], references: [idUser])
  userId             Int
  film               Film     @relation(fields: [filmId], references: [idFilm])
  filmId             Int
  serie              Serie    @relation(fields: [serieId], references: [idSerie])
  serieId            Int
  dateDeVisuaisation DateTime
}

// model Role{
//   visiteur  String
//   abonne   String
// }
