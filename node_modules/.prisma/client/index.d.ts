
/**
 * Client
**/

import * as runtime from '@prisma/client/runtime/library.js';
import $Types = runtime.Types // general types
import $Public = runtime.Types.Public
import $Utils = runtime.Types.Utils
import $Extensions = runtime.Types.Extensions
import $Result = runtime.Types.Result

export type PrismaPromise<T> = $Public.PrismaPromise<T>


/**
 * Model User
 * 
 */
export type User = $Result.DefaultSelection<Prisma.$UserPayload>
/**
 * Model Film
 * 
 */
export type Film = $Result.DefaultSelection<Prisma.$FilmPayload>
/**
 * Model Serie
 * 
 */
export type Serie = $Result.DefaultSelection<Prisma.$SeriePayload>
/**
 * Model Telechargement
 * 
 */
export type Telechargement = $Result.DefaultSelection<Prisma.$TelechargementPayload>
/**
 * Model Avis
 * 
 */
export type Avis = $Result.DefaultSelection<Prisma.$AvisPayload>
/**
 * Model Favoris
 * 
 */
export type Favoris = $Result.DefaultSelection<Prisma.$FavorisPayload>
/**
 * Model Historique
 * 
 */
export type Historique = $Result.DefaultSelection<Prisma.$HistoriquePayload>

/**
 * ##  Prisma Client ʲˢ
 * 
 * Type-safe database client for TypeScript & Node.js
 * @example
 * ```
 * const prisma = new PrismaClient()
 * // Fetch zero or more Users
 * const users = await prisma.user.findMany()
 * ```
 *
 * 
 * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
 */
export class PrismaClient<
  T extends Prisma.PrismaClientOptions = Prisma.PrismaClientOptions,
  U = 'log' extends keyof T ? T['log'] extends Array<Prisma.LogLevel | Prisma.LogDefinition> ? Prisma.GetEvents<T['log']> : never : never,
  ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs
> {
  [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['other'] }

    /**
   * ##  Prisma Client ʲˢ
   * 
   * Type-safe database client for TypeScript & Node.js
   * @example
   * ```
   * const prisma = new PrismaClient()
   * // Fetch zero or more Users
   * const users = await prisma.user.findMany()
   * ```
   *
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client).
   */

  constructor(optionsArg ?: Prisma.Subset<T, Prisma.PrismaClientOptions>);
  $on<V extends U>(eventType: V, callback: (event: V extends 'query' ? Prisma.QueryEvent : Prisma.LogEvent) => void): void;

  /**
   * Connect with the database
   */
  $connect(): $Utils.JsPromise<void>;

  /**
   * Disconnect from the database
   */
  $disconnect(): $Utils.JsPromise<void>;

  /**
   * Add a middleware
   * @deprecated since 4.16.0. For new code, prefer client extensions instead.
   * @see https://pris.ly/d/extensions
   */
  $use(cb: Prisma.Middleware): void

/**
   * Executes a prepared raw query and returns the number of affected rows.
   * @example
   * ```
   * const result = await prisma.$executeRaw`UPDATE User SET cool = ${true} WHERE email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Executes a raw query and returns the number of affected rows.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$executeRawUnsafe('UPDATE User SET cool = $1 WHERE email = $2 ;', true, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $executeRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<number>;

  /**
   * Performs a prepared raw query and returns the `SELECT` data.
   * @example
   * ```
   * const result = await prisma.$queryRaw`SELECT * FROM User WHERE id = ${1} OR email = ${'user@email.com'};`
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRaw<T = unknown>(query: TemplateStringsArray | Prisma.Sql, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Performs a raw query and returns the `SELECT` data.
   * Susceptible to SQL injections, see documentation.
   * @example
   * ```
   * const result = await prisma.$queryRawUnsafe('SELECT * FROM User WHERE id = $1 OR email = $2;', 1, 'user@email.com')
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/raw-database-access).
   */
  $queryRawUnsafe<T = unknown>(query: string, ...values: any[]): Prisma.PrismaPromise<T>;

  /**
   * Allows the running of a sequence of read/write operations that are guaranteed to either succeed or fail as a whole.
   * @example
   * ```
   * const [george, bob, alice] = await prisma.$transaction([
   *   prisma.user.create({ data: { name: 'George' } }),
   *   prisma.user.create({ data: { name: 'Bob' } }),
   *   prisma.user.create({ data: { name: 'Alice' } }),
   * ])
   * ```
   * 
   * Read more in our [docs](https://www.prisma.io/docs/concepts/components/prisma-client/transactions).
   */
  $transaction<P extends Prisma.PrismaPromise<any>[]>(arg: [...P], options?: { isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<runtime.Types.Utils.UnwrapTuple<P>>

  $transaction<R>(fn: (prisma: Omit<PrismaClient, runtime.ITXClientDenyList>) => $Utils.JsPromise<R>, options?: { maxWait?: number, timeout?: number, isolationLevel?: Prisma.TransactionIsolationLevel }): $Utils.JsPromise<R>


  $extends: $Extensions.ExtendsHook<'extends', Prisma.TypeMapCb, ExtArgs>

      /**
   * `prisma.user`: Exposes CRUD operations for the **User** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Users
    * const users = await prisma.user.findMany()
    * ```
    */
  get user(): Prisma.UserDelegate<ExtArgs>;

  /**
   * `prisma.film`: Exposes CRUD operations for the **Film** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Films
    * const films = await prisma.film.findMany()
    * ```
    */
  get film(): Prisma.FilmDelegate<ExtArgs>;

  /**
   * `prisma.serie`: Exposes CRUD operations for the **Serie** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Series
    * const series = await prisma.serie.findMany()
    * ```
    */
  get serie(): Prisma.SerieDelegate<ExtArgs>;

  /**
   * `prisma.telechargement`: Exposes CRUD operations for the **Telechargement** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Telechargements
    * const telechargements = await prisma.telechargement.findMany()
    * ```
    */
  get telechargement(): Prisma.TelechargementDelegate<ExtArgs>;

  /**
   * `prisma.avis`: Exposes CRUD operations for the **Avis** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Avis
    * const avis = await prisma.avis.findMany()
    * ```
    */
  get avis(): Prisma.AvisDelegate<ExtArgs>;

  /**
   * `prisma.favoris`: Exposes CRUD operations for the **Favoris** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Favorises
    * const favorises = await prisma.favoris.findMany()
    * ```
    */
  get favoris(): Prisma.FavorisDelegate<ExtArgs>;

  /**
   * `prisma.historique`: Exposes CRUD operations for the **Historique** model.
    * Example usage:
    * ```ts
    * // Fetch zero or more Historiques
    * const historiques = await prisma.historique.findMany()
    * ```
    */
  get historique(): Prisma.HistoriqueDelegate<ExtArgs>;
}

export namespace Prisma {
  export import DMMF = runtime.DMMF

  export type PrismaPromise<T> = $Public.PrismaPromise<T>

  /**
   * Validator
   */
  export import validator = runtime.Public.validator

  /**
   * Prisma Errors
   */
  export import PrismaClientKnownRequestError = runtime.PrismaClientKnownRequestError
  export import PrismaClientUnknownRequestError = runtime.PrismaClientUnknownRequestError
  export import PrismaClientRustPanicError = runtime.PrismaClientRustPanicError
  export import PrismaClientInitializationError = runtime.PrismaClientInitializationError
  export import PrismaClientValidationError = runtime.PrismaClientValidationError
  export import NotFoundError = runtime.NotFoundError

  /**
   * Re-export of sql-template-tag
   */
  export import sql = runtime.sqltag
  export import empty = runtime.empty
  export import join = runtime.join
  export import raw = runtime.raw
  export import Sql = runtime.Sql

  /**
   * Decimal.js
   */
  export import Decimal = runtime.Decimal

  export type DecimalJsLike = runtime.DecimalJsLike

  /**
   * Metrics 
   */
  export type Metrics = runtime.Metrics
  export type Metric<T> = runtime.Metric<T>
  export type MetricHistogram = runtime.MetricHistogram
  export type MetricHistogramBucket = runtime.MetricHistogramBucket

  /**
  * Extensions
  */
  export import Extension = $Extensions.UserArgs
  export import getExtensionContext = runtime.Extensions.getExtensionContext
  export import Args = $Public.Args
  export import Payload = $Public.Payload
  export import Result = $Public.Result
  export import Exact = $Public.Exact

  /**
   * Prisma Client JS version: 5.11.0
   * Query Engine version: 5a9203d0590c951969e85a7d07215503f4672eb9
   */
  export type PrismaVersion = {
    client: string
  }

  export const prismaVersion: PrismaVersion 

  /**
   * Utility Types
   */

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON object.
   * This type can be useful to enforce some input to be JSON-compatible or as a super-type to be extended from. 
   */
  export type JsonObject = {[Key in string]?: JsonValue}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches a JSON array.
   */
  export interface JsonArray extends Array<JsonValue> {}

  /**
   * From https://github.com/sindresorhus/type-fest/
   * Matches any valid JSON value.
   */
  export type JsonValue = string | number | boolean | JsonObject | JsonArray | null

  /**
   * Matches a JSON object.
   * Unlike `JsonObject`, this type allows undefined and read-only properties.
   */
  export type InputJsonObject = {readonly [Key in string]?: InputJsonValue | null}

  /**
   * Matches a JSON array.
   * Unlike `JsonArray`, readonly arrays are assignable to this type.
   */
  export interface InputJsonArray extends ReadonlyArray<InputJsonValue | null> {}

  /**
   * Matches any valid value that can be used as an input for operations like
   * create and update as the value of a JSON field. Unlike `JsonValue`, this
   * type allows read-only arrays and read-only object properties and disallows
   * `null` at the top level.
   *
   * `null` cannot be used as the value of a JSON field because its meaning
   * would be ambiguous. Use `Prisma.JsonNull` to store the JSON null value or
   * `Prisma.DbNull` to clear the JSON value and set the field to the database
   * NULL value instead.
   *
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-by-null-values
   */
  export type InputJsonValue = string | number | boolean | InputJsonObject | InputJsonArray | { toJSON(): unknown }

  /**
   * Types of the values used to represent different kinds of `null` values when working with JSON fields.
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  namespace NullTypes {
    /**
    * Type of `Prisma.DbNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.DbNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class DbNull {
      private DbNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.JsonNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.JsonNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class JsonNull {
      private JsonNull: never
      private constructor()
    }

    /**
    * Type of `Prisma.AnyNull`.
    * 
    * You cannot use other instances of this class. Please use the `Prisma.AnyNull` value.
    * 
    * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
    */
    class AnyNull {
      private AnyNull: never
      private constructor()
    }
  }

  /**
   * Helper for filtering JSON entries that have `null` on the database (empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const DbNull: NullTypes.DbNull

  /**
   * Helper for filtering JSON entries that have JSON `null` values (not empty on the db)
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const JsonNull: NullTypes.JsonNull

  /**
   * Helper for filtering JSON entries that are `Prisma.DbNull` or `Prisma.JsonNull`
   * 
   * @see https://www.prisma.io/docs/concepts/components/prisma-client/working-with-fields/working-with-json-fields#filtering-on-a-json-field
   */
  export const AnyNull: NullTypes.AnyNull

  type SelectAndInclude = {
    select: any
    include: any
  }

  /**
   * Get the type of the value, that the Promise holds.
   */
  export type PromiseType<T extends PromiseLike<any>> = T extends PromiseLike<infer U> ? U : T;

  /**
   * Get the return type of a function which returns a Promise.
   */
  export type PromiseReturnType<T extends (...args: any) => $Utils.JsPromise<any>> = PromiseType<ReturnType<T>>

  /**
   * From T, pick a set of properties whose keys are in the union K
   */
  type Prisma__Pick<T, K extends keyof T> = {
      [P in K]: T[P];
  };


  export type Enumerable<T> = T | Array<T>;

  export type RequiredKeys<T> = {
    [K in keyof T]-?: {} extends Prisma__Pick<T, K> ? never : K
  }[keyof T]

  export type TruthyKeys<T> = keyof {
    [K in keyof T as T[K] extends false | undefined | null ? never : K]: K
  }

  export type TrueKeys<T> = TruthyKeys<Prisma__Pick<T, RequiredKeys<T>>>

  /**
   * Subset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection
   */
  export type Subset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never;
  };

  /**
   * SelectSubset
   * @desc From `T` pick properties that exist in `U`. Simple version of Intersection.
   * Additionally, it validates, if both select and include are present. If the case, it errors.
   */
  export type SelectSubset<T, U> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    (T extends SelectAndInclude
      ? 'Please either choose `select` or `include`.'
      : {})

  /**
   * Subset + Intersection
   * @desc From `T` pick properties that exist in `U` and intersect `K`
   */
  export type SubsetIntersection<T, U, K> = {
    [key in keyof T]: key extends keyof U ? T[key] : never
  } &
    K

  type Without<T, U> = { [P in Exclude<keyof T, keyof U>]?: never };

  /**
   * XOR is needed to have a real mutually exclusive union type
   * https://stackoverflow.com/questions/42123407/does-typescript-support-mutually-exclusive-types
   */
  type XOR<T, U> =
    T extends object ?
    U extends object ?
      (Without<T, U> & U) | (Without<U, T> & T)
    : U : T


  /**
   * Is T a Record?
   */
  type IsObject<T extends any> = T extends Array<any>
  ? False
  : T extends Date
  ? False
  : T extends Uint8Array
  ? False
  : T extends BigInt
  ? False
  : T extends object
  ? True
  : False


  /**
   * If it's T[], return T
   */
  export type UnEnumerate<T extends unknown> = T extends Array<infer U> ? U : T

  /**
   * From ts-toolbelt
   */

  type __Either<O extends object, K extends Key> = Omit<O, K> &
    {
      // Merge all but K
      [P in K]: Prisma__Pick<O, P & keyof O> // With K possibilities
    }[K]

  type EitherStrict<O extends object, K extends Key> = Strict<__Either<O, K>>

  type EitherLoose<O extends object, K extends Key> = ComputeRaw<__Either<O, K>>

  type _Either<
    O extends object,
    K extends Key,
    strict extends Boolean
  > = {
    1: EitherStrict<O, K>
    0: EitherLoose<O, K>
  }[strict]

  type Either<
    O extends object,
    K extends Key,
    strict extends Boolean = 1
  > = O extends unknown ? _Either<O, K, strict> : never

  export type Union = any

  type PatchUndefined<O extends object, O1 extends object> = {
    [K in keyof O]: O[K] extends undefined ? At<O1, K> : O[K]
  } & {}

  /** Helper Types for "Merge" **/
  export type IntersectOf<U extends Union> = (
    U extends unknown ? (k: U) => void : never
  ) extends (k: infer I) => void
    ? I
    : never

  export type Overwrite<O extends object, O1 extends object> = {
      [K in keyof O]: K extends keyof O1 ? O1[K] : O[K];
  } & {};

  type _Merge<U extends object> = IntersectOf<Overwrite<U, {
      [K in keyof U]-?: At<U, K>;
  }>>;

  type Key = string | number | symbol;
  type AtBasic<O extends object, K extends Key> = K extends keyof O ? O[K] : never;
  type AtStrict<O extends object, K extends Key> = O[K & keyof O];
  type AtLoose<O extends object, K extends Key> = O extends unknown ? AtStrict<O, K> : never;
  export type At<O extends object, K extends Key, strict extends Boolean = 1> = {
      1: AtStrict<O, K>;
      0: AtLoose<O, K>;
  }[strict];

  export type ComputeRaw<A extends any> = A extends Function ? A : {
    [K in keyof A]: A[K];
  } & {};

  export type OptionalFlat<O> = {
    [K in keyof O]?: O[K];
  } & {};

  type _Record<K extends keyof any, T> = {
    [P in K]: T;
  };

  // cause typescript not to expand types and preserve names
  type NoExpand<T> = T extends unknown ? T : never;

  // this type assumes the passed object is entirely optional
  type AtLeast<O extends object, K extends string> = NoExpand<
    O extends unknown
    ? | (K extends keyof O ? { [P in K]: O[P] } & O : O)
      | {[P in keyof O as P extends K ? K : never]-?: O[P]} & O
    : never>;

  type _Strict<U, _U = U> = U extends unknown ? U & OptionalFlat<_Record<Exclude<Keys<_U>, keyof U>, never>> : never;

  export type Strict<U extends object> = ComputeRaw<_Strict<U>>;
  /** End Helper Types for "Merge" **/

  export type Merge<U extends object> = ComputeRaw<_Merge<Strict<U>>>;

  /**
  A [[Boolean]]
  */
  export type Boolean = True | False

  // /**
  // 1
  // */
  export type True = 1

  /**
  0
  */
  export type False = 0

  export type Not<B extends Boolean> = {
    0: 1
    1: 0
  }[B]

  export type Extends<A1 extends any, A2 extends any> = [A1] extends [never]
    ? 0 // anything `never` is false
    : A1 extends A2
    ? 1
    : 0

  export type Has<U extends Union, U1 extends Union> = Not<
    Extends<Exclude<U1, U>, U1>
  >

  export type Or<B1 extends Boolean, B2 extends Boolean> = {
    0: {
      0: 0
      1: 1
    }
    1: {
      0: 1
      1: 1
    }
  }[B1][B2]

  export type Keys<U extends Union> = U extends unknown ? keyof U : never

  type Cast<A, B> = A extends B ? A : B;

  export const type: unique symbol;



  /**
   * Used by group by
   */

  export type GetScalarType<T, O> = O extends object ? {
    [P in keyof T]: P extends keyof O
      ? O[P]
      : never
  } : never

  type FieldPaths<
    T,
    U = Omit<T, '_avg' | '_sum' | '_count' | '_min' | '_max'>
  > = IsObject<T> extends True ? U : T

  type GetHavingFields<T> = {
    [K in keyof T]: Or<
      Or<Extends<'OR', K>, Extends<'AND', K>>,
      Extends<'NOT', K>
    > extends True
      ? // infer is only needed to not hit TS limit
        // based on the brilliant idea of Pierre-Antoine Mills
        // https://github.com/microsoft/TypeScript/issues/30188#issuecomment-478938437
        T[K] extends infer TK
        ? GetHavingFields<UnEnumerate<TK> extends object ? Merge<UnEnumerate<TK>> : never>
        : never
      : {} extends FieldPaths<T[K]>
      ? never
      : K
  }[keyof T]

  /**
   * Convert tuple to union
   */
  type _TupleToUnion<T> = T extends (infer E)[] ? E : never
  type TupleToUnion<K extends readonly any[]> = _TupleToUnion<K>
  type MaybeTupleToUnion<T> = T extends any[] ? TupleToUnion<T> : T

  /**
   * Like `Pick`, but additionally can also accept an array of keys
   */
  type PickEnumerable<T, K extends Enumerable<keyof T> | keyof T> = Prisma__Pick<T, MaybeTupleToUnion<K>>

  /**
   * Exclude all keys with underscores
   */
  type ExcludeUnderscoreKeys<T extends string> = T extends `_${string}` ? never : T


  export type FieldRef<Model, FieldType> = runtime.FieldRef<Model, FieldType>

  type FieldRefInputType<Model, FieldType> = Model extends never ? never : FieldRef<Model, FieldType>


  export const ModelName: {
    User: 'User',
    Film: 'Film',
    Serie: 'Serie',
    Telechargement: 'Telechargement',
    Avis: 'Avis',
    Favoris: 'Favoris',
    Historique: 'Historique'
  };

  export type ModelName = (typeof ModelName)[keyof typeof ModelName]


  export type Datasources = {
    db?: Datasource
  }


  interface TypeMapCb extends $Utils.Fn<{extArgs: $Extensions.InternalArgs}, $Utils.Record<string, any>> {
    returns: Prisma.TypeMap<this['params']['extArgs']>
  }

  export type TypeMap<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    meta: {
      modelProps: 'user' | 'film' | 'serie' | 'telechargement' | 'avis' | 'favoris' | 'historique'
      txIsolationLevel: Prisma.TransactionIsolationLevel
    },
    model: {
      User: {
        payload: Prisma.$UserPayload<ExtArgs>
        fields: Prisma.UserFieldRefs
        operations: {
          findUnique: {
            args: Prisma.UserFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.UserFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findFirst: {
            args: Prisma.UserFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.UserFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          findMany: {
            args: Prisma.UserFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>[]
          }
          create: {
            args: Prisma.UserCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          createMany: {
            args: Prisma.UserCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.UserDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          update: {
            args: Prisma.UserUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          deleteMany: {
            args: Prisma.UserDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.UserUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.UserUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$UserPayload>
          }
          aggregate: {
            args: Prisma.UserAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateUser>
          }
          groupBy: {
            args: Prisma.UserGroupByArgs<ExtArgs>,
            result: $Utils.Optional<UserGroupByOutputType>[]
          }
          count: {
            args: Prisma.UserCountArgs<ExtArgs>,
            result: $Utils.Optional<UserCountAggregateOutputType> | number
          }
        }
      }
      Film: {
        payload: Prisma.$FilmPayload<ExtArgs>
        fields: Prisma.FilmFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FilmFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FilmFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>
          }
          findFirst: {
            args: Prisma.FilmFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FilmFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>
          }
          findMany: {
            args: Prisma.FilmFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>[]
          }
          create: {
            args: Prisma.FilmCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>
          }
          createMany: {
            args: Prisma.FilmCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FilmDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>
          }
          update: {
            args: Prisma.FilmUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>
          }
          deleteMany: {
            args: Prisma.FilmDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FilmUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FilmUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FilmPayload>
          }
          aggregate: {
            args: Prisma.FilmAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFilm>
          }
          groupBy: {
            args: Prisma.FilmGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FilmGroupByOutputType>[]
          }
          count: {
            args: Prisma.FilmCountArgs<ExtArgs>,
            result: $Utils.Optional<FilmCountAggregateOutputType> | number
          }
        }
      }
      Serie: {
        payload: Prisma.$SeriePayload<ExtArgs>
        fields: Prisma.SerieFieldRefs
        operations: {
          findUnique: {
            args: Prisma.SerieFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.SerieFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>
          }
          findFirst: {
            args: Prisma.SerieFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.SerieFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>
          }
          findMany: {
            args: Prisma.SerieFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>[]
          }
          create: {
            args: Prisma.SerieCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>
          }
          createMany: {
            args: Prisma.SerieCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.SerieDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>
          }
          update: {
            args: Prisma.SerieUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>
          }
          deleteMany: {
            args: Prisma.SerieDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.SerieUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.SerieUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$SeriePayload>
          }
          aggregate: {
            args: Prisma.SerieAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateSerie>
          }
          groupBy: {
            args: Prisma.SerieGroupByArgs<ExtArgs>,
            result: $Utils.Optional<SerieGroupByOutputType>[]
          }
          count: {
            args: Prisma.SerieCountArgs<ExtArgs>,
            result: $Utils.Optional<SerieCountAggregateOutputType> | number
          }
        }
      }
      Telechargement: {
        payload: Prisma.$TelechargementPayload<ExtArgs>
        fields: Prisma.TelechargementFieldRefs
        operations: {
          findUnique: {
            args: Prisma.TelechargementFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.TelechargementFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          findFirst: {
            args: Prisma.TelechargementFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.TelechargementFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          findMany: {
            args: Prisma.TelechargementFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>[]
          }
          create: {
            args: Prisma.TelechargementCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          createMany: {
            args: Prisma.TelechargementCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.TelechargementDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          update: {
            args: Prisma.TelechargementUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          deleteMany: {
            args: Prisma.TelechargementDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.TelechargementUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.TelechargementUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$TelechargementPayload>
          }
          aggregate: {
            args: Prisma.TelechargementAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateTelechargement>
          }
          groupBy: {
            args: Prisma.TelechargementGroupByArgs<ExtArgs>,
            result: $Utils.Optional<TelechargementGroupByOutputType>[]
          }
          count: {
            args: Prisma.TelechargementCountArgs<ExtArgs>,
            result: $Utils.Optional<TelechargementCountAggregateOutputType> | number
          }
        }
      }
      Avis: {
        payload: Prisma.$AvisPayload<ExtArgs>
        fields: Prisma.AvisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.AvisFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.AvisFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>
          }
          findFirst: {
            args: Prisma.AvisFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.AvisFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>
          }
          findMany: {
            args: Prisma.AvisFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>[]
          }
          create: {
            args: Prisma.AvisCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>
          }
          createMany: {
            args: Prisma.AvisCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.AvisDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>
          }
          update: {
            args: Prisma.AvisUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>
          }
          deleteMany: {
            args: Prisma.AvisDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.AvisUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.AvisUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$AvisPayload>
          }
          aggregate: {
            args: Prisma.AvisAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateAvis>
          }
          groupBy: {
            args: Prisma.AvisGroupByArgs<ExtArgs>,
            result: $Utils.Optional<AvisGroupByOutputType>[]
          }
          count: {
            args: Prisma.AvisCountArgs<ExtArgs>,
            result: $Utils.Optional<AvisCountAggregateOutputType> | number
          }
        }
      }
      Favoris: {
        payload: Prisma.$FavorisPayload<ExtArgs>
        fields: Prisma.FavorisFieldRefs
        operations: {
          findUnique: {
            args: Prisma.FavorisFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.FavorisFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>
          }
          findFirst: {
            args: Prisma.FavorisFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.FavorisFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>
          }
          findMany: {
            args: Prisma.FavorisFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>[]
          }
          create: {
            args: Prisma.FavorisCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>
          }
          createMany: {
            args: Prisma.FavorisCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.FavorisDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>
          }
          update: {
            args: Prisma.FavorisUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>
          }
          deleteMany: {
            args: Prisma.FavorisDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.FavorisUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.FavorisUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$FavorisPayload>
          }
          aggregate: {
            args: Prisma.FavorisAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateFavoris>
          }
          groupBy: {
            args: Prisma.FavorisGroupByArgs<ExtArgs>,
            result: $Utils.Optional<FavorisGroupByOutputType>[]
          }
          count: {
            args: Prisma.FavorisCountArgs<ExtArgs>,
            result: $Utils.Optional<FavorisCountAggregateOutputType> | number
          }
        }
      }
      Historique: {
        payload: Prisma.$HistoriquePayload<ExtArgs>
        fields: Prisma.HistoriqueFieldRefs
        operations: {
          findUnique: {
            args: Prisma.HistoriqueFindUniqueArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload> | null
          }
          findUniqueOrThrow: {
            args: Prisma.HistoriqueFindUniqueOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>
          }
          findFirst: {
            args: Prisma.HistoriqueFindFirstArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload> | null
          }
          findFirstOrThrow: {
            args: Prisma.HistoriqueFindFirstOrThrowArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>
          }
          findMany: {
            args: Prisma.HistoriqueFindManyArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>[]
          }
          create: {
            args: Prisma.HistoriqueCreateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>
          }
          createMany: {
            args: Prisma.HistoriqueCreateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          delete: {
            args: Prisma.HistoriqueDeleteArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>
          }
          update: {
            args: Prisma.HistoriqueUpdateArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>
          }
          deleteMany: {
            args: Prisma.HistoriqueDeleteManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          updateMany: {
            args: Prisma.HistoriqueUpdateManyArgs<ExtArgs>,
            result: Prisma.BatchPayload
          }
          upsert: {
            args: Prisma.HistoriqueUpsertArgs<ExtArgs>,
            result: $Utils.PayloadToResult<Prisma.$HistoriquePayload>
          }
          aggregate: {
            args: Prisma.HistoriqueAggregateArgs<ExtArgs>,
            result: $Utils.Optional<AggregateHistorique>
          }
          groupBy: {
            args: Prisma.HistoriqueGroupByArgs<ExtArgs>,
            result: $Utils.Optional<HistoriqueGroupByOutputType>[]
          }
          count: {
            args: Prisma.HistoriqueCountArgs<ExtArgs>,
            result: $Utils.Optional<HistoriqueCountAggregateOutputType> | number
          }
        }
      }
    }
  } & {
    other: {
      payload: any
      operations: {
        $executeRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $executeRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
        $queryRawUnsafe: {
          args: [query: string, ...values: any[]],
          result: any
        }
        $queryRaw: {
          args: [query: TemplateStringsArray | Prisma.Sql, ...values: any[]],
          result: any
        }
      }
    }
  }
  export const defineExtension: $Extensions.ExtendsHook<'define', Prisma.TypeMapCb, $Extensions.DefaultArgs>
  export type DefaultPrismaClient = PrismaClient
  export type ErrorFormat = 'pretty' | 'colorless' | 'minimal'
  export interface PrismaClientOptions {
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasources?: Datasources
    /**
     * Overwrites the datasource url from your schema.prisma file
     */
    datasourceUrl?: string
    /**
     * @default "colorless"
     */
    errorFormat?: ErrorFormat
    /**
     * @example
     * ```
     * // Defaults to stdout
     * log: ['query', 'info', 'warn', 'error']
     * 
     * // Emit as events
     * log: [
     *   { emit: 'stdout', level: 'query' },
     *   { emit: 'stdout', level: 'info' },
     *   { emit: 'stdout', level: 'warn' }
     *   { emit: 'stdout', level: 'error' }
     * ]
     * ```
     * Read more in our [docs](https://www.prisma.io/docs/reference/tools-and-interfaces/prisma-client/logging#the-log-option).
     */
    log?: (LogLevel | LogDefinition)[]
    /**
     * The default values for transactionOptions
     * maxWait ?= 2000
     * timeout ?= 5000
     */
    transactionOptions?: {
      maxWait?: number
      timeout?: number
      isolationLevel?: Prisma.TransactionIsolationLevel
    }
  }

  /* Types for Logging */
  export type LogLevel = 'info' | 'query' | 'warn' | 'error'
  export type LogDefinition = {
    level: LogLevel
    emit: 'stdout' | 'event'
  }

  export type GetLogType<T extends LogLevel | LogDefinition> = T extends LogDefinition ? T['emit'] extends 'event' ? T['level'] : never : never
  export type GetEvents<T extends any> = T extends Array<LogLevel | LogDefinition> ?
    GetLogType<T[0]> | GetLogType<T[1]> | GetLogType<T[2]> | GetLogType<T[3]>
    : never

  export type QueryEvent = {
    timestamp: Date
    query: string
    params: string
    duration: number
    target: string
  }

  export type LogEvent = {
    timestamp: Date
    message: string
    target: string
  }
  /* End Types for Logging */


  export type PrismaAction =
    | 'findUnique'
    | 'findUniqueOrThrow'
    | 'findMany'
    | 'findFirst'
    | 'findFirstOrThrow'
    | 'create'
    | 'createMany'
    | 'update'
    | 'updateMany'
    | 'upsert'
    | 'delete'
    | 'deleteMany'
    | 'executeRaw'
    | 'queryRaw'
    | 'aggregate'
    | 'count'
    | 'runCommandRaw'
    | 'findRaw'
    | 'groupBy'

  /**
   * These options are being passed into the middleware as "params"
   */
  export type MiddlewareParams = {
    model?: ModelName
    action: PrismaAction
    args: any
    dataPath: string[]
    runInTransaction: boolean
  }

  /**
   * The `T` type makes sure, that the `return proceed` is not forgotten in the middleware implementation
   */
  export type Middleware<T = any> = (
    params: MiddlewareParams,
    next: (params: MiddlewareParams) => $Utils.JsPromise<T>,
  ) => $Utils.JsPromise<T>

  // tested in getLogLevel.test.ts
  export function getLogLevel(log: Array<LogLevel | LogDefinition>): LogLevel | undefined;

  /**
   * `PrismaClient` proxy available in interactive transactions.
   */
  export type TransactionClient = Omit<Prisma.DefaultPrismaClient, runtime.ITXClientDenyList>

  export type Datasource = {
    url?: string
  }

  /**
   * Count Types
   */


  /**
   * Count Type UserCountOutputType
   */

  export type UserCountOutputType = {
    avis: number
    film: number
    serie: number
    telechargement: number
    favoris: number
    historique: number
  }

  export type UserCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avis?: boolean | UserCountOutputTypeCountAvisArgs
    film?: boolean | UserCountOutputTypeCountFilmArgs
    serie?: boolean | UserCountOutputTypeCountSerieArgs
    telechargement?: boolean | UserCountOutputTypeCountTelechargementArgs
    favoris?: boolean | UserCountOutputTypeCountFavorisArgs
    historique?: boolean | UserCountOutputTypeCountHistoriqueArgs
  }

  // Custom InputTypes

  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the UserCountOutputType
     */
    select?: UserCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountAvisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvisWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFilmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilmWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountSerieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerieWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountTelechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountFavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavorisWhereInput
  }


  /**
   * UserCountOutputType without action
   */
  export type UserCountOutputTypeCountHistoriqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoriqueWhereInput
  }



  /**
   * Count Type FilmCountOutputType
   */

  export type FilmCountOutputType = {
    telechargement: number
    Avis: number
    Favoris: number
    Historique: number
  }

  export type FilmCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telechargement?: boolean | FilmCountOutputTypeCountTelechargementArgs
    Avis?: boolean | FilmCountOutputTypeCountAvisArgs
    Favoris?: boolean | FilmCountOutputTypeCountFavorisArgs
    Historique?: boolean | FilmCountOutputTypeCountHistoriqueArgs
  }

  // Custom InputTypes

  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the FilmCountOutputType
     */
    select?: FilmCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountTelechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
  }


  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountAvisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvisWhereInput
  }


  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountFavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavorisWhereInput
  }


  /**
   * FilmCountOutputType without action
   */
  export type FilmCountOutputTypeCountHistoriqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoriqueWhereInput
  }



  /**
   * Count Type SerieCountOutputType
   */

  export type SerieCountOutputType = {
    telechargement: number
    Avis: number
    Favoris: number
    Historique: number
  }

  export type SerieCountOutputTypeSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telechargement?: boolean | SerieCountOutputTypeCountTelechargementArgs
    Avis?: boolean | SerieCountOutputTypeCountAvisArgs
    Favoris?: boolean | SerieCountOutputTypeCountFavorisArgs
    Historique?: boolean | SerieCountOutputTypeCountHistoriqueArgs
  }

  // Custom InputTypes

  /**
   * SerieCountOutputType without action
   */
  export type SerieCountOutputTypeDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the SerieCountOutputType
     */
    select?: SerieCountOutputTypeSelect<ExtArgs> | null
  }


  /**
   * SerieCountOutputType without action
   */
  export type SerieCountOutputTypeCountTelechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
  }


  /**
   * SerieCountOutputType without action
   */
  export type SerieCountOutputTypeCountAvisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvisWhereInput
  }


  /**
   * SerieCountOutputType without action
   */
  export type SerieCountOutputTypeCountFavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavorisWhereInput
  }


  /**
   * SerieCountOutputType without action
   */
  export type SerieCountOutputTypeCountHistoriqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoriqueWhereInput
  }



  /**
   * Models
   */

  /**
   * Model User
   */

  export type AggregateUser = {
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  export type UserAvgAggregateOutputType = {
    idUser: number | null
  }

  export type UserSumAggregateOutputType = {
    idUser: number | null
  }

  export type UserMinAggregateOutputType = {
    idUser: number | null
    name: string | null
    postname: string | null
    email: string | null
    password: string | null
    dateDeNaissance: Date | null
    sexe: string | null
    pays: string | null
  }

  export type UserMaxAggregateOutputType = {
    idUser: number | null
    name: string | null
    postname: string | null
    email: string | null
    password: string | null
    dateDeNaissance: Date | null
    sexe: string | null
    pays: string | null
  }

  export type UserCountAggregateOutputType = {
    idUser: number
    name: number
    postname: number
    email: number
    password: number
    dateDeNaissance: number
    sexe: number
    pays: number
    _all: number
  }


  export type UserAvgAggregateInputType = {
    idUser?: true
  }

  export type UserSumAggregateInputType = {
    idUser?: true
  }

  export type UserMinAggregateInputType = {
    idUser?: true
    name?: true
    postname?: true
    email?: true
    password?: true
    dateDeNaissance?: true
    sexe?: true
    pays?: true
  }

  export type UserMaxAggregateInputType = {
    idUser?: true
    name?: true
    postname?: true
    email?: true
    password?: true
    dateDeNaissance?: true
    sexe?: true
    pays?: true
  }

  export type UserCountAggregateInputType = {
    idUser?: true
    name?: true
    postname?: true
    email?: true
    password?: true
    dateDeNaissance?: true
    sexe?: true
    pays?: true
    _all?: true
  }

  export type UserAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which User to aggregate.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Users
    **/
    _count?: true | UserCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: UserAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: UserSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: UserMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: UserMaxAggregateInputType
  }

  export type GetUserAggregateType<T extends UserAggregateArgs> = {
        [P in keyof T & keyof AggregateUser]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateUser[P]>
      : GetScalarType<T[P], AggregateUser[P]>
  }




  export type UserGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: UserWhereInput
    orderBy?: UserOrderByWithAggregationInput | UserOrderByWithAggregationInput[]
    by: UserScalarFieldEnum[] | UserScalarFieldEnum
    having?: UserScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: UserCountAggregateInputType | true
    _avg?: UserAvgAggregateInputType
    _sum?: UserSumAggregateInputType
    _min?: UserMinAggregateInputType
    _max?: UserMaxAggregateInputType
  }

  export type UserGroupByOutputType = {
    idUser: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date
    sexe: string
    pays: string
    _count: UserCountAggregateOutputType | null
    _avg: UserAvgAggregateOutputType | null
    _sum: UserSumAggregateOutputType | null
    _min: UserMinAggregateOutputType | null
    _max: UserMaxAggregateOutputType | null
  }

  type GetUserGroupByPayload<T extends UserGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<UserGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof UserGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], UserGroupByOutputType[P]>
            : GetScalarType<T[P], UserGroupByOutputType[P]>
        }
      >
    >


  export type UserSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idUser?: boolean
    name?: boolean
    postname?: boolean
    email?: boolean
    password?: boolean
    dateDeNaissance?: boolean
    sexe?: boolean
    pays?: boolean
    avis?: boolean | User$avisArgs<ExtArgs>
    film?: boolean | User$filmArgs<ExtArgs>
    serie?: boolean | User$serieArgs<ExtArgs>
    telechargement?: boolean | User$telechargementArgs<ExtArgs>
    favoris?: boolean | User$favorisArgs<ExtArgs>
    historique?: boolean | User$historiqueArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["user"]>

  export type UserSelectScalar = {
    idUser?: boolean
    name?: boolean
    postname?: boolean
    email?: boolean
    password?: boolean
    dateDeNaissance?: boolean
    sexe?: boolean
    pays?: boolean
  }

  export type UserInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    avis?: boolean | User$avisArgs<ExtArgs>
    film?: boolean | User$filmArgs<ExtArgs>
    serie?: boolean | User$serieArgs<ExtArgs>
    telechargement?: boolean | User$telechargementArgs<ExtArgs>
    favoris?: boolean | User$favorisArgs<ExtArgs>
    historique?: boolean | User$historiqueArgs<ExtArgs>
    _count?: boolean | UserCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $UserPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "User"
    objects: {
      avis: Prisma.$AvisPayload<ExtArgs>[]
      film: Prisma.$FilmPayload<ExtArgs>[]
      serie: Prisma.$SeriePayload<ExtArgs>[]
      telechargement: Prisma.$TelechargementPayload<ExtArgs>[]
      favoris: Prisma.$FavorisPayload<ExtArgs>[]
      historique: Prisma.$HistoriquePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idUser: number
      name: string
      postname: string
      email: string
      password: string
      dateDeNaissance: Date
      sexe: string
      pays: string
    }, ExtArgs["result"]["user"]>
    composites: {}
  }


  type UserGetPayload<S extends boolean | null | undefined | UserDefaultArgs> = $Result.GetResult<Prisma.$UserPayload, S>

  type UserCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<UserFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: UserCountAggregateInputType | true
    }

  export interface UserDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['User'], meta: { name: 'User' } }
    /**
     * Find zero or one User that matches the filter.
     * @param {UserFindUniqueArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends UserFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, UserFindUniqueArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one User that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {UserFindUniqueOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends UserFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first User that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends UserFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first User that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindFirstOrThrowArgs} args - Arguments to find a User
     * @example
     * // Get one User
     * const user = await prisma.user.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends UserFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Users that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Users
     * const users = await prisma.user.findMany()
     * 
     * // Get first 10 Users
     * const users = await prisma.user.findMany({ take: 10 })
     * 
     * // Only select the `idUser`
     * const userWithIdUserOnly = await prisma.user.findMany({ select: { idUser: true } })
     * 
    **/
    findMany<T extends UserFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a User.
     * @param {UserCreateArgs} args - Arguments to create a User.
     * @example
     * // Create one User
     * const User = await prisma.user.create({
     *   data: {
     *     // ... data to create a User
     *   }
     * })
     * 
    **/
    create<T extends UserCreateArgs<ExtArgs>>(
      args: SelectSubset<T, UserCreateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Users.
     *     @param {UserCreateManyArgs} args - Arguments to create many Users.
     *     @example
     *     // Create many Users
     *     const user = await prisma.user.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends UserCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a User.
     * @param {UserDeleteArgs} args - Arguments to delete one User.
     * @example
     * // Delete one User
     * const User = await prisma.user.delete({
     *   where: {
     *     // ... filter to delete one User
     *   }
     * })
     * 
    **/
    delete<T extends UserDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, UserDeleteArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one User.
     * @param {UserUpdateArgs} args - Arguments to update one User.
     * @example
     * // Update one User
     * const user = await prisma.user.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends UserUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Users.
     * @param {UserDeleteManyArgs} args - Arguments to filter Users to delete.
     * @example
     * // Delete a few Users
     * const { count } = await prisma.user.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends UserDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, UserDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Users
     * const user = await prisma.user.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends UserUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one User.
     * @param {UserUpsertArgs} args - Arguments to update or create a User.
     * @example
     * // Update or create a User
     * const user = await prisma.user.upsert({
     *   create: {
     *     // ... data to create a User
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the User we want to update
     *   }
     * })
    **/
    upsert<T extends UserUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, UserUpsertArgs<ExtArgs>>
    ): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Users.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserCountArgs} args - Arguments to filter Users to count.
     * @example
     * // Count the number of Users
     * const count = await prisma.user.count({
     *   where: {
     *     // ... the filter for the Users we want to count
     *   }
     * })
    **/
    count<T extends UserCountArgs>(
      args?: Subset<T, UserCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], UserCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends UserAggregateArgs>(args: Subset<T, UserAggregateArgs>): Prisma.PrismaPromise<GetUserAggregateType<T>>

    /**
     * Group by User.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {UserGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends UserGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: UserGroupByArgs['orderBy'] }
        : { orderBy?: UserGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, UserGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetUserGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the User model
   */
  readonly fields: UserFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for User.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__UserClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    avis<T extends User$avisArgs<ExtArgs> = {}>(args?: Subset<T, User$avisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findMany'> | Null>;

    film<T extends User$filmArgs<ExtArgs> = {}>(args?: Subset<T, User$filmArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findMany'> | Null>;

    serie<T extends User$serieArgs<ExtArgs> = {}>(args?: Subset<T, User$serieArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findMany'> | Null>;

    telechargement<T extends User$telechargementArgs<ExtArgs> = {}>(args?: Subset<T, User$telechargementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findMany'> | Null>;

    favoris<T extends User$favorisArgs<ExtArgs> = {}>(args?: Subset<T, User$favorisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findMany'> | Null>;

    historique<T extends User$historiqueArgs<ExtArgs> = {}>(args?: Subset<T, User$historiqueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the User model
   */ 
  interface UserFieldRefs {
    readonly idUser: FieldRef<"User", 'Int'>
    readonly name: FieldRef<"User", 'String'>
    readonly postname: FieldRef<"User", 'String'>
    readonly email: FieldRef<"User", 'String'>
    readonly password: FieldRef<"User", 'String'>
    readonly dateDeNaissance: FieldRef<"User", 'DateTime'>
    readonly sexe: FieldRef<"User", 'String'>
    readonly pays: FieldRef<"User", 'String'>
  }
    

  // Custom InputTypes

  /**
   * User findUnique
   */
  export type UserFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findUniqueOrThrow
   */
  export type UserFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User findFirst
   */
  export type UserFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findFirstOrThrow
   */
  export type UserFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which User to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Users.
     */
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User findMany
   */
  export type UserFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter, which Users to fetch.
     */
    where?: UserWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Users to fetch.
     */
    orderBy?: UserOrderByWithRelationInput | UserOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Users.
     */
    cursor?: UserWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Users from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Users.
     */
    skip?: number
    distinct?: UserScalarFieldEnum | UserScalarFieldEnum[]
  }


  /**
   * User create
   */
  export type UserCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to create a User.
     */
    data: XOR<UserCreateInput, UserUncheckedCreateInput>
  }


  /**
   * User createMany
   */
  export type UserCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Users.
     */
    data: UserCreateManyInput | UserCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * User update
   */
  export type UserUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The data needed to update a User.
     */
    data: XOR<UserUpdateInput, UserUncheckedUpdateInput>
    /**
     * Choose, which User to update.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User updateMany
   */
  export type UserUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Users.
     */
    data: XOR<UserUpdateManyMutationInput, UserUncheckedUpdateManyInput>
    /**
     * Filter which Users to update
     */
    where?: UserWhereInput
  }


  /**
   * User upsert
   */
  export type UserUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * The filter to search for the User to update in case it exists.
     */
    where: UserWhereUniqueInput
    /**
     * In case the User found by the `where` argument doesn't exist, create a new User with this data.
     */
    create: XOR<UserCreateInput, UserUncheckedCreateInput>
    /**
     * In case the User was found with the provided `where` argument, update it with this data.
     */
    update: XOR<UserUpdateInput, UserUncheckedUpdateInput>
  }


  /**
   * User delete
   */
  export type UserDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    /**
     * Filter which User to delete.
     */
    where: UserWhereUniqueInput
  }


  /**
   * User deleteMany
   */
  export type UserDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Users to delete
     */
    where?: UserWhereInput
  }


  /**
   * User.avis
   */
  export type User$avisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    where?: AvisWhereInput
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    cursor?: AvisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvisScalarFieldEnum | AvisScalarFieldEnum[]
  }


  /**
   * User.film
   */
  export type User$filmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    where?: FilmWhereInput
    orderBy?: FilmOrderByWithRelationInput | FilmOrderByWithRelationInput[]
    cursor?: FilmWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }


  /**
   * User.serie
   */
  export type User$serieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    where?: SerieWhereInput
    orderBy?: SerieOrderByWithRelationInput | SerieOrderByWithRelationInput[]
    cursor?: SerieWhereUniqueInput
    take?: number
    skip?: number
    distinct?: SerieScalarFieldEnum | SerieScalarFieldEnum[]
  }


  /**
   * User.telechargement
   */
  export type User$telechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    cursor?: TelechargementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }


  /**
   * User.favoris
   */
  export type User$favorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    where?: FavorisWhereInput
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    cursor?: FavorisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }


  /**
   * User.historique
   */
  export type User$historiqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    where?: HistoriqueWhereInput
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    cursor?: HistoriqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoriqueScalarFieldEnum | HistoriqueScalarFieldEnum[]
  }


  /**
   * User without action
   */
  export type UserDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
  }



  /**
   * Model Film
   */

  export type AggregateFilm = {
    _count: FilmCountAggregateOutputType | null
    _avg: FilmAvgAggregateOutputType | null
    _sum: FilmSumAggregateOutputType | null
    _min: FilmMinAggregateOutputType | null
    _max: FilmMaxAggregateOutputType | null
  }

  export type FilmAvgAggregateOutputType = {
    idFilm: number | null
    anneeDeSortie: number | null
    dureeMoyenneParEpisode: number | null
    userId: number | null
  }

  export type FilmSumAggregateOutputType = {
    idFilm: number | null
    anneeDeSortie: number | null
    dureeMoyenneParEpisode: number | null
    userId: number | null
  }

  export type FilmMinAggregateOutputType = {
    idFilm: number | null
    titre: string | null
    realisateur: string | null
    anneeDeSortie: number | null
    description: string | null
    acteur: string | null
    dureeMoyenneParEpisode: number | null
    urlDeStreaming: string | null
    urlDeTelechargement: string | null
    userId: number | null
  }

  export type FilmMaxAggregateOutputType = {
    idFilm: number | null
    titre: string | null
    realisateur: string | null
    anneeDeSortie: number | null
    description: string | null
    acteur: string | null
    dureeMoyenneParEpisode: number | null
    urlDeStreaming: string | null
    urlDeTelechargement: string | null
    userId: number | null
  }

  export type FilmCountAggregateOutputType = {
    idFilm: number
    titre: number
    realisateur: number
    anneeDeSortie: number
    description: number
    acteur: number
    dureeMoyenneParEpisode: number
    urlDeStreaming: number
    urlDeTelechargement: number
    userId: number
    _all: number
  }


  export type FilmAvgAggregateInputType = {
    idFilm?: true
    anneeDeSortie?: true
    dureeMoyenneParEpisode?: true
    userId?: true
  }

  export type FilmSumAggregateInputType = {
    idFilm?: true
    anneeDeSortie?: true
    dureeMoyenneParEpisode?: true
    userId?: true
  }

  export type FilmMinAggregateInputType = {
    idFilm?: true
    titre?: true
    realisateur?: true
    anneeDeSortie?: true
    description?: true
    acteur?: true
    dureeMoyenneParEpisode?: true
    urlDeStreaming?: true
    urlDeTelechargement?: true
    userId?: true
  }

  export type FilmMaxAggregateInputType = {
    idFilm?: true
    titre?: true
    realisateur?: true
    anneeDeSortie?: true
    description?: true
    acteur?: true
    dureeMoyenneParEpisode?: true
    urlDeStreaming?: true
    urlDeTelechargement?: true
    userId?: true
  }

  export type FilmCountAggregateInputType = {
    idFilm?: true
    titre?: true
    realisateur?: true
    anneeDeSortie?: true
    description?: true
    acteur?: true
    dureeMoyenneParEpisode?: true
    urlDeStreaming?: true
    urlDeTelechargement?: true
    userId?: true
    _all?: true
  }

  export type FilmAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Film to aggregate.
     */
    where?: FilmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Films to fetch.
     */
    orderBy?: FilmOrderByWithRelationInput | FilmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FilmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Films.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Films
    **/
    _count?: true | FilmCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FilmAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FilmSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FilmMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FilmMaxAggregateInputType
  }

  export type GetFilmAggregateType<T extends FilmAggregateArgs> = {
        [P in keyof T & keyof AggregateFilm]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFilm[P]>
      : GetScalarType<T[P], AggregateFilm[P]>
  }




  export type FilmGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FilmWhereInput
    orderBy?: FilmOrderByWithAggregationInput | FilmOrderByWithAggregationInput[]
    by: FilmScalarFieldEnum[] | FilmScalarFieldEnum
    having?: FilmScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FilmCountAggregateInputType | true
    _avg?: FilmAvgAggregateInputType
    _sum?: FilmSumAggregateInputType
    _min?: FilmMinAggregateInputType
    _max?: FilmMaxAggregateInputType
  }

  export type FilmGroupByOutputType = {
    idFilm: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    _count: FilmCountAggregateOutputType | null
    _avg: FilmAvgAggregateOutputType | null
    _sum: FilmSumAggregateOutputType | null
    _min: FilmMinAggregateOutputType | null
    _max: FilmMaxAggregateOutputType | null
  }

  type GetFilmGroupByPayload<T extends FilmGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FilmGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FilmGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FilmGroupByOutputType[P]>
            : GetScalarType<T[P], FilmGroupByOutputType[P]>
        }
      >
    >


  export type FilmSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idFilm?: boolean
    titre?: boolean
    realisateur?: boolean
    anneeDeSortie?: boolean
    description?: boolean
    acteur?: boolean
    dureeMoyenneParEpisode?: boolean
    urlDeStreaming?: boolean
    urlDeTelechargement?: boolean
    userId?: boolean
    telechargement?: boolean | Film$telechargementArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Avis?: boolean | Film$AvisArgs<ExtArgs>
    Favoris?: boolean | Film$FavorisArgs<ExtArgs>
    Historique?: boolean | Film$HistoriqueArgs<ExtArgs>
    _count?: boolean | FilmCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["film"]>

  export type FilmSelectScalar = {
    idFilm?: boolean
    titre?: boolean
    realisateur?: boolean
    anneeDeSortie?: boolean
    description?: boolean
    acteur?: boolean
    dureeMoyenneParEpisode?: boolean
    urlDeStreaming?: boolean
    urlDeTelechargement?: boolean
    userId?: boolean
  }

  export type FilmInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telechargement?: boolean | Film$telechargementArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Avis?: boolean | Film$AvisArgs<ExtArgs>
    Favoris?: boolean | Film$FavorisArgs<ExtArgs>
    Historique?: boolean | Film$HistoriqueArgs<ExtArgs>
    _count?: boolean | FilmCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $FilmPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Film"
    objects: {
      telechargement: Prisma.$TelechargementPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      Avis: Prisma.$AvisPayload<ExtArgs>[]
      Favoris: Prisma.$FavorisPayload<ExtArgs>[]
      Historique: Prisma.$HistoriquePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idFilm: number
      titre: string
      realisateur: string
      anneeDeSortie: number
      description: string
      acteur: string
      dureeMoyenneParEpisode: number
      urlDeStreaming: string
      urlDeTelechargement: string
      userId: number
    }, ExtArgs["result"]["film"]>
    composites: {}
  }


  type FilmGetPayload<S extends boolean | null | undefined | FilmDefaultArgs> = $Result.GetResult<Prisma.$FilmPayload, S>

  type FilmCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FilmFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FilmCountAggregateInputType | true
    }

  export interface FilmDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Film'], meta: { name: 'Film' } }
    /**
     * Find zero or one Film that matches the filter.
     * @param {FilmFindUniqueArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FilmFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FilmFindUniqueArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Film that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FilmFindUniqueOrThrowArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FilmFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FilmFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Film that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmFindFirstArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FilmFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FilmFindFirstArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Film that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmFindFirstOrThrowArgs} args - Arguments to find a Film
     * @example
     * // Get one Film
     * const film = await prisma.film.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FilmFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FilmFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Films that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Films
     * const films = await prisma.film.findMany()
     * 
     * // Get first 10 Films
     * const films = await prisma.film.findMany({ take: 10 })
     * 
     * // Only select the `idFilm`
     * const filmWithIdFilmOnly = await prisma.film.findMany({ select: { idFilm: true } })
     * 
    **/
    findMany<T extends FilmFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FilmFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Film.
     * @param {FilmCreateArgs} args - Arguments to create a Film.
     * @example
     * // Create one Film
     * const Film = await prisma.film.create({
     *   data: {
     *     // ... data to create a Film
     *   }
     * })
     * 
    **/
    create<T extends FilmCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FilmCreateArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Films.
     *     @param {FilmCreateManyArgs} args - Arguments to create many Films.
     *     @example
     *     // Create many Films
     *     const film = await prisma.film.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FilmCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FilmCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Film.
     * @param {FilmDeleteArgs} args - Arguments to delete one Film.
     * @example
     * // Delete one Film
     * const Film = await prisma.film.delete({
     *   where: {
     *     // ... filter to delete one Film
     *   }
     * })
     * 
    **/
    delete<T extends FilmDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FilmDeleteArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Film.
     * @param {FilmUpdateArgs} args - Arguments to update one Film.
     * @example
     * // Update one Film
     * const film = await prisma.film.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FilmUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FilmUpdateArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Films.
     * @param {FilmDeleteManyArgs} args - Arguments to filter Films to delete.
     * @example
     * // Delete a few Films
     * const { count } = await prisma.film.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FilmDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FilmDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Films.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Films
     * const film = await prisma.film.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FilmUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FilmUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Film.
     * @param {FilmUpsertArgs} args - Arguments to update or create a Film.
     * @example
     * // Update or create a Film
     * const film = await prisma.film.upsert({
     *   create: {
     *     // ... data to create a Film
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Film we want to update
     *   }
     * })
    **/
    upsert<T extends FilmUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FilmUpsertArgs<ExtArgs>>
    ): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Films.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmCountArgs} args - Arguments to filter Films to count.
     * @example
     * // Count the number of Films
     * const count = await prisma.film.count({
     *   where: {
     *     // ... the filter for the Films we want to count
     *   }
     * })
    **/
    count<T extends FilmCountArgs>(
      args?: Subset<T, FilmCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FilmCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Film.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FilmAggregateArgs>(args: Subset<T, FilmAggregateArgs>): Prisma.PrismaPromise<GetFilmAggregateType<T>>

    /**
     * Group by Film.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FilmGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FilmGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FilmGroupByArgs['orderBy'] }
        : { orderBy?: FilmGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FilmGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFilmGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Film model
   */
  readonly fields: FilmFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Film.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FilmClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    telechargement<T extends Film$telechargementArgs<ExtArgs> = {}>(args?: Subset<T, Film$telechargementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Avis<T extends Film$AvisArgs<ExtArgs> = {}>(args?: Subset<T, Film$AvisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findMany'> | Null>;

    Favoris<T extends Film$FavorisArgs<ExtArgs> = {}>(args?: Subset<T, Film$FavorisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findMany'> | Null>;

    Historique<T extends Film$HistoriqueArgs<ExtArgs> = {}>(args?: Subset<T, Film$HistoriqueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Film model
   */ 
  interface FilmFieldRefs {
    readonly idFilm: FieldRef<"Film", 'Int'>
    readonly titre: FieldRef<"Film", 'String'>
    readonly realisateur: FieldRef<"Film", 'String'>
    readonly anneeDeSortie: FieldRef<"Film", 'Int'>
    readonly description: FieldRef<"Film", 'String'>
    readonly acteur: FieldRef<"Film", 'String'>
    readonly dureeMoyenneParEpisode: FieldRef<"Film", 'Float'>
    readonly urlDeStreaming: FieldRef<"Film", 'String'>
    readonly urlDeTelechargement: FieldRef<"Film", 'String'>
    readonly userId: FieldRef<"Film", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Film findUnique
   */
  export type FilmFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * Filter, which Film to fetch.
     */
    where: FilmWhereUniqueInput
  }


  /**
   * Film findUniqueOrThrow
   */
  export type FilmFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * Filter, which Film to fetch.
     */
    where: FilmWhereUniqueInput
  }


  /**
   * Film findFirst
   */
  export type FilmFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * Filter, which Film to fetch.
     */
    where?: FilmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Films to fetch.
     */
    orderBy?: FilmOrderByWithRelationInput | FilmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Films.
     */
    cursor?: FilmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Films.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Films.
     */
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }


  /**
   * Film findFirstOrThrow
   */
  export type FilmFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * Filter, which Film to fetch.
     */
    where?: FilmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Films to fetch.
     */
    orderBy?: FilmOrderByWithRelationInput | FilmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Films.
     */
    cursor?: FilmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Films.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Films.
     */
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }


  /**
   * Film findMany
   */
  export type FilmFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * Filter, which Films to fetch.
     */
    where?: FilmWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Films to fetch.
     */
    orderBy?: FilmOrderByWithRelationInput | FilmOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Films.
     */
    cursor?: FilmWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Films from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Films.
     */
    skip?: number
    distinct?: FilmScalarFieldEnum | FilmScalarFieldEnum[]
  }


  /**
   * Film create
   */
  export type FilmCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * The data needed to create a Film.
     */
    data: XOR<FilmCreateInput, FilmUncheckedCreateInput>
  }


  /**
   * Film createMany
   */
  export type FilmCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Films.
     */
    data: FilmCreateManyInput | FilmCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Film update
   */
  export type FilmUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * The data needed to update a Film.
     */
    data: XOR<FilmUpdateInput, FilmUncheckedUpdateInput>
    /**
     * Choose, which Film to update.
     */
    where: FilmWhereUniqueInput
  }


  /**
   * Film updateMany
   */
  export type FilmUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Films.
     */
    data: XOR<FilmUpdateManyMutationInput, FilmUncheckedUpdateManyInput>
    /**
     * Filter which Films to update
     */
    where?: FilmWhereInput
  }


  /**
   * Film upsert
   */
  export type FilmUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * The filter to search for the Film to update in case it exists.
     */
    where: FilmWhereUniqueInput
    /**
     * In case the Film found by the `where` argument doesn't exist, create a new Film with this data.
     */
    create: XOR<FilmCreateInput, FilmUncheckedCreateInput>
    /**
     * In case the Film was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FilmUpdateInput, FilmUncheckedUpdateInput>
  }


  /**
   * Film delete
   */
  export type FilmDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
    /**
     * Filter which Film to delete.
     */
    where: FilmWhereUniqueInput
  }


  /**
   * Film deleteMany
   */
  export type FilmDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Films to delete
     */
    where?: FilmWhereInput
  }


  /**
   * Film.telechargement
   */
  export type Film$telechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    cursor?: TelechargementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }


  /**
   * Film.Avis
   */
  export type Film$AvisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    where?: AvisWhereInput
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    cursor?: AvisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvisScalarFieldEnum | AvisScalarFieldEnum[]
  }


  /**
   * Film.Favoris
   */
  export type Film$FavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    where?: FavorisWhereInput
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    cursor?: FavorisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }


  /**
   * Film.Historique
   */
  export type Film$HistoriqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    where?: HistoriqueWhereInput
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    cursor?: HistoriqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoriqueScalarFieldEnum | HistoriqueScalarFieldEnum[]
  }


  /**
   * Film without action
   */
  export type FilmDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Film
     */
    select?: FilmSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FilmInclude<ExtArgs> | null
  }



  /**
   * Model Serie
   */

  export type AggregateSerie = {
    _count: SerieCountAggregateOutputType | null
    _avg: SerieAvgAggregateOutputType | null
    _sum: SerieSumAggregateOutputType | null
    _min: SerieMinAggregateOutputType | null
    _max: SerieMaxAggregateOutputType | null
  }

  export type SerieAvgAggregateOutputType = {
    idSerie: number | null
    anneeDeSortie: number | null
    dureeMoyenneParEpisode: number | null
    userId: number | null
  }

  export type SerieSumAggregateOutputType = {
    idSerie: number | null
    anneeDeSortie: number | null
    dureeMoyenneParEpisode: number | null
    userId: number | null
  }

  export type SerieMinAggregateOutputType = {
    idSerie: number | null
    titre: string | null
    realisateur: string | null
    anneeDeSortie: number | null
    description: string | null
    acteur: string | null
    dureeMoyenneParEpisode: number | null
    urlDeStreaming: string | null
    urlDeTelechargement: string | null
    userId: number | null
  }

  export type SerieMaxAggregateOutputType = {
    idSerie: number | null
    titre: string | null
    realisateur: string | null
    anneeDeSortie: number | null
    description: string | null
    acteur: string | null
    dureeMoyenneParEpisode: number | null
    urlDeStreaming: string | null
    urlDeTelechargement: string | null
    userId: number | null
  }

  export type SerieCountAggregateOutputType = {
    idSerie: number
    titre: number
    realisateur: number
    anneeDeSortie: number
    description: number
    acteur: number
    dureeMoyenneParEpisode: number
    urlDeStreaming: number
    urlDeTelechargement: number
    userId: number
    _all: number
  }


  export type SerieAvgAggregateInputType = {
    idSerie?: true
    anneeDeSortie?: true
    dureeMoyenneParEpisode?: true
    userId?: true
  }

  export type SerieSumAggregateInputType = {
    idSerie?: true
    anneeDeSortie?: true
    dureeMoyenneParEpisode?: true
    userId?: true
  }

  export type SerieMinAggregateInputType = {
    idSerie?: true
    titre?: true
    realisateur?: true
    anneeDeSortie?: true
    description?: true
    acteur?: true
    dureeMoyenneParEpisode?: true
    urlDeStreaming?: true
    urlDeTelechargement?: true
    userId?: true
  }

  export type SerieMaxAggregateInputType = {
    idSerie?: true
    titre?: true
    realisateur?: true
    anneeDeSortie?: true
    description?: true
    acteur?: true
    dureeMoyenneParEpisode?: true
    urlDeStreaming?: true
    urlDeTelechargement?: true
    userId?: true
  }

  export type SerieCountAggregateInputType = {
    idSerie?: true
    titre?: true
    realisateur?: true
    anneeDeSortie?: true
    description?: true
    acteur?: true
    dureeMoyenneParEpisode?: true
    urlDeStreaming?: true
    urlDeTelechargement?: true
    userId?: true
    _all?: true
  }

  export type SerieAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Serie to aggregate.
     */
    where?: SerieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SerieOrderByWithRelationInput | SerieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: SerieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Series
    **/
    _count?: true | SerieCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: SerieAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: SerieSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: SerieMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: SerieMaxAggregateInputType
  }

  export type GetSerieAggregateType<T extends SerieAggregateArgs> = {
        [P in keyof T & keyof AggregateSerie]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateSerie[P]>
      : GetScalarType<T[P], AggregateSerie[P]>
  }




  export type SerieGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: SerieWhereInput
    orderBy?: SerieOrderByWithAggregationInput | SerieOrderByWithAggregationInput[]
    by: SerieScalarFieldEnum[] | SerieScalarFieldEnum
    having?: SerieScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: SerieCountAggregateInputType | true
    _avg?: SerieAvgAggregateInputType
    _sum?: SerieSumAggregateInputType
    _min?: SerieMinAggregateInputType
    _max?: SerieMaxAggregateInputType
  }

  export type SerieGroupByOutputType = {
    idSerie: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    _count: SerieCountAggregateOutputType | null
    _avg: SerieAvgAggregateOutputType | null
    _sum: SerieSumAggregateOutputType | null
    _min: SerieMinAggregateOutputType | null
    _max: SerieMaxAggregateOutputType | null
  }

  type GetSerieGroupByPayload<T extends SerieGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<SerieGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof SerieGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], SerieGroupByOutputType[P]>
            : GetScalarType<T[P], SerieGroupByOutputType[P]>
        }
      >
    >


  export type SerieSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idSerie?: boolean
    titre?: boolean
    realisateur?: boolean
    anneeDeSortie?: boolean
    description?: boolean
    acteur?: boolean
    dureeMoyenneParEpisode?: boolean
    urlDeStreaming?: boolean
    urlDeTelechargement?: boolean
    userId?: boolean
    telechargement?: boolean | Serie$telechargementArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Avis?: boolean | Serie$AvisArgs<ExtArgs>
    Favoris?: boolean | Serie$FavorisArgs<ExtArgs>
    Historique?: boolean | Serie$HistoriqueArgs<ExtArgs>
    _count?: boolean | SerieCountOutputTypeDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["serie"]>

  export type SerieSelectScalar = {
    idSerie?: boolean
    titre?: boolean
    realisateur?: boolean
    anneeDeSortie?: boolean
    description?: boolean
    acteur?: boolean
    dureeMoyenneParEpisode?: boolean
    urlDeStreaming?: boolean
    urlDeTelechargement?: boolean
    userId?: boolean
  }

  export type SerieInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    telechargement?: boolean | Serie$telechargementArgs<ExtArgs>
    user?: boolean | UserDefaultArgs<ExtArgs>
    Avis?: boolean | Serie$AvisArgs<ExtArgs>
    Favoris?: boolean | Serie$FavorisArgs<ExtArgs>
    Historique?: boolean | Serie$HistoriqueArgs<ExtArgs>
    _count?: boolean | SerieCountOutputTypeDefaultArgs<ExtArgs>
  }


  export type $SeriePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Serie"
    objects: {
      telechargement: Prisma.$TelechargementPayload<ExtArgs>[]
      user: Prisma.$UserPayload<ExtArgs>
      Avis: Prisma.$AvisPayload<ExtArgs>[]
      Favoris: Prisma.$FavorisPayload<ExtArgs>[]
      Historique: Prisma.$HistoriquePayload<ExtArgs>[]
    }
    scalars: $Extensions.GetPayloadResult<{
      idSerie: number
      titre: string
      realisateur: string
      anneeDeSortie: number
      description: string
      acteur: string
      dureeMoyenneParEpisode: number
      urlDeStreaming: string
      urlDeTelechargement: string
      userId: number
    }, ExtArgs["result"]["serie"]>
    composites: {}
  }


  type SerieGetPayload<S extends boolean | null | undefined | SerieDefaultArgs> = $Result.GetResult<Prisma.$SeriePayload, S>

  type SerieCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<SerieFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: SerieCountAggregateInputType | true
    }

  export interface SerieDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Serie'], meta: { name: 'Serie' } }
    /**
     * Find zero or one Serie that matches the filter.
     * @param {SerieFindUniqueArgs} args - Arguments to find a Serie
     * @example
     * // Get one Serie
     * const serie = await prisma.serie.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends SerieFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, SerieFindUniqueArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Serie that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {SerieFindUniqueOrThrowArgs} args - Arguments to find a Serie
     * @example
     * // Get one Serie
     * const serie = await prisma.serie.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends SerieFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SerieFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Serie that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieFindFirstArgs} args - Arguments to find a Serie
     * @example
     * // Get one Serie
     * const serie = await prisma.serie.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends SerieFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, SerieFindFirstArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Serie that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieFindFirstOrThrowArgs} args - Arguments to find a Serie
     * @example
     * // Get one Serie
     * const serie = await prisma.serie.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends SerieFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, SerieFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Series that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Series
     * const series = await prisma.serie.findMany()
     * 
     * // Get first 10 Series
     * const series = await prisma.serie.findMany({ take: 10 })
     * 
     * // Only select the `idSerie`
     * const serieWithIdSerieOnly = await prisma.serie.findMany({ select: { idSerie: true } })
     * 
    **/
    findMany<T extends SerieFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SerieFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Serie.
     * @param {SerieCreateArgs} args - Arguments to create a Serie.
     * @example
     * // Create one Serie
     * const Serie = await prisma.serie.create({
     *   data: {
     *     // ... data to create a Serie
     *   }
     * })
     * 
    **/
    create<T extends SerieCreateArgs<ExtArgs>>(
      args: SelectSubset<T, SerieCreateArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Series.
     *     @param {SerieCreateManyArgs} args - Arguments to create many Series.
     *     @example
     *     // Create many Series
     *     const serie = await prisma.serie.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends SerieCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SerieCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Serie.
     * @param {SerieDeleteArgs} args - Arguments to delete one Serie.
     * @example
     * // Delete one Serie
     * const Serie = await prisma.serie.delete({
     *   where: {
     *     // ... filter to delete one Serie
     *   }
     * })
     * 
    **/
    delete<T extends SerieDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, SerieDeleteArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Serie.
     * @param {SerieUpdateArgs} args - Arguments to update one Serie.
     * @example
     * // Update one Serie
     * const serie = await prisma.serie.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends SerieUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, SerieUpdateArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Series.
     * @param {SerieDeleteManyArgs} args - Arguments to filter Series to delete.
     * @example
     * // Delete a few Series
     * const { count } = await prisma.serie.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends SerieDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, SerieDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Series
     * const serie = await prisma.serie.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends SerieUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, SerieUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Serie.
     * @param {SerieUpsertArgs} args - Arguments to update or create a Serie.
     * @example
     * // Update or create a Serie
     * const serie = await prisma.serie.upsert({
     *   create: {
     *     // ... data to create a Serie
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Serie we want to update
     *   }
     * })
    **/
    upsert<T extends SerieUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, SerieUpsertArgs<ExtArgs>>
    ): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Series.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieCountArgs} args - Arguments to filter Series to count.
     * @example
     * // Count the number of Series
     * const count = await prisma.serie.count({
     *   where: {
     *     // ... the filter for the Series we want to count
     *   }
     * })
    **/
    count<T extends SerieCountArgs>(
      args?: Subset<T, SerieCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], SerieCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Serie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends SerieAggregateArgs>(args: Subset<T, SerieAggregateArgs>): Prisma.PrismaPromise<GetSerieAggregateType<T>>

    /**
     * Group by Serie.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {SerieGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends SerieGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: SerieGroupByArgs['orderBy'] }
        : { orderBy?: SerieGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, SerieGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetSerieGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Serie model
   */
  readonly fields: SerieFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Serie.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__SerieClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    telechargement<T extends Serie$telechargementArgs<ExtArgs> = {}>(args?: Subset<T, Serie$telechargementArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findMany'> | Null>;

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    Avis<T extends Serie$AvisArgs<ExtArgs> = {}>(args?: Subset<T, Serie$AvisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findMany'> | Null>;

    Favoris<T extends Serie$FavorisArgs<ExtArgs> = {}>(args?: Subset<T, Serie$FavorisArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findMany'> | Null>;

    Historique<T extends Serie$HistoriqueArgs<ExtArgs> = {}>(args?: Subset<T, Serie$HistoriqueArgs<ExtArgs>>): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findMany'> | Null>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Serie model
   */ 
  interface SerieFieldRefs {
    readonly idSerie: FieldRef<"Serie", 'Int'>
    readonly titre: FieldRef<"Serie", 'String'>
    readonly realisateur: FieldRef<"Serie", 'String'>
    readonly anneeDeSortie: FieldRef<"Serie", 'Int'>
    readonly description: FieldRef<"Serie", 'String'>
    readonly acteur: FieldRef<"Serie", 'String'>
    readonly dureeMoyenneParEpisode: FieldRef<"Serie", 'Float'>
    readonly urlDeStreaming: FieldRef<"Serie", 'String'>
    readonly urlDeTelechargement: FieldRef<"Serie", 'String'>
    readonly userId: FieldRef<"Serie", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Serie findUnique
   */
  export type SerieFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * Filter, which Serie to fetch.
     */
    where: SerieWhereUniqueInput
  }


  /**
   * Serie findUniqueOrThrow
   */
  export type SerieFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * Filter, which Serie to fetch.
     */
    where: SerieWhereUniqueInput
  }


  /**
   * Serie findFirst
   */
  export type SerieFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * Filter, which Serie to fetch.
     */
    where?: SerieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SerieOrderByWithRelationInput | SerieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Series.
     */
    cursor?: SerieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Series.
     */
    distinct?: SerieScalarFieldEnum | SerieScalarFieldEnum[]
  }


  /**
   * Serie findFirstOrThrow
   */
  export type SerieFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * Filter, which Serie to fetch.
     */
    where?: SerieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SerieOrderByWithRelationInput | SerieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Series.
     */
    cursor?: SerieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Series.
     */
    distinct?: SerieScalarFieldEnum | SerieScalarFieldEnum[]
  }


  /**
   * Serie findMany
   */
  export type SerieFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * Filter, which Series to fetch.
     */
    where?: SerieWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Series to fetch.
     */
    orderBy?: SerieOrderByWithRelationInput | SerieOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Series.
     */
    cursor?: SerieWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Series from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Series.
     */
    skip?: number
    distinct?: SerieScalarFieldEnum | SerieScalarFieldEnum[]
  }


  /**
   * Serie create
   */
  export type SerieCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * The data needed to create a Serie.
     */
    data: XOR<SerieCreateInput, SerieUncheckedCreateInput>
  }


  /**
   * Serie createMany
   */
  export type SerieCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Series.
     */
    data: SerieCreateManyInput | SerieCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Serie update
   */
  export type SerieUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * The data needed to update a Serie.
     */
    data: XOR<SerieUpdateInput, SerieUncheckedUpdateInput>
    /**
     * Choose, which Serie to update.
     */
    where: SerieWhereUniqueInput
  }


  /**
   * Serie updateMany
   */
  export type SerieUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Series.
     */
    data: XOR<SerieUpdateManyMutationInput, SerieUncheckedUpdateManyInput>
    /**
     * Filter which Series to update
     */
    where?: SerieWhereInput
  }


  /**
   * Serie upsert
   */
  export type SerieUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * The filter to search for the Serie to update in case it exists.
     */
    where: SerieWhereUniqueInput
    /**
     * In case the Serie found by the `where` argument doesn't exist, create a new Serie with this data.
     */
    create: XOR<SerieCreateInput, SerieUncheckedCreateInput>
    /**
     * In case the Serie was found with the provided `where` argument, update it with this data.
     */
    update: XOR<SerieUpdateInput, SerieUncheckedUpdateInput>
  }


  /**
   * Serie delete
   */
  export type SerieDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
    /**
     * Filter which Serie to delete.
     */
    where: SerieWhereUniqueInput
  }


  /**
   * Serie deleteMany
   */
  export type SerieDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Series to delete
     */
    where?: SerieWhereInput
  }


  /**
   * Serie.telechargement
   */
  export type Serie$telechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    cursor?: TelechargementWhereUniqueInput
    take?: number
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }


  /**
   * Serie.Avis
   */
  export type Serie$AvisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    where?: AvisWhereInput
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    cursor?: AvisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: AvisScalarFieldEnum | AvisScalarFieldEnum[]
  }


  /**
   * Serie.Favoris
   */
  export type Serie$FavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    where?: FavorisWhereInput
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    cursor?: FavorisWhereUniqueInput
    take?: number
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }


  /**
   * Serie.Historique
   */
  export type Serie$HistoriqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    where?: HistoriqueWhereInput
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    cursor?: HistoriqueWhereUniqueInput
    take?: number
    skip?: number
    distinct?: HistoriqueScalarFieldEnum | HistoriqueScalarFieldEnum[]
  }


  /**
   * Serie without action
   */
  export type SerieDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Serie
     */
    select?: SerieSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: SerieInclude<ExtArgs> | null
  }



  /**
   * Model Telechargement
   */

  export type AggregateTelechargement = {
    _count: TelechargementCountAggregateOutputType | null
    _avg: TelechargementAvgAggregateOutputType | null
    _sum: TelechargementSumAggregateOutputType | null
    _min: TelechargementMinAggregateOutputType | null
    _max: TelechargementMaxAggregateOutputType | null
  }

  export type TelechargementAvgAggregateOutputType = {
    id: number | null
    filmId: number | null
    serieId: number | null
    userIdUser: number | null
  }

  export type TelechargementSumAggregateOutputType = {
    id: number | null
    filmId: number | null
    serieId: number | null
    userIdUser: number | null
  }

  export type TelechargementMinAggregateOutputType = {
    id: number | null
    date: Date | null
    filmId: number | null
    serieId: number | null
    qualiteVideo: string | null
    userIdUser: number | null
  }

  export type TelechargementMaxAggregateOutputType = {
    id: number | null
    date: Date | null
    filmId: number | null
    serieId: number | null
    qualiteVideo: string | null
    userIdUser: number | null
  }

  export type TelechargementCountAggregateOutputType = {
    id: number
    date: number
    filmId: number
    serieId: number
    qualiteVideo: number
    userIdUser: number
    _all: number
  }


  export type TelechargementAvgAggregateInputType = {
    id?: true
    filmId?: true
    serieId?: true
    userIdUser?: true
  }

  export type TelechargementSumAggregateInputType = {
    id?: true
    filmId?: true
    serieId?: true
    userIdUser?: true
  }

  export type TelechargementMinAggregateInputType = {
    id?: true
    date?: true
    filmId?: true
    serieId?: true
    qualiteVideo?: true
    userIdUser?: true
  }

  export type TelechargementMaxAggregateInputType = {
    id?: true
    date?: true
    filmId?: true
    serieId?: true
    qualiteVideo?: true
    userIdUser?: true
  }

  export type TelechargementCountAggregateInputType = {
    id?: true
    date?: true
    filmId?: true
    serieId?: true
    qualiteVideo?: true
    userIdUser?: true
    _all?: true
  }

  export type TelechargementAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Telechargement to aggregate.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Telechargements
    **/
    _count?: true | TelechargementCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: TelechargementAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: TelechargementSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: TelechargementMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: TelechargementMaxAggregateInputType
  }

  export type GetTelechargementAggregateType<T extends TelechargementAggregateArgs> = {
        [P in keyof T & keyof AggregateTelechargement]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateTelechargement[P]>
      : GetScalarType<T[P], AggregateTelechargement[P]>
  }




  export type TelechargementGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: TelechargementWhereInput
    orderBy?: TelechargementOrderByWithAggregationInput | TelechargementOrderByWithAggregationInput[]
    by: TelechargementScalarFieldEnum[] | TelechargementScalarFieldEnum
    having?: TelechargementScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: TelechargementCountAggregateInputType | true
    _avg?: TelechargementAvgAggregateInputType
    _sum?: TelechargementSumAggregateInputType
    _min?: TelechargementMinAggregateInputType
    _max?: TelechargementMaxAggregateInputType
  }

  export type TelechargementGroupByOutputType = {
    id: number
    date: Date
    filmId: number
    serieId: number
    qualiteVideo: string
    userIdUser: number | null
    _count: TelechargementCountAggregateOutputType | null
    _avg: TelechargementAvgAggregateOutputType | null
    _sum: TelechargementSumAggregateOutputType | null
    _min: TelechargementMinAggregateOutputType | null
    _max: TelechargementMaxAggregateOutputType | null
  }

  type GetTelechargementGroupByPayload<T extends TelechargementGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<TelechargementGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof TelechargementGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], TelechargementGroupByOutputType[P]>
            : GetScalarType<T[P], TelechargementGroupByOutputType[P]>
        }
      >
    >


  export type TelechargementSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    id?: boolean
    date?: boolean
    filmId?: boolean
    serieId?: boolean
    qualiteVideo?: boolean
    userIdUser?: boolean
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
    User?: boolean | Telechargement$UserArgs<ExtArgs>
  }, ExtArgs["result"]["telechargement"]>

  export type TelechargementSelectScalar = {
    id?: boolean
    date?: boolean
    filmId?: boolean
    serieId?: boolean
    qualiteVideo?: boolean
    userIdUser?: boolean
  }

  export type TelechargementInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
    User?: boolean | Telechargement$UserArgs<ExtArgs>
  }


  export type $TelechargementPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Telechargement"
    objects: {
      film: Prisma.$FilmPayload<ExtArgs>
      serie: Prisma.$SeriePayload<ExtArgs>
      User: Prisma.$UserPayload<ExtArgs> | null
    }
    scalars: $Extensions.GetPayloadResult<{
      id: number
      date: Date
      filmId: number
      serieId: number
      qualiteVideo: string
      userIdUser: number | null
    }, ExtArgs["result"]["telechargement"]>
    composites: {}
  }


  type TelechargementGetPayload<S extends boolean | null | undefined | TelechargementDefaultArgs> = $Result.GetResult<Prisma.$TelechargementPayload, S>

  type TelechargementCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<TelechargementFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: TelechargementCountAggregateInputType | true
    }

  export interface TelechargementDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Telechargement'], meta: { name: 'Telechargement' } }
    /**
     * Find zero or one Telechargement that matches the filter.
     * @param {TelechargementFindUniqueArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends TelechargementFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, TelechargementFindUniqueArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Telechargement that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {TelechargementFindUniqueOrThrowArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends TelechargementFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TelechargementFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Telechargement that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementFindFirstArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends TelechargementFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, TelechargementFindFirstArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Telechargement that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementFindFirstOrThrowArgs} args - Arguments to find a Telechargement
     * @example
     * // Get one Telechargement
     * const telechargement = await prisma.telechargement.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends TelechargementFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, TelechargementFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Telechargements that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Telechargements
     * const telechargements = await prisma.telechargement.findMany()
     * 
     * // Get first 10 Telechargements
     * const telechargements = await prisma.telechargement.findMany({ take: 10 })
     * 
     * // Only select the `id`
     * const telechargementWithIdOnly = await prisma.telechargement.findMany({ select: { id: true } })
     * 
    **/
    findMany<T extends TelechargementFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TelechargementFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Telechargement.
     * @param {TelechargementCreateArgs} args - Arguments to create a Telechargement.
     * @example
     * // Create one Telechargement
     * const Telechargement = await prisma.telechargement.create({
     *   data: {
     *     // ... data to create a Telechargement
     *   }
     * })
     * 
    **/
    create<T extends TelechargementCreateArgs<ExtArgs>>(
      args: SelectSubset<T, TelechargementCreateArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Telechargements.
     *     @param {TelechargementCreateManyArgs} args - Arguments to create many Telechargements.
     *     @example
     *     // Create many Telechargements
     *     const telechargement = await prisma.telechargement.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends TelechargementCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TelechargementCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Telechargement.
     * @param {TelechargementDeleteArgs} args - Arguments to delete one Telechargement.
     * @example
     * // Delete one Telechargement
     * const Telechargement = await prisma.telechargement.delete({
     *   where: {
     *     // ... filter to delete one Telechargement
     *   }
     * })
     * 
    **/
    delete<T extends TelechargementDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, TelechargementDeleteArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Telechargement.
     * @param {TelechargementUpdateArgs} args - Arguments to update one Telechargement.
     * @example
     * // Update one Telechargement
     * const telechargement = await prisma.telechargement.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends TelechargementUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, TelechargementUpdateArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Telechargements.
     * @param {TelechargementDeleteManyArgs} args - Arguments to filter Telechargements to delete.
     * @example
     * // Delete a few Telechargements
     * const { count } = await prisma.telechargement.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends TelechargementDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, TelechargementDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Telechargements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Telechargements
     * const telechargement = await prisma.telechargement.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends TelechargementUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, TelechargementUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Telechargement.
     * @param {TelechargementUpsertArgs} args - Arguments to update or create a Telechargement.
     * @example
     * // Update or create a Telechargement
     * const telechargement = await prisma.telechargement.upsert({
     *   create: {
     *     // ... data to create a Telechargement
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Telechargement we want to update
     *   }
     * })
    **/
    upsert<T extends TelechargementUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, TelechargementUpsertArgs<ExtArgs>>
    ): Prisma__TelechargementClient<$Result.GetResult<Prisma.$TelechargementPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Telechargements.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementCountArgs} args - Arguments to filter Telechargements to count.
     * @example
     * // Count the number of Telechargements
     * const count = await prisma.telechargement.count({
     *   where: {
     *     // ... the filter for the Telechargements we want to count
     *   }
     * })
    **/
    count<T extends TelechargementCountArgs>(
      args?: Subset<T, TelechargementCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], TelechargementCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Telechargement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends TelechargementAggregateArgs>(args: Subset<T, TelechargementAggregateArgs>): Prisma.PrismaPromise<GetTelechargementAggregateType<T>>

    /**
     * Group by Telechargement.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {TelechargementGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends TelechargementGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: TelechargementGroupByArgs['orderBy'] }
        : { orderBy?: TelechargementGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, TelechargementGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetTelechargementGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Telechargement model
   */
  readonly fields: TelechargementFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Telechargement.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__TelechargementClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    film<T extends FilmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FilmDefaultArgs<ExtArgs>>): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serie<T extends SerieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SerieDefaultArgs<ExtArgs>>): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    User<T extends Telechargement$UserArgs<ExtArgs> = {}>(args?: Subset<T, Telechargement$UserArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | null, null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Telechargement model
   */ 
  interface TelechargementFieldRefs {
    readonly id: FieldRef<"Telechargement", 'Int'>
    readonly date: FieldRef<"Telechargement", 'DateTime'>
    readonly filmId: FieldRef<"Telechargement", 'Int'>
    readonly serieId: FieldRef<"Telechargement", 'Int'>
    readonly qualiteVideo: FieldRef<"Telechargement", 'String'>
    readonly userIdUser: FieldRef<"Telechargement", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Telechargement findUnique
   */
  export type TelechargementFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where: TelechargementWhereUniqueInput
  }


  /**
   * Telechargement findUniqueOrThrow
   */
  export type TelechargementFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where: TelechargementWhereUniqueInput
  }


  /**
   * Telechargement findFirst
   */
  export type TelechargementFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Telechargements.
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Telechargements.
     */
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }


  /**
   * Telechargement findFirstOrThrow
   */
  export type TelechargementFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargement to fetch.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Telechargements.
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Telechargements.
     */
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }


  /**
   * Telechargement findMany
   */
  export type TelechargementFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter, which Telechargements to fetch.
     */
    where?: TelechargementWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Telechargements to fetch.
     */
    orderBy?: TelechargementOrderByWithRelationInput | TelechargementOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Telechargements.
     */
    cursor?: TelechargementWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Telechargements from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Telechargements.
     */
    skip?: number
    distinct?: TelechargementScalarFieldEnum | TelechargementScalarFieldEnum[]
  }


  /**
   * Telechargement create
   */
  export type TelechargementCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * The data needed to create a Telechargement.
     */
    data: XOR<TelechargementCreateInput, TelechargementUncheckedCreateInput>
  }


  /**
   * Telechargement createMany
   */
  export type TelechargementCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Telechargements.
     */
    data: TelechargementCreateManyInput | TelechargementCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Telechargement update
   */
  export type TelechargementUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * The data needed to update a Telechargement.
     */
    data: XOR<TelechargementUpdateInput, TelechargementUncheckedUpdateInput>
    /**
     * Choose, which Telechargement to update.
     */
    where: TelechargementWhereUniqueInput
  }


  /**
   * Telechargement updateMany
   */
  export type TelechargementUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Telechargements.
     */
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyInput>
    /**
     * Filter which Telechargements to update
     */
    where?: TelechargementWhereInput
  }


  /**
   * Telechargement upsert
   */
  export type TelechargementUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * The filter to search for the Telechargement to update in case it exists.
     */
    where: TelechargementWhereUniqueInput
    /**
     * In case the Telechargement found by the `where` argument doesn't exist, create a new Telechargement with this data.
     */
    create: XOR<TelechargementCreateInput, TelechargementUncheckedCreateInput>
    /**
     * In case the Telechargement was found with the provided `where` argument, update it with this data.
     */
    update: XOR<TelechargementUpdateInput, TelechargementUncheckedUpdateInput>
  }


  /**
   * Telechargement delete
   */
  export type TelechargementDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
    /**
     * Filter which Telechargement to delete.
     */
    where: TelechargementWhereUniqueInput
  }


  /**
   * Telechargement deleteMany
   */
  export type TelechargementDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Telechargements to delete
     */
    where?: TelechargementWhereInput
  }


  /**
   * Telechargement.User
   */
  export type Telechargement$UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the User
     */
    select?: UserSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: UserInclude<ExtArgs> | null
    where?: UserWhereInput
  }


  /**
   * Telechargement without action
   */
  export type TelechargementDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Telechargement
     */
    select?: TelechargementSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: TelechargementInclude<ExtArgs> | null
  }



  /**
   * Model Avis
   */

  export type AggregateAvis = {
    _count: AvisCountAggregateOutputType | null
    _avg: AvisAvgAggregateOutputType | null
    _sum: AvisSumAggregateOutputType | null
    _min: AvisMinAggregateOutputType | null
    _max: AvisMaxAggregateOutputType | null
  }

  export type AvisAvgAggregateOutputType = {
    idAvis: number | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type AvisSumAggregateOutputType = {
    idAvis: number | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type AvisMinAggregateOutputType = {
    idAvis: number | null
    userId: number | null
    filmId: number | null
    serieId: number | null
    comment: string | null
  }

  export type AvisMaxAggregateOutputType = {
    idAvis: number | null
    userId: number | null
    filmId: number | null
    serieId: number | null
    comment: string | null
  }

  export type AvisCountAggregateOutputType = {
    idAvis: number
    userId: number
    filmId: number
    serieId: number
    comment: number
    _all: number
  }


  export type AvisAvgAggregateInputType = {
    idAvis?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type AvisSumAggregateInputType = {
    idAvis?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type AvisMinAggregateInputType = {
    idAvis?: true
    userId?: true
    filmId?: true
    serieId?: true
    comment?: true
  }

  export type AvisMaxAggregateInputType = {
    idAvis?: true
    userId?: true
    filmId?: true
    serieId?: true
    comment?: true
  }

  export type AvisCountAggregateInputType = {
    idAvis?: true
    userId?: true
    filmId?: true
    serieId?: true
    comment?: true
    _all?: true
  }

  export type AvisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avis to aggregate.
     */
    where?: AvisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avis to fetch.
     */
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: AvisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Avis
    **/
    _count?: true | AvisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: AvisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: AvisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: AvisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: AvisMaxAggregateInputType
  }

  export type GetAvisAggregateType<T extends AvisAggregateArgs> = {
        [P in keyof T & keyof AggregateAvis]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateAvis[P]>
      : GetScalarType<T[P], AggregateAvis[P]>
  }




  export type AvisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: AvisWhereInput
    orderBy?: AvisOrderByWithAggregationInput | AvisOrderByWithAggregationInput[]
    by: AvisScalarFieldEnum[] | AvisScalarFieldEnum
    having?: AvisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: AvisCountAggregateInputType | true
    _avg?: AvisAvgAggregateInputType
    _sum?: AvisSumAggregateInputType
    _min?: AvisMinAggregateInputType
    _max?: AvisMaxAggregateInputType
  }

  export type AvisGroupByOutputType = {
    idAvis: number
    userId: number
    filmId: number
    serieId: number
    comment: string | null
    _count: AvisCountAggregateOutputType | null
    _avg: AvisAvgAggregateOutputType | null
    _sum: AvisSumAggregateOutputType | null
    _min: AvisMinAggregateOutputType | null
    _max: AvisMaxAggregateOutputType | null
  }

  type GetAvisGroupByPayload<T extends AvisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<AvisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof AvisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], AvisGroupByOutputType[P]>
            : GetScalarType<T[P], AvisGroupByOutputType[P]>
        }
      >
    >


  export type AvisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idAvis?: boolean
    userId?: boolean
    filmId?: boolean
    serieId?: boolean
    comment?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["avis"]>

  export type AvisSelectScalar = {
    idAvis?: boolean
    userId?: boolean
    filmId?: boolean
    serieId?: boolean
    comment?: boolean
  }

  export type AvisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
  }


  export type $AvisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Avis"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      film: Prisma.$FilmPayload<ExtArgs>
      serie: Prisma.$SeriePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idAvis: number
      userId: number
      filmId: number
      serieId: number
      comment: string | null
    }, ExtArgs["result"]["avis"]>
    composites: {}
  }


  type AvisGetPayload<S extends boolean | null | undefined | AvisDefaultArgs> = $Result.GetResult<Prisma.$AvisPayload, S>

  type AvisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<AvisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: AvisCountAggregateInputType | true
    }

  export interface AvisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Avis'], meta: { name: 'Avis' } }
    /**
     * Find zero or one Avis that matches the filter.
     * @param {AvisFindUniqueArgs} args - Arguments to find a Avis
     * @example
     * // Get one Avis
     * const avis = await prisma.avis.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends AvisFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, AvisFindUniqueArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Avis that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {AvisFindUniqueOrThrowArgs} args - Arguments to find a Avis
     * @example
     * // Get one Avis
     * const avis = await prisma.avis.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends AvisFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AvisFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Avis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisFindFirstArgs} args - Arguments to find a Avis
     * @example
     * // Get one Avis
     * const avis = await prisma.avis.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends AvisFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, AvisFindFirstArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Avis that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisFindFirstOrThrowArgs} args - Arguments to find a Avis
     * @example
     * // Get one Avis
     * const avis = await prisma.avis.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends AvisFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, AvisFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Avis that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Avis
     * const avis = await prisma.avis.findMany()
     * 
     * // Get first 10 Avis
     * const avis = await prisma.avis.findMany({ take: 10 })
     * 
     * // Only select the `idAvis`
     * const avisWithIdAvisOnly = await prisma.avis.findMany({ select: { idAvis: true } })
     * 
    **/
    findMany<T extends AvisFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvisFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Avis.
     * @param {AvisCreateArgs} args - Arguments to create a Avis.
     * @example
     * // Create one Avis
     * const Avis = await prisma.avis.create({
     *   data: {
     *     // ... data to create a Avis
     *   }
     * })
     * 
    **/
    create<T extends AvisCreateArgs<ExtArgs>>(
      args: SelectSubset<T, AvisCreateArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Avis.
     *     @param {AvisCreateManyArgs} args - Arguments to create many Avis.
     *     @example
     *     // Create many Avis
     *     const avis = await prisma.avis.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends AvisCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvisCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Avis.
     * @param {AvisDeleteArgs} args - Arguments to delete one Avis.
     * @example
     * // Delete one Avis
     * const Avis = await prisma.avis.delete({
     *   where: {
     *     // ... filter to delete one Avis
     *   }
     * })
     * 
    **/
    delete<T extends AvisDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, AvisDeleteArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Avis.
     * @param {AvisUpdateArgs} args - Arguments to update one Avis.
     * @example
     * // Update one Avis
     * const avis = await prisma.avis.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends AvisUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, AvisUpdateArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Avis.
     * @param {AvisDeleteManyArgs} args - Arguments to filter Avis to delete.
     * @example
     * // Delete a few Avis
     * const { count } = await prisma.avis.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends AvisDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, AvisDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Avis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Avis
     * const avis = await prisma.avis.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends AvisUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, AvisUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Avis.
     * @param {AvisUpsertArgs} args - Arguments to update or create a Avis.
     * @example
     * // Update or create a Avis
     * const avis = await prisma.avis.upsert({
     *   create: {
     *     // ... data to create a Avis
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Avis we want to update
     *   }
     * })
    **/
    upsert<T extends AvisUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, AvisUpsertArgs<ExtArgs>>
    ): Prisma__AvisClient<$Result.GetResult<Prisma.$AvisPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Avis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisCountArgs} args - Arguments to filter Avis to count.
     * @example
     * // Count the number of Avis
     * const count = await prisma.avis.count({
     *   where: {
     *     // ... the filter for the Avis we want to count
     *   }
     * })
    **/
    count<T extends AvisCountArgs>(
      args?: Subset<T, AvisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], AvisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Avis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends AvisAggregateArgs>(args: Subset<T, AvisAggregateArgs>): Prisma.PrismaPromise<GetAvisAggregateType<T>>

    /**
     * Group by Avis.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {AvisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends AvisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: AvisGroupByArgs['orderBy'] }
        : { orderBy?: AvisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, AvisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetAvisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Avis model
   */
  readonly fields: AvisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Avis.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__AvisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    film<T extends FilmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FilmDefaultArgs<ExtArgs>>): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serie<T extends SerieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SerieDefaultArgs<ExtArgs>>): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Avis model
   */ 
  interface AvisFieldRefs {
    readonly idAvis: FieldRef<"Avis", 'Int'>
    readonly userId: FieldRef<"Avis", 'Int'>
    readonly filmId: FieldRef<"Avis", 'Int'>
    readonly serieId: FieldRef<"Avis", 'Int'>
    readonly comment: FieldRef<"Avis", 'String'>
  }
    

  // Custom InputTypes

  /**
   * Avis findUnique
   */
  export type AvisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * Filter, which Avis to fetch.
     */
    where: AvisWhereUniqueInput
  }


  /**
   * Avis findUniqueOrThrow
   */
  export type AvisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * Filter, which Avis to fetch.
     */
    where: AvisWhereUniqueInput
  }


  /**
   * Avis findFirst
   */
  export type AvisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * Filter, which Avis to fetch.
     */
    where?: AvisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avis to fetch.
     */
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avis.
     */
    cursor?: AvisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avis.
     */
    distinct?: AvisScalarFieldEnum | AvisScalarFieldEnum[]
  }


  /**
   * Avis findFirstOrThrow
   */
  export type AvisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * Filter, which Avis to fetch.
     */
    where?: AvisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avis to fetch.
     */
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Avis.
     */
    cursor?: AvisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avis.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Avis.
     */
    distinct?: AvisScalarFieldEnum | AvisScalarFieldEnum[]
  }


  /**
   * Avis findMany
   */
  export type AvisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * Filter, which Avis to fetch.
     */
    where?: AvisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Avis to fetch.
     */
    orderBy?: AvisOrderByWithRelationInput | AvisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Avis.
     */
    cursor?: AvisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Avis from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Avis.
     */
    skip?: number
    distinct?: AvisScalarFieldEnum | AvisScalarFieldEnum[]
  }


  /**
   * Avis create
   */
  export type AvisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * The data needed to create a Avis.
     */
    data: XOR<AvisCreateInput, AvisUncheckedCreateInput>
  }


  /**
   * Avis createMany
   */
  export type AvisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Avis.
     */
    data: AvisCreateManyInput | AvisCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Avis update
   */
  export type AvisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * The data needed to update a Avis.
     */
    data: XOR<AvisUpdateInput, AvisUncheckedUpdateInput>
    /**
     * Choose, which Avis to update.
     */
    where: AvisWhereUniqueInput
  }


  /**
   * Avis updateMany
   */
  export type AvisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Avis.
     */
    data: XOR<AvisUpdateManyMutationInput, AvisUncheckedUpdateManyInput>
    /**
     * Filter which Avis to update
     */
    where?: AvisWhereInput
  }


  /**
   * Avis upsert
   */
  export type AvisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * The filter to search for the Avis to update in case it exists.
     */
    where: AvisWhereUniqueInput
    /**
     * In case the Avis found by the `where` argument doesn't exist, create a new Avis with this data.
     */
    create: XOR<AvisCreateInput, AvisUncheckedCreateInput>
    /**
     * In case the Avis was found with the provided `where` argument, update it with this data.
     */
    update: XOR<AvisUpdateInput, AvisUncheckedUpdateInput>
  }


  /**
   * Avis delete
   */
  export type AvisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
    /**
     * Filter which Avis to delete.
     */
    where: AvisWhereUniqueInput
  }


  /**
   * Avis deleteMany
   */
  export type AvisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Avis to delete
     */
    where?: AvisWhereInput
  }


  /**
   * Avis without action
   */
  export type AvisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Avis
     */
    select?: AvisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: AvisInclude<ExtArgs> | null
  }



  /**
   * Model Favoris
   */

  export type AggregateFavoris = {
    _count: FavorisCountAggregateOutputType | null
    _avg: FavorisAvgAggregateOutputType | null
    _sum: FavorisSumAggregateOutputType | null
    _min: FavorisMinAggregateOutputType | null
    _max: FavorisMaxAggregateOutputType | null
  }

  export type FavorisAvgAggregateOutputType = {
    idFavoris: number | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type FavorisSumAggregateOutputType = {
    idFavoris: bigint | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type FavorisMinAggregateOutputType = {
    idFavoris: bigint | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type FavorisMaxAggregateOutputType = {
    idFavoris: bigint | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type FavorisCountAggregateOutputType = {
    idFavoris: number
    userId: number
    filmId: number
    serieId: number
    _all: number
  }


  export type FavorisAvgAggregateInputType = {
    idFavoris?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type FavorisSumAggregateInputType = {
    idFavoris?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type FavorisMinAggregateInputType = {
    idFavoris?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type FavorisMaxAggregateInputType = {
    idFavoris?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type FavorisCountAggregateInputType = {
    idFavoris?: true
    userId?: true
    filmId?: true
    serieId?: true
    _all?: true
  }

  export type FavorisAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favoris to aggregate.
     */
    where?: FavorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorises to fetch.
     */
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: FavorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Favorises
    **/
    _count?: true | FavorisCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: FavorisAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: FavorisSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: FavorisMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: FavorisMaxAggregateInputType
  }

  export type GetFavorisAggregateType<T extends FavorisAggregateArgs> = {
        [P in keyof T & keyof AggregateFavoris]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateFavoris[P]>
      : GetScalarType<T[P], AggregateFavoris[P]>
  }




  export type FavorisGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: FavorisWhereInput
    orderBy?: FavorisOrderByWithAggregationInput | FavorisOrderByWithAggregationInput[]
    by: FavorisScalarFieldEnum[] | FavorisScalarFieldEnum
    having?: FavorisScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: FavorisCountAggregateInputType | true
    _avg?: FavorisAvgAggregateInputType
    _sum?: FavorisSumAggregateInputType
    _min?: FavorisMinAggregateInputType
    _max?: FavorisMaxAggregateInputType
  }

  export type FavorisGroupByOutputType = {
    idFavoris: bigint
    userId: number
    filmId: number
    serieId: number
    _count: FavorisCountAggregateOutputType | null
    _avg: FavorisAvgAggregateOutputType | null
    _sum: FavorisSumAggregateOutputType | null
    _min: FavorisMinAggregateOutputType | null
    _max: FavorisMaxAggregateOutputType | null
  }

  type GetFavorisGroupByPayload<T extends FavorisGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<FavorisGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof FavorisGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], FavorisGroupByOutputType[P]>
            : GetScalarType<T[P], FavorisGroupByOutputType[P]>
        }
      >
    >


  export type FavorisSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idFavoris?: boolean
    userId?: boolean
    filmId?: boolean
    serieId?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["favoris"]>

  export type FavorisSelectScalar = {
    idFavoris?: boolean
    userId?: boolean
    filmId?: boolean
    serieId?: boolean
  }

  export type FavorisInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
  }


  export type $FavorisPayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Favoris"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      film: Prisma.$FilmPayload<ExtArgs>
      serie: Prisma.$SeriePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idFavoris: bigint
      userId: number
      filmId: number
      serieId: number
    }, ExtArgs["result"]["favoris"]>
    composites: {}
  }


  type FavorisGetPayload<S extends boolean | null | undefined | FavorisDefaultArgs> = $Result.GetResult<Prisma.$FavorisPayload, S>

  type FavorisCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<FavorisFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: FavorisCountAggregateInputType | true
    }

  export interface FavorisDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Favoris'], meta: { name: 'Favoris' } }
    /**
     * Find zero or one Favoris that matches the filter.
     * @param {FavorisFindUniqueArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends FavorisFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, FavorisFindUniqueArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Favoris that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {FavorisFindUniqueOrThrowArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends FavorisFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavorisFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Favoris that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisFindFirstArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends FavorisFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, FavorisFindFirstArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Favoris that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisFindFirstOrThrowArgs} args - Arguments to find a Favoris
     * @example
     * // Get one Favoris
     * const favoris = await prisma.favoris.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends FavorisFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, FavorisFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Favorises that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Favorises
     * const favorises = await prisma.favoris.findMany()
     * 
     * // Get first 10 Favorises
     * const favorises = await prisma.favoris.findMany({ take: 10 })
     * 
     * // Only select the `idFavoris`
     * const favorisWithIdFavorisOnly = await prisma.favoris.findMany({ select: { idFavoris: true } })
     * 
    **/
    findMany<T extends FavorisFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavorisFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Favoris.
     * @param {FavorisCreateArgs} args - Arguments to create a Favoris.
     * @example
     * // Create one Favoris
     * const Favoris = await prisma.favoris.create({
     *   data: {
     *     // ... data to create a Favoris
     *   }
     * })
     * 
    **/
    create<T extends FavorisCreateArgs<ExtArgs>>(
      args: SelectSubset<T, FavorisCreateArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Favorises.
     *     @param {FavorisCreateManyArgs} args - Arguments to create many Favorises.
     *     @example
     *     // Create many Favorises
     *     const favoris = await prisma.favoris.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends FavorisCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavorisCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Favoris.
     * @param {FavorisDeleteArgs} args - Arguments to delete one Favoris.
     * @example
     * // Delete one Favoris
     * const Favoris = await prisma.favoris.delete({
     *   where: {
     *     // ... filter to delete one Favoris
     *   }
     * })
     * 
    **/
    delete<T extends FavorisDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, FavorisDeleteArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Favoris.
     * @param {FavorisUpdateArgs} args - Arguments to update one Favoris.
     * @example
     * // Update one Favoris
     * const favoris = await prisma.favoris.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends FavorisUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, FavorisUpdateArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Favorises.
     * @param {FavorisDeleteManyArgs} args - Arguments to filter Favorises to delete.
     * @example
     * // Delete a few Favorises
     * const { count } = await prisma.favoris.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends FavorisDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, FavorisDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Favorises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Favorises
     * const favoris = await prisma.favoris.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends FavorisUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, FavorisUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Favoris.
     * @param {FavorisUpsertArgs} args - Arguments to update or create a Favoris.
     * @example
     * // Update or create a Favoris
     * const favoris = await prisma.favoris.upsert({
     *   create: {
     *     // ... data to create a Favoris
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Favoris we want to update
     *   }
     * })
    **/
    upsert<T extends FavorisUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, FavorisUpsertArgs<ExtArgs>>
    ): Prisma__FavorisClient<$Result.GetResult<Prisma.$FavorisPayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Favorises.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisCountArgs} args - Arguments to filter Favorises to count.
     * @example
     * // Count the number of Favorises
     * const count = await prisma.favoris.count({
     *   where: {
     *     // ... the filter for the Favorises we want to count
     *   }
     * })
    **/
    count<T extends FavorisCountArgs>(
      args?: Subset<T, FavorisCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], FavorisCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Favoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends FavorisAggregateArgs>(args: Subset<T, FavorisAggregateArgs>): Prisma.PrismaPromise<GetFavorisAggregateType<T>>

    /**
     * Group by Favoris.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {FavorisGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends FavorisGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: FavorisGroupByArgs['orderBy'] }
        : { orderBy?: FavorisGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, FavorisGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetFavorisGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Favoris model
   */
  readonly fields: FavorisFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Favoris.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__FavorisClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    film<T extends FilmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FilmDefaultArgs<ExtArgs>>): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serie<T extends SerieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SerieDefaultArgs<ExtArgs>>): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Favoris model
   */ 
  interface FavorisFieldRefs {
    readonly idFavoris: FieldRef<"Favoris", 'BigInt'>
    readonly userId: FieldRef<"Favoris", 'Int'>
    readonly filmId: FieldRef<"Favoris", 'Int'>
    readonly serieId: FieldRef<"Favoris", 'Int'>
  }
    

  // Custom InputTypes

  /**
   * Favoris findUnique
   */
  export type FavorisFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * Filter, which Favoris to fetch.
     */
    where: FavorisWhereUniqueInput
  }


  /**
   * Favoris findUniqueOrThrow
   */
  export type FavorisFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * Filter, which Favoris to fetch.
     */
    where: FavorisWhereUniqueInput
  }


  /**
   * Favoris findFirst
   */
  export type FavorisFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * Filter, which Favoris to fetch.
     */
    where?: FavorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorises to fetch.
     */
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorises.
     */
    cursor?: FavorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorises.
     */
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }


  /**
   * Favoris findFirstOrThrow
   */
  export type FavorisFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * Filter, which Favoris to fetch.
     */
    where?: FavorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorises to fetch.
     */
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Favorises.
     */
    cursor?: FavorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorises.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Favorises.
     */
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }


  /**
   * Favoris findMany
   */
  export type FavorisFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * Filter, which Favorises to fetch.
     */
    where?: FavorisWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Favorises to fetch.
     */
    orderBy?: FavorisOrderByWithRelationInput | FavorisOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Favorises.
     */
    cursor?: FavorisWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Favorises from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Favorises.
     */
    skip?: number
    distinct?: FavorisScalarFieldEnum | FavorisScalarFieldEnum[]
  }


  /**
   * Favoris create
   */
  export type FavorisCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * The data needed to create a Favoris.
     */
    data: XOR<FavorisCreateInput, FavorisUncheckedCreateInput>
  }


  /**
   * Favoris createMany
   */
  export type FavorisCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Favorises.
     */
    data: FavorisCreateManyInput | FavorisCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Favoris update
   */
  export type FavorisUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * The data needed to update a Favoris.
     */
    data: XOR<FavorisUpdateInput, FavorisUncheckedUpdateInput>
    /**
     * Choose, which Favoris to update.
     */
    where: FavorisWhereUniqueInput
  }


  /**
   * Favoris updateMany
   */
  export type FavorisUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Favorises.
     */
    data: XOR<FavorisUpdateManyMutationInput, FavorisUncheckedUpdateManyInput>
    /**
     * Filter which Favorises to update
     */
    where?: FavorisWhereInput
  }


  /**
   * Favoris upsert
   */
  export type FavorisUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * The filter to search for the Favoris to update in case it exists.
     */
    where: FavorisWhereUniqueInput
    /**
     * In case the Favoris found by the `where` argument doesn't exist, create a new Favoris with this data.
     */
    create: XOR<FavorisCreateInput, FavorisUncheckedCreateInput>
    /**
     * In case the Favoris was found with the provided `where` argument, update it with this data.
     */
    update: XOR<FavorisUpdateInput, FavorisUncheckedUpdateInput>
  }


  /**
   * Favoris delete
   */
  export type FavorisDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
    /**
     * Filter which Favoris to delete.
     */
    where: FavorisWhereUniqueInput
  }


  /**
   * Favoris deleteMany
   */
  export type FavorisDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Favorises to delete
     */
    where?: FavorisWhereInput
  }


  /**
   * Favoris without action
   */
  export type FavorisDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Favoris
     */
    select?: FavorisSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: FavorisInclude<ExtArgs> | null
  }



  /**
   * Model Historique
   */

  export type AggregateHistorique = {
    _count: HistoriqueCountAggregateOutputType | null
    _avg: HistoriqueAvgAggregateOutputType | null
    _sum: HistoriqueSumAggregateOutputType | null
    _min: HistoriqueMinAggregateOutputType | null
    _max: HistoriqueMaxAggregateOutputType | null
  }

  export type HistoriqueAvgAggregateOutputType = {
    idHistorique: number | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type HistoriqueSumAggregateOutputType = {
    idHistorique: bigint | null
    userId: number | null
    filmId: number | null
    serieId: number | null
  }

  export type HistoriqueMinAggregateOutputType = {
    idHistorique: bigint | null
    userId: number | null
    filmId: number | null
    serieId: number | null
    dateDeVisuaisation: Date | null
  }

  export type HistoriqueMaxAggregateOutputType = {
    idHistorique: bigint | null
    userId: number | null
    filmId: number | null
    serieId: number | null
    dateDeVisuaisation: Date | null
  }

  export type HistoriqueCountAggregateOutputType = {
    idHistorique: number
    userId: number
    filmId: number
    serieId: number
    dateDeVisuaisation: number
    _all: number
  }


  export type HistoriqueAvgAggregateInputType = {
    idHistorique?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type HistoriqueSumAggregateInputType = {
    idHistorique?: true
    userId?: true
    filmId?: true
    serieId?: true
  }

  export type HistoriqueMinAggregateInputType = {
    idHistorique?: true
    userId?: true
    filmId?: true
    serieId?: true
    dateDeVisuaisation?: true
  }

  export type HistoriqueMaxAggregateInputType = {
    idHistorique?: true
    userId?: true
    filmId?: true
    serieId?: true
    dateDeVisuaisation?: true
  }

  export type HistoriqueCountAggregateInputType = {
    idHistorique?: true
    userId?: true
    filmId?: true
    serieId?: true
    dateDeVisuaisation?: true
    _all?: true
  }

  export type HistoriqueAggregateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historique to aggregate.
     */
    where?: HistoriqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historiques to fetch.
     */
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the start position
     */
    cursor?: HistoriqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historiques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Count returned Historiques
    **/
    _count?: true | HistoriqueCountAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to average
    **/
    _avg?: HistoriqueAvgAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to sum
    **/
    _sum?: HistoriqueSumAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the minimum value
    **/
    _min?: HistoriqueMinAggregateInputType
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/aggregations Aggregation Docs}
     * 
     * Select which fields to find the maximum value
    **/
    _max?: HistoriqueMaxAggregateInputType
  }

  export type GetHistoriqueAggregateType<T extends HistoriqueAggregateArgs> = {
        [P in keyof T & keyof AggregateHistorique]: P extends '_count' | 'count'
      ? T[P] extends true
        ? number
        : GetScalarType<T[P], AggregateHistorique[P]>
      : GetScalarType<T[P], AggregateHistorique[P]>
  }




  export type HistoriqueGroupByArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    where?: HistoriqueWhereInput
    orderBy?: HistoriqueOrderByWithAggregationInput | HistoriqueOrderByWithAggregationInput[]
    by: HistoriqueScalarFieldEnum[] | HistoriqueScalarFieldEnum
    having?: HistoriqueScalarWhereWithAggregatesInput
    take?: number
    skip?: number
    _count?: HistoriqueCountAggregateInputType | true
    _avg?: HistoriqueAvgAggregateInputType
    _sum?: HistoriqueSumAggregateInputType
    _min?: HistoriqueMinAggregateInputType
    _max?: HistoriqueMaxAggregateInputType
  }

  export type HistoriqueGroupByOutputType = {
    idHistorique: bigint
    userId: number
    filmId: number
    serieId: number
    dateDeVisuaisation: Date
    _count: HistoriqueCountAggregateOutputType | null
    _avg: HistoriqueAvgAggregateOutputType | null
    _sum: HistoriqueSumAggregateOutputType | null
    _min: HistoriqueMinAggregateOutputType | null
    _max: HistoriqueMaxAggregateOutputType | null
  }

  type GetHistoriqueGroupByPayload<T extends HistoriqueGroupByArgs> = Prisma.PrismaPromise<
    Array<
      PickEnumerable<HistoriqueGroupByOutputType, T['by']> &
        {
          [P in ((keyof T) & (keyof HistoriqueGroupByOutputType))]: P extends '_count'
            ? T[P] extends boolean
              ? number
              : GetScalarType<T[P], HistoriqueGroupByOutputType[P]>
            : GetScalarType<T[P], HistoriqueGroupByOutputType[P]>
        }
      >
    >


  export type HistoriqueSelect<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = $Extensions.GetSelect<{
    idHistorique?: boolean
    userId?: boolean
    filmId?: boolean
    serieId?: boolean
    dateDeVisuaisation?: boolean
    user?: boolean | UserDefaultArgs<ExtArgs>
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
  }, ExtArgs["result"]["historique"]>

  export type HistoriqueSelectScalar = {
    idHistorique?: boolean
    userId?: boolean
    filmId?: boolean
    serieId?: boolean
    dateDeVisuaisation?: boolean
  }

  export type HistoriqueInclude<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    user?: boolean | UserDefaultArgs<ExtArgs>
    film?: boolean | FilmDefaultArgs<ExtArgs>
    serie?: boolean | SerieDefaultArgs<ExtArgs>
  }


  export type $HistoriquePayload<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    name: "Historique"
    objects: {
      user: Prisma.$UserPayload<ExtArgs>
      film: Prisma.$FilmPayload<ExtArgs>
      serie: Prisma.$SeriePayload<ExtArgs>
    }
    scalars: $Extensions.GetPayloadResult<{
      idHistorique: bigint
      userId: number
      filmId: number
      serieId: number
      dateDeVisuaisation: Date
    }, ExtArgs["result"]["historique"]>
    composites: {}
  }


  type HistoriqueGetPayload<S extends boolean | null | undefined | HistoriqueDefaultArgs> = $Result.GetResult<Prisma.$HistoriquePayload, S>

  type HistoriqueCountArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = 
    Omit<HistoriqueFindManyArgs, 'select' | 'include' | 'distinct'> & {
      select?: HistoriqueCountAggregateInputType | true
    }

  export interface HistoriqueDelegate<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> {
    [K: symbol]: { types: Prisma.TypeMap<ExtArgs>['model']['Historique'], meta: { name: 'Historique' } }
    /**
     * Find zero or one Historique that matches the filter.
     * @param {HistoriqueFindUniqueArgs} args - Arguments to find a Historique
     * @example
     * // Get one Historique
     * const historique = await prisma.historique.findUnique({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUnique<T extends HistoriqueFindUniqueArgs<ExtArgs>>(
      args: SelectSubset<T, HistoriqueFindUniqueArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findUnique'> | null, null, ExtArgs>

    /**
     * Find one Historique that matches the filter or throw an error  with `error.code='P2025'` 
     *     if no matches were found.
     * @param {HistoriqueFindUniqueOrThrowArgs} args - Arguments to find a Historique
     * @example
     * // Get one Historique
     * const historique = await prisma.historique.findUniqueOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findUniqueOrThrow<T extends HistoriqueFindUniqueOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoriqueFindUniqueOrThrowArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findUniqueOrThrow'>, never, ExtArgs>

    /**
     * Find the first Historique that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueFindFirstArgs} args - Arguments to find a Historique
     * @example
     * // Get one Historique
     * const historique = await prisma.historique.findFirst({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirst<T extends HistoriqueFindFirstArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoriqueFindFirstArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findFirst'> | null, null, ExtArgs>

    /**
     * Find the first Historique that matches the filter or
     * throw `PrismaKnownClientError` with `P2025` code if no matches were found.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueFindFirstOrThrowArgs} args - Arguments to find a Historique
     * @example
     * // Get one Historique
     * const historique = await prisma.historique.findFirstOrThrow({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
    **/
    findFirstOrThrow<T extends HistoriqueFindFirstOrThrowArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoriqueFindFirstOrThrowArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findFirstOrThrow'>, never, ExtArgs>

    /**
     * Find zero or more Historiques that matches the filter.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueFindManyArgs=} args - Arguments to filter and select certain fields only.
     * @example
     * // Get all Historiques
     * const historiques = await prisma.historique.findMany()
     * 
     * // Get first 10 Historiques
     * const historiques = await prisma.historique.findMany({ take: 10 })
     * 
     * // Only select the `idHistorique`
     * const historiqueWithIdHistoriqueOnly = await prisma.historique.findMany({ select: { idHistorique: true } })
     * 
    **/
    findMany<T extends HistoriqueFindManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoriqueFindManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'findMany'>>

    /**
     * Create a Historique.
     * @param {HistoriqueCreateArgs} args - Arguments to create a Historique.
     * @example
     * // Create one Historique
     * const Historique = await prisma.historique.create({
     *   data: {
     *     // ... data to create a Historique
     *   }
     * })
     * 
    **/
    create<T extends HistoriqueCreateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoriqueCreateArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'create'>, never, ExtArgs>

    /**
     * Create many Historiques.
     *     @param {HistoriqueCreateManyArgs} args - Arguments to create many Historiques.
     *     @example
     *     // Create many Historiques
     *     const historique = await prisma.historique.createMany({
     *       data: {
     *         // ... provide data here
     *       }
     *     })
     *     
    **/
    createMany<T extends HistoriqueCreateManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoriqueCreateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Delete a Historique.
     * @param {HistoriqueDeleteArgs} args - Arguments to delete one Historique.
     * @example
     * // Delete one Historique
     * const Historique = await prisma.historique.delete({
     *   where: {
     *     // ... filter to delete one Historique
     *   }
     * })
     * 
    **/
    delete<T extends HistoriqueDeleteArgs<ExtArgs>>(
      args: SelectSubset<T, HistoriqueDeleteArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'delete'>, never, ExtArgs>

    /**
     * Update one Historique.
     * @param {HistoriqueUpdateArgs} args - Arguments to update one Historique.
     * @example
     * // Update one Historique
     * const historique = await prisma.historique.update({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    update<T extends HistoriqueUpdateArgs<ExtArgs>>(
      args: SelectSubset<T, HistoriqueUpdateArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'update'>, never, ExtArgs>

    /**
     * Delete zero or more Historiques.
     * @param {HistoriqueDeleteManyArgs} args - Arguments to filter Historiques to delete.
     * @example
     * // Delete a few Historiques
     * const { count } = await prisma.historique.deleteMany({
     *   where: {
     *     // ... provide filter here
     *   }
     * })
     * 
    **/
    deleteMany<T extends HistoriqueDeleteManyArgs<ExtArgs>>(
      args?: SelectSubset<T, HistoriqueDeleteManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Update zero or more Historiques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueUpdateManyArgs} args - Arguments to update one or more rows.
     * @example
     * // Update many Historiques
     * const historique = await prisma.historique.updateMany({
     *   where: {
     *     // ... provide filter here
     *   },
     *   data: {
     *     // ... provide data here
     *   }
     * })
     * 
    **/
    updateMany<T extends HistoriqueUpdateManyArgs<ExtArgs>>(
      args: SelectSubset<T, HistoriqueUpdateManyArgs<ExtArgs>>
    ): Prisma.PrismaPromise<BatchPayload>

    /**
     * Create or update one Historique.
     * @param {HistoriqueUpsertArgs} args - Arguments to update or create a Historique.
     * @example
     * // Update or create a Historique
     * const historique = await prisma.historique.upsert({
     *   create: {
     *     // ... data to create a Historique
     *   },
     *   update: {
     *     // ... in case it already exists, update
     *   },
     *   where: {
     *     // ... the filter for the Historique we want to update
     *   }
     * })
    **/
    upsert<T extends HistoriqueUpsertArgs<ExtArgs>>(
      args: SelectSubset<T, HistoriqueUpsertArgs<ExtArgs>>
    ): Prisma__HistoriqueClient<$Result.GetResult<Prisma.$HistoriquePayload<ExtArgs>, T, 'upsert'>, never, ExtArgs>

    /**
     * Count the number of Historiques.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueCountArgs} args - Arguments to filter Historiques to count.
     * @example
     * // Count the number of Historiques
     * const count = await prisma.historique.count({
     *   where: {
     *     // ... the filter for the Historiques we want to count
     *   }
     * })
    **/
    count<T extends HistoriqueCountArgs>(
      args?: Subset<T, HistoriqueCountArgs>,
    ): Prisma.PrismaPromise<
      T extends $Utils.Record<'select', any>
        ? T['select'] extends true
          ? number
          : GetScalarType<T['select'], HistoriqueCountAggregateOutputType>
        : number
    >

    /**
     * Allows you to perform aggregations operations on a Historique.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueAggregateArgs} args - Select which aggregations you would like to apply and on what fields.
     * @example
     * // Ordered by age ascending
     * // Where email contains prisma.io
     * // Limited to the 10 users
     * const aggregations = await prisma.user.aggregate({
     *   _avg: {
     *     age: true,
     *   },
     *   where: {
     *     email: {
     *       contains: "prisma.io",
     *     },
     *   },
     *   orderBy: {
     *     age: "asc",
     *   },
     *   take: 10,
     * })
    **/
    aggregate<T extends HistoriqueAggregateArgs>(args: Subset<T, HistoriqueAggregateArgs>): Prisma.PrismaPromise<GetHistoriqueAggregateType<T>>

    /**
     * Group by Historique.
     * Note, that providing `undefined` is treated as the value not being there.
     * Read more here: https://pris.ly/d/null-undefined
     * @param {HistoriqueGroupByArgs} args - Group by arguments.
     * @example
     * // Group by city, order by createdAt, get count
     * const result = await prisma.user.groupBy({
     *   by: ['city', 'createdAt'],
     *   orderBy: {
     *     createdAt: true
     *   },
     *   _count: {
     *     _all: true
     *   },
     * })
     * 
    **/
    groupBy<
      T extends HistoriqueGroupByArgs,
      HasSelectOrTake extends Or<
        Extends<'skip', Keys<T>>,
        Extends<'take', Keys<T>>
      >,
      OrderByArg extends True extends HasSelectOrTake
        ? { orderBy: HistoriqueGroupByArgs['orderBy'] }
        : { orderBy?: HistoriqueGroupByArgs['orderBy'] },
      OrderFields extends ExcludeUnderscoreKeys<Keys<MaybeTupleToUnion<T['orderBy']>>>,
      ByFields extends MaybeTupleToUnion<T['by']>,
      ByValid extends Has<ByFields, OrderFields>,
      HavingFields extends GetHavingFields<T['having']>,
      HavingValid extends Has<ByFields, HavingFields>,
      ByEmpty extends T['by'] extends never[] ? True : False,
      InputErrors extends ByEmpty extends True
      ? `Error: "by" must not be empty.`
      : HavingValid extends False
      ? {
          [P in HavingFields]: P extends ByFields
            ? never
            : P extends string
            ? `Error: Field "${P}" used in "having" needs to be provided in "by".`
            : [
                Error,
                'Field ',
                P,
                ` in "having" needs to be provided in "by"`,
              ]
        }[HavingFields]
      : 'take' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "take", you also need to provide "orderBy"'
      : 'skip' extends Keys<T>
      ? 'orderBy' extends Keys<T>
        ? ByValid extends True
          ? {}
          : {
              [P in OrderFields]: P extends ByFields
                ? never
                : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
            }[OrderFields]
        : 'Error: If you provide "skip", you also need to provide "orderBy"'
      : ByValid extends True
      ? {}
      : {
          [P in OrderFields]: P extends ByFields
            ? never
            : `Error: Field "${P}" in "orderBy" needs to be provided in "by"`
        }[OrderFields]
    >(args: SubsetIntersection<T, HistoriqueGroupByArgs, OrderByArg> & InputErrors): {} extends InputErrors ? GetHistoriqueGroupByPayload<T> : Prisma.PrismaPromise<InputErrors>
  /**
   * Fields of the Historique model
   */
  readonly fields: HistoriqueFieldRefs;
  }

  /**
   * The delegate class that acts as a "Promise-like" for Historique.
   * Why is this prefixed with `Prisma__`?
   * Because we want to prevent naming conflicts as mentioned in
   * https://github.com/prisma/prisma-client-js/issues/707
   */
  export interface Prisma__HistoriqueClient<T, Null = never, ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> extends Prisma.PrismaPromise<T> {
    readonly [Symbol.toStringTag]: 'PrismaPromise';

    user<T extends UserDefaultArgs<ExtArgs> = {}>(args?: Subset<T, UserDefaultArgs<ExtArgs>>): Prisma__UserClient<$Result.GetResult<Prisma.$UserPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    film<T extends FilmDefaultArgs<ExtArgs> = {}>(args?: Subset<T, FilmDefaultArgs<ExtArgs>>): Prisma__FilmClient<$Result.GetResult<Prisma.$FilmPayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    serie<T extends SerieDefaultArgs<ExtArgs> = {}>(args?: Subset<T, SerieDefaultArgs<ExtArgs>>): Prisma__SerieClient<$Result.GetResult<Prisma.$SeriePayload<ExtArgs>, T, 'findUniqueOrThrow'> | Null, Null, ExtArgs>;

    /**
     * Attaches callbacks for the resolution and/or rejection of the Promise.
     * @param onfulfilled The callback to execute when the Promise is resolved.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of which ever callback is executed.
     */
    then<TResult1 = T, TResult2 = never>(onfulfilled?: ((value: T) => TResult1 | PromiseLike<TResult1>) | undefined | null, onrejected?: ((reason: any) => TResult2 | PromiseLike<TResult2>) | undefined | null): $Utils.JsPromise<TResult1 | TResult2>;
    /**
     * Attaches a callback for only the rejection of the Promise.
     * @param onrejected The callback to execute when the Promise is rejected.
     * @returns A Promise for the completion of the callback.
     */
    catch<TResult = never>(onrejected?: ((reason: any) => TResult | PromiseLike<TResult>) | undefined | null): $Utils.JsPromise<T | TResult>;
    /**
     * Attaches a callback that is invoked when the Promise is settled (fulfilled or rejected). The
     * resolved value cannot be modified from the callback.
     * @param onfinally The callback to execute when the Promise is settled (fulfilled or rejected).
     * @returns A Promise for the completion of the callback.
     */
    finally(onfinally?: (() => void) | undefined | null): $Utils.JsPromise<T>;
  }



  /**
   * Fields of the Historique model
   */ 
  interface HistoriqueFieldRefs {
    readonly idHistorique: FieldRef<"Historique", 'BigInt'>
    readonly userId: FieldRef<"Historique", 'Int'>
    readonly filmId: FieldRef<"Historique", 'Int'>
    readonly serieId: FieldRef<"Historique", 'Int'>
    readonly dateDeVisuaisation: FieldRef<"Historique", 'DateTime'>
  }
    

  // Custom InputTypes

  /**
   * Historique findUnique
   */
  export type HistoriqueFindUniqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * Filter, which Historique to fetch.
     */
    where: HistoriqueWhereUniqueInput
  }


  /**
   * Historique findUniqueOrThrow
   */
  export type HistoriqueFindUniqueOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * Filter, which Historique to fetch.
     */
    where: HistoriqueWhereUniqueInput
  }


  /**
   * Historique findFirst
   */
  export type HistoriqueFindFirstArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * Filter, which Historique to fetch.
     */
    where?: HistoriqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historiques to fetch.
     */
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historiques.
     */
    cursor?: HistoriqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historiques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historiques.
     */
    distinct?: HistoriqueScalarFieldEnum | HistoriqueScalarFieldEnum[]
  }


  /**
   * Historique findFirstOrThrow
   */
  export type HistoriqueFindFirstOrThrowArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * Filter, which Historique to fetch.
     */
    where?: HistoriqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historiques to fetch.
     */
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for searching for Historiques.
     */
    cursor?: HistoriqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historiques.
     */
    skip?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/distinct Distinct Docs}
     * 
     * Filter by unique combinations of Historiques.
     */
    distinct?: HistoriqueScalarFieldEnum | HistoriqueScalarFieldEnum[]
  }


  /**
   * Historique findMany
   */
  export type HistoriqueFindManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * Filter, which Historiques to fetch.
     */
    where?: HistoriqueWhereInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/sorting Sorting Docs}
     * 
     * Determine the order of Historiques to fetch.
     */
    orderBy?: HistoriqueOrderByWithRelationInput | HistoriqueOrderByWithRelationInput[]
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination#cursor-based-pagination Cursor Docs}
     * 
     * Sets the position for listing Historiques.
     */
    cursor?: HistoriqueWhereUniqueInput
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Take `±n` Historiques from the position of the cursor.
     */
    take?: number
    /**
     * {@link https://www.prisma.io/docs/concepts/components/prisma-client/pagination Pagination Docs}
     * 
     * Skip the first `n` Historiques.
     */
    skip?: number
    distinct?: HistoriqueScalarFieldEnum | HistoriqueScalarFieldEnum[]
  }


  /**
   * Historique create
   */
  export type HistoriqueCreateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * The data needed to create a Historique.
     */
    data: XOR<HistoriqueCreateInput, HistoriqueUncheckedCreateInput>
  }


  /**
   * Historique createMany
   */
  export type HistoriqueCreateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to create many Historiques.
     */
    data: HistoriqueCreateManyInput | HistoriqueCreateManyInput[]
    skipDuplicates?: boolean
  }


  /**
   * Historique update
   */
  export type HistoriqueUpdateArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * The data needed to update a Historique.
     */
    data: XOR<HistoriqueUpdateInput, HistoriqueUncheckedUpdateInput>
    /**
     * Choose, which Historique to update.
     */
    where: HistoriqueWhereUniqueInput
  }


  /**
   * Historique updateMany
   */
  export type HistoriqueUpdateManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * The data used to update Historiques.
     */
    data: XOR<HistoriqueUpdateManyMutationInput, HistoriqueUncheckedUpdateManyInput>
    /**
     * Filter which Historiques to update
     */
    where?: HistoriqueWhereInput
  }


  /**
   * Historique upsert
   */
  export type HistoriqueUpsertArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * The filter to search for the Historique to update in case it exists.
     */
    where: HistoriqueWhereUniqueInput
    /**
     * In case the Historique found by the `where` argument doesn't exist, create a new Historique with this data.
     */
    create: XOR<HistoriqueCreateInput, HistoriqueUncheckedCreateInput>
    /**
     * In case the Historique was found with the provided `where` argument, update it with this data.
     */
    update: XOR<HistoriqueUpdateInput, HistoriqueUncheckedUpdateInput>
  }


  /**
   * Historique delete
   */
  export type HistoriqueDeleteArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
    /**
     * Filter which Historique to delete.
     */
    where: HistoriqueWhereUniqueInput
  }


  /**
   * Historique deleteMany
   */
  export type HistoriqueDeleteManyArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Filter which Historiques to delete
     */
    where?: HistoriqueWhereInput
  }


  /**
   * Historique without action
   */
  export type HistoriqueDefaultArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = {
    /**
     * Select specific fields to fetch from the Historique
     */
    select?: HistoriqueSelect<ExtArgs> | null
    /**
     * Choose, which related nodes to fetch as well.
     */
    include?: HistoriqueInclude<ExtArgs> | null
  }



  /**
   * Enums
   */

  export const TransactionIsolationLevel: {
    ReadUncommitted: 'ReadUncommitted',
    ReadCommitted: 'ReadCommitted',
    RepeatableRead: 'RepeatableRead',
    Serializable: 'Serializable'
  };

  export type TransactionIsolationLevel = (typeof TransactionIsolationLevel)[keyof typeof TransactionIsolationLevel]


  export const UserScalarFieldEnum: {
    idUser: 'idUser',
    name: 'name',
    postname: 'postname',
    email: 'email',
    password: 'password',
    dateDeNaissance: 'dateDeNaissance',
    sexe: 'sexe',
    pays: 'pays'
  };

  export type UserScalarFieldEnum = (typeof UserScalarFieldEnum)[keyof typeof UserScalarFieldEnum]


  export const FilmScalarFieldEnum: {
    idFilm: 'idFilm',
    titre: 'titre',
    realisateur: 'realisateur',
    anneeDeSortie: 'anneeDeSortie',
    description: 'description',
    acteur: 'acteur',
    dureeMoyenneParEpisode: 'dureeMoyenneParEpisode',
    urlDeStreaming: 'urlDeStreaming',
    urlDeTelechargement: 'urlDeTelechargement',
    userId: 'userId'
  };

  export type FilmScalarFieldEnum = (typeof FilmScalarFieldEnum)[keyof typeof FilmScalarFieldEnum]


  export const SerieScalarFieldEnum: {
    idSerie: 'idSerie',
    titre: 'titre',
    realisateur: 'realisateur',
    anneeDeSortie: 'anneeDeSortie',
    description: 'description',
    acteur: 'acteur',
    dureeMoyenneParEpisode: 'dureeMoyenneParEpisode',
    urlDeStreaming: 'urlDeStreaming',
    urlDeTelechargement: 'urlDeTelechargement',
    userId: 'userId'
  };

  export type SerieScalarFieldEnum = (typeof SerieScalarFieldEnum)[keyof typeof SerieScalarFieldEnum]


  export const TelechargementScalarFieldEnum: {
    id: 'id',
    date: 'date',
    filmId: 'filmId',
    serieId: 'serieId',
    qualiteVideo: 'qualiteVideo',
    userIdUser: 'userIdUser'
  };

  export type TelechargementScalarFieldEnum = (typeof TelechargementScalarFieldEnum)[keyof typeof TelechargementScalarFieldEnum]


  export const AvisScalarFieldEnum: {
    idAvis: 'idAvis',
    userId: 'userId',
    filmId: 'filmId',
    serieId: 'serieId',
    comment: 'comment'
  };

  export type AvisScalarFieldEnum = (typeof AvisScalarFieldEnum)[keyof typeof AvisScalarFieldEnum]


  export const FavorisScalarFieldEnum: {
    idFavoris: 'idFavoris',
    userId: 'userId',
    filmId: 'filmId',
    serieId: 'serieId'
  };

  export type FavorisScalarFieldEnum = (typeof FavorisScalarFieldEnum)[keyof typeof FavorisScalarFieldEnum]


  export const HistoriqueScalarFieldEnum: {
    idHistorique: 'idHistorique',
    userId: 'userId',
    filmId: 'filmId',
    serieId: 'serieId',
    dateDeVisuaisation: 'dateDeVisuaisation'
  };

  export type HistoriqueScalarFieldEnum = (typeof HistoriqueScalarFieldEnum)[keyof typeof HistoriqueScalarFieldEnum]


  export const SortOrder: {
    asc: 'asc',
    desc: 'desc'
  };

  export type SortOrder = (typeof SortOrder)[keyof typeof SortOrder]


  export const QueryMode: {
    default: 'default',
    insensitive: 'insensitive'
  };

  export type QueryMode = (typeof QueryMode)[keyof typeof QueryMode]


  export const NullsOrder: {
    first: 'first',
    last: 'last'
  };

  export type NullsOrder = (typeof NullsOrder)[keyof typeof NullsOrder]


  /**
   * Field references 
   */


  /**
   * Reference to a field of type 'Int'
   */
  export type IntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int'>
    


  /**
   * Reference to a field of type 'Int[]'
   */
  export type ListIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Int[]'>
    


  /**
   * Reference to a field of type 'String'
   */
  export type StringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String'>
    


  /**
   * Reference to a field of type 'String[]'
   */
  export type ListStringFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'String[]'>
    


  /**
   * Reference to a field of type 'DateTime'
   */
  export type DateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime'>
    


  /**
   * Reference to a field of type 'DateTime[]'
   */
  export type ListDateTimeFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'DateTime[]'>
    


  /**
   * Reference to a field of type 'Float'
   */
  export type FloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float'>
    


  /**
   * Reference to a field of type 'Float[]'
   */
  export type ListFloatFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'Float[]'>
    


  /**
   * Reference to a field of type 'BigInt'
   */
  export type BigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt'>
    


  /**
   * Reference to a field of type 'BigInt[]'
   */
  export type ListBigIntFieldRefInput<$PrismaModel> = FieldRefInputType<$PrismaModel, 'BigInt[]'>
    
  /**
   * Deep Input Types
   */


  export type UserWhereInput = {
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    idUser?: IntFilter<"User"> | number
    name?: StringFilter<"User"> | string
    postname?: StringFilter<"User"> | string
    email?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    dateDeNaissance?: DateTimeFilter<"User"> | Date | string
    sexe?: StringFilter<"User"> | string
    pays?: StringFilter<"User"> | string
    avis?: AvisListRelationFilter
    film?: FilmListRelationFilter
    serie?: SerieListRelationFilter
    telechargement?: TelechargementListRelationFilter
    favoris?: FavorisListRelationFilter
    historique?: HistoriqueListRelationFilter
  }

  export type UserOrderByWithRelationInput = {
    idUser?: SortOrder
    name?: SortOrder
    postname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateDeNaissance?: SortOrder
    sexe?: SortOrder
    pays?: SortOrder
    avis?: AvisOrderByRelationAggregateInput
    film?: FilmOrderByRelationAggregateInput
    serie?: SerieOrderByRelationAggregateInput
    telechargement?: TelechargementOrderByRelationAggregateInput
    favoris?: FavorisOrderByRelationAggregateInput
    historique?: HistoriqueOrderByRelationAggregateInput
  }

  export type UserWhereUniqueInput = Prisma.AtLeast<{
    idUser?: number
    email?: string
    AND?: UserWhereInput | UserWhereInput[]
    OR?: UserWhereInput[]
    NOT?: UserWhereInput | UserWhereInput[]
    name?: StringFilter<"User"> | string
    postname?: StringFilter<"User"> | string
    password?: StringFilter<"User"> | string
    dateDeNaissance?: DateTimeFilter<"User"> | Date | string
    sexe?: StringFilter<"User"> | string
    pays?: StringFilter<"User"> | string
    avis?: AvisListRelationFilter
    film?: FilmListRelationFilter
    serie?: SerieListRelationFilter
    telechargement?: TelechargementListRelationFilter
    favoris?: FavorisListRelationFilter
    historique?: HistoriqueListRelationFilter
  }, "idUser" | "email">

  export type UserOrderByWithAggregationInput = {
    idUser?: SortOrder
    name?: SortOrder
    postname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateDeNaissance?: SortOrder
    sexe?: SortOrder
    pays?: SortOrder
    _count?: UserCountOrderByAggregateInput
    _avg?: UserAvgOrderByAggregateInput
    _max?: UserMaxOrderByAggregateInput
    _min?: UserMinOrderByAggregateInput
    _sum?: UserSumOrderByAggregateInput
  }

  export type UserScalarWhereWithAggregatesInput = {
    AND?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    OR?: UserScalarWhereWithAggregatesInput[]
    NOT?: UserScalarWhereWithAggregatesInput | UserScalarWhereWithAggregatesInput[]
    idUser?: IntWithAggregatesFilter<"User"> | number
    name?: StringWithAggregatesFilter<"User"> | string
    postname?: StringWithAggregatesFilter<"User"> | string
    email?: StringWithAggregatesFilter<"User"> | string
    password?: StringWithAggregatesFilter<"User"> | string
    dateDeNaissance?: DateTimeWithAggregatesFilter<"User"> | Date | string
    sexe?: StringWithAggregatesFilter<"User"> | string
    pays?: StringWithAggregatesFilter<"User"> | string
  }

  export type FilmWhereInput = {
    AND?: FilmWhereInput | FilmWhereInput[]
    OR?: FilmWhereInput[]
    NOT?: FilmWhereInput | FilmWhereInput[]
    idFilm?: IntFilter<"Film"> | number
    titre?: StringFilter<"Film"> | string
    realisateur?: StringFilter<"Film"> | string
    anneeDeSortie?: IntFilter<"Film"> | number
    description?: StringFilter<"Film"> | string
    acteur?: StringFilter<"Film"> | string
    dureeMoyenneParEpisode?: FloatFilter<"Film"> | number
    urlDeStreaming?: StringFilter<"Film"> | string
    urlDeTelechargement?: StringFilter<"Film"> | string
    userId?: IntFilter<"Film"> | number
    telechargement?: TelechargementListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    Avis?: AvisListRelationFilter
    Favoris?: FavorisListRelationFilter
    Historique?: HistoriqueListRelationFilter
  }

  export type FilmOrderByWithRelationInput = {
    idFilm?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
    telechargement?: TelechargementOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    Avis?: AvisOrderByRelationAggregateInput
    Favoris?: FavorisOrderByRelationAggregateInput
    Historique?: HistoriqueOrderByRelationAggregateInput
  }

  export type FilmWhereUniqueInput = Prisma.AtLeast<{
    idFilm?: number
    AND?: FilmWhereInput | FilmWhereInput[]
    OR?: FilmWhereInput[]
    NOT?: FilmWhereInput | FilmWhereInput[]
    titre?: StringFilter<"Film"> | string
    realisateur?: StringFilter<"Film"> | string
    anneeDeSortie?: IntFilter<"Film"> | number
    description?: StringFilter<"Film"> | string
    acteur?: StringFilter<"Film"> | string
    dureeMoyenneParEpisode?: FloatFilter<"Film"> | number
    urlDeStreaming?: StringFilter<"Film"> | string
    urlDeTelechargement?: StringFilter<"Film"> | string
    userId?: IntFilter<"Film"> | number
    telechargement?: TelechargementListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    Avis?: AvisListRelationFilter
    Favoris?: FavorisListRelationFilter
    Historique?: HistoriqueListRelationFilter
  }, "idFilm">

  export type FilmOrderByWithAggregationInput = {
    idFilm?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
    _count?: FilmCountOrderByAggregateInput
    _avg?: FilmAvgOrderByAggregateInput
    _max?: FilmMaxOrderByAggregateInput
    _min?: FilmMinOrderByAggregateInput
    _sum?: FilmSumOrderByAggregateInput
  }

  export type FilmScalarWhereWithAggregatesInput = {
    AND?: FilmScalarWhereWithAggregatesInput | FilmScalarWhereWithAggregatesInput[]
    OR?: FilmScalarWhereWithAggregatesInput[]
    NOT?: FilmScalarWhereWithAggregatesInput | FilmScalarWhereWithAggregatesInput[]
    idFilm?: IntWithAggregatesFilter<"Film"> | number
    titre?: StringWithAggregatesFilter<"Film"> | string
    realisateur?: StringWithAggregatesFilter<"Film"> | string
    anneeDeSortie?: IntWithAggregatesFilter<"Film"> | number
    description?: StringWithAggregatesFilter<"Film"> | string
    acteur?: StringWithAggregatesFilter<"Film"> | string
    dureeMoyenneParEpisode?: FloatWithAggregatesFilter<"Film"> | number
    urlDeStreaming?: StringWithAggregatesFilter<"Film"> | string
    urlDeTelechargement?: StringWithAggregatesFilter<"Film"> | string
    userId?: IntWithAggregatesFilter<"Film"> | number
  }

  export type SerieWhereInput = {
    AND?: SerieWhereInput | SerieWhereInput[]
    OR?: SerieWhereInput[]
    NOT?: SerieWhereInput | SerieWhereInput[]
    idSerie?: IntFilter<"Serie"> | number
    titre?: StringFilter<"Serie"> | string
    realisateur?: StringFilter<"Serie"> | string
    anneeDeSortie?: IntFilter<"Serie"> | number
    description?: StringFilter<"Serie"> | string
    acteur?: StringFilter<"Serie"> | string
    dureeMoyenneParEpisode?: FloatFilter<"Serie"> | number
    urlDeStreaming?: StringFilter<"Serie"> | string
    urlDeTelechargement?: StringFilter<"Serie"> | string
    userId?: IntFilter<"Serie"> | number
    telechargement?: TelechargementListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    Avis?: AvisListRelationFilter
    Favoris?: FavorisListRelationFilter
    Historique?: HistoriqueListRelationFilter
  }

  export type SerieOrderByWithRelationInput = {
    idSerie?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
    telechargement?: TelechargementOrderByRelationAggregateInput
    user?: UserOrderByWithRelationInput
    Avis?: AvisOrderByRelationAggregateInput
    Favoris?: FavorisOrderByRelationAggregateInput
    Historique?: HistoriqueOrderByRelationAggregateInput
  }

  export type SerieWhereUniqueInput = Prisma.AtLeast<{
    idSerie?: number
    AND?: SerieWhereInput | SerieWhereInput[]
    OR?: SerieWhereInput[]
    NOT?: SerieWhereInput | SerieWhereInput[]
    titre?: StringFilter<"Serie"> | string
    realisateur?: StringFilter<"Serie"> | string
    anneeDeSortie?: IntFilter<"Serie"> | number
    description?: StringFilter<"Serie"> | string
    acteur?: StringFilter<"Serie"> | string
    dureeMoyenneParEpisode?: FloatFilter<"Serie"> | number
    urlDeStreaming?: StringFilter<"Serie"> | string
    urlDeTelechargement?: StringFilter<"Serie"> | string
    userId?: IntFilter<"Serie"> | number
    telechargement?: TelechargementListRelationFilter
    user?: XOR<UserRelationFilter, UserWhereInput>
    Avis?: AvisListRelationFilter
    Favoris?: FavorisListRelationFilter
    Historique?: HistoriqueListRelationFilter
  }, "idSerie">

  export type SerieOrderByWithAggregationInput = {
    idSerie?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
    _count?: SerieCountOrderByAggregateInput
    _avg?: SerieAvgOrderByAggregateInput
    _max?: SerieMaxOrderByAggregateInput
    _min?: SerieMinOrderByAggregateInput
    _sum?: SerieSumOrderByAggregateInput
  }

  export type SerieScalarWhereWithAggregatesInput = {
    AND?: SerieScalarWhereWithAggregatesInput | SerieScalarWhereWithAggregatesInput[]
    OR?: SerieScalarWhereWithAggregatesInput[]
    NOT?: SerieScalarWhereWithAggregatesInput | SerieScalarWhereWithAggregatesInput[]
    idSerie?: IntWithAggregatesFilter<"Serie"> | number
    titre?: StringWithAggregatesFilter<"Serie"> | string
    realisateur?: StringWithAggregatesFilter<"Serie"> | string
    anneeDeSortie?: IntWithAggregatesFilter<"Serie"> | number
    description?: StringWithAggregatesFilter<"Serie"> | string
    acteur?: StringWithAggregatesFilter<"Serie"> | string
    dureeMoyenneParEpisode?: FloatWithAggregatesFilter<"Serie"> | number
    urlDeStreaming?: StringWithAggregatesFilter<"Serie"> | string
    urlDeTelechargement?: StringWithAggregatesFilter<"Serie"> | string
    userId?: IntWithAggregatesFilter<"Serie"> | number
  }

  export type TelechargementWhereInput = {
    AND?: TelechargementWhereInput | TelechargementWhereInput[]
    OR?: TelechargementWhereInput[]
    NOT?: TelechargementWhereInput | TelechargementWhereInput[]
    id?: IntFilter<"Telechargement"> | number
    date?: DateTimeFilter<"Telechargement"> | Date | string
    filmId?: IntFilter<"Telechargement"> | number
    serieId?: IntFilter<"Telechargement"> | number
    qualiteVideo?: StringFilter<"Telechargement"> | string
    userIdUser?: IntNullableFilter<"Telechargement"> | number | null
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }

  export type TelechargementOrderByWithRelationInput = {
    id?: SortOrder
    date?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    qualiteVideo?: SortOrder
    userIdUser?: SortOrderInput | SortOrder
    film?: FilmOrderByWithRelationInput
    serie?: SerieOrderByWithRelationInput
    User?: UserOrderByWithRelationInput
  }

  export type TelechargementWhereUniqueInput = Prisma.AtLeast<{
    id?: number
    AND?: TelechargementWhereInput | TelechargementWhereInput[]
    OR?: TelechargementWhereInput[]
    NOT?: TelechargementWhereInput | TelechargementWhereInput[]
    date?: DateTimeFilter<"Telechargement"> | Date | string
    filmId?: IntFilter<"Telechargement"> | number
    serieId?: IntFilter<"Telechargement"> | number
    qualiteVideo?: StringFilter<"Telechargement"> | string
    userIdUser?: IntNullableFilter<"Telechargement"> | number | null
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
    User?: XOR<UserNullableRelationFilter, UserWhereInput> | null
  }, "id">

  export type TelechargementOrderByWithAggregationInput = {
    id?: SortOrder
    date?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    qualiteVideo?: SortOrder
    userIdUser?: SortOrderInput | SortOrder
    _count?: TelechargementCountOrderByAggregateInput
    _avg?: TelechargementAvgOrderByAggregateInput
    _max?: TelechargementMaxOrderByAggregateInput
    _min?: TelechargementMinOrderByAggregateInput
    _sum?: TelechargementSumOrderByAggregateInput
  }

  export type TelechargementScalarWhereWithAggregatesInput = {
    AND?: TelechargementScalarWhereWithAggregatesInput | TelechargementScalarWhereWithAggregatesInput[]
    OR?: TelechargementScalarWhereWithAggregatesInput[]
    NOT?: TelechargementScalarWhereWithAggregatesInput | TelechargementScalarWhereWithAggregatesInput[]
    id?: IntWithAggregatesFilter<"Telechargement"> | number
    date?: DateTimeWithAggregatesFilter<"Telechargement"> | Date | string
    filmId?: IntWithAggregatesFilter<"Telechargement"> | number
    serieId?: IntWithAggregatesFilter<"Telechargement"> | number
    qualiteVideo?: StringWithAggregatesFilter<"Telechargement"> | string
    userIdUser?: IntNullableWithAggregatesFilter<"Telechargement"> | number | null
  }

  export type AvisWhereInput = {
    AND?: AvisWhereInput | AvisWhereInput[]
    OR?: AvisWhereInput[]
    NOT?: AvisWhereInput | AvisWhereInput[]
    idAvis?: IntFilter<"Avis"> | number
    userId?: IntFilter<"Avis"> | number
    filmId?: IntFilter<"Avis"> | number
    serieId?: IntFilter<"Avis"> | number
    comment?: StringNullableFilter<"Avis"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
  }

  export type AvisOrderByWithRelationInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    comment?: SortOrderInput | SortOrder
    user?: UserOrderByWithRelationInput
    film?: FilmOrderByWithRelationInput
    serie?: SerieOrderByWithRelationInput
  }

  export type AvisWhereUniqueInput = Prisma.AtLeast<{
    idAvis?: number
    AND?: AvisWhereInput | AvisWhereInput[]
    OR?: AvisWhereInput[]
    NOT?: AvisWhereInput | AvisWhereInput[]
    userId?: IntFilter<"Avis"> | number
    filmId?: IntFilter<"Avis"> | number
    serieId?: IntFilter<"Avis"> | number
    comment?: StringNullableFilter<"Avis"> | string | null
    user?: XOR<UserRelationFilter, UserWhereInput>
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
  }, "idAvis">

  export type AvisOrderByWithAggregationInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    comment?: SortOrderInput | SortOrder
    _count?: AvisCountOrderByAggregateInput
    _avg?: AvisAvgOrderByAggregateInput
    _max?: AvisMaxOrderByAggregateInput
    _min?: AvisMinOrderByAggregateInput
    _sum?: AvisSumOrderByAggregateInput
  }

  export type AvisScalarWhereWithAggregatesInput = {
    AND?: AvisScalarWhereWithAggregatesInput | AvisScalarWhereWithAggregatesInput[]
    OR?: AvisScalarWhereWithAggregatesInput[]
    NOT?: AvisScalarWhereWithAggregatesInput | AvisScalarWhereWithAggregatesInput[]
    idAvis?: IntWithAggregatesFilter<"Avis"> | number
    userId?: IntWithAggregatesFilter<"Avis"> | number
    filmId?: IntWithAggregatesFilter<"Avis"> | number
    serieId?: IntWithAggregatesFilter<"Avis"> | number
    comment?: StringNullableWithAggregatesFilter<"Avis"> | string | null
  }

  export type FavorisWhereInput = {
    AND?: FavorisWhereInput | FavorisWhereInput[]
    OR?: FavorisWhereInput[]
    NOT?: FavorisWhereInput | FavorisWhereInput[]
    idFavoris?: BigIntFilter<"Favoris"> | bigint | number
    userId?: IntFilter<"Favoris"> | number
    filmId?: IntFilter<"Favoris"> | number
    serieId?: IntFilter<"Favoris"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
  }

  export type FavorisOrderByWithRelationInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    user?: UserOrderByWithRelationInput
    film?: FilmOrderByWithRelationInput
    serie?: SerieOrderByWithRelationInput
  }

  export type FavorisWhereUniqueInput = Prisma.AtLeast<{
    idFavoris?: bigint | number
    AND?: FavorisWhereInput | FavorisWhereInput[]
    OR?: FavorisWhereInput[]
    NOT?: FavorisWhereInput | FavorisWhereInput[]
    userId?: IntFilter<"Favoris"> | number
    filmId?: IntFilter<"Favoris"> | number
    serieId?: IntFilter<"Favoris"> | number
    user?: XOR<UserRelationFilter, UserWhereInput>
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
  }, "idFavoris">

  export type FavorisOrderByWithAggregationInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    _count?: FavorisCountOrderByAggregateInput
    _avg?: FavorisAvgOrderByAggregateInput
    _max?: FavorisMaxOrderByAggregateInput
    _min?: FavorisMinOrderByAggregateInput
    _sum?: FavorisSumOrderByAggregateInput
  }

  export type FavorisScalarWhereWithAggregatesInput = {
    AND?: FavorisScalarWhereWithAggregatesInput | FavorisScalarWhereWithAggregatesInput[]
    OR?: FavorisScalarWhereWithAggregatesInput[]
    NOT?: FavorisScalarWhereWithAggregatesInput | FavorisScalarWhereWithAggregatesInput[]
    idFavoris?: BigIntWithAggregatesFilter<"Favoris"> | bigint | number
    userId?: IntWithAggregatesFilter<"Favoris"> | number
    filmId?: IntWithAggregatesFilter<"Favoris"> | number
    serieId?: IntWithAggregatesFilter<"Favoris"> | number
  }

  export type HistoriqueWhereInput = {
    AND?: HistoriqueWhereInput | HistoriqueWhereInput[]
    OR?: HistoriqueWhereInput[]
    NOT?: HistoriqueWhereInput | HistoriqueWhereInput[]
    idHistorique?: BigIntFilter<"Historique"> | bigint | number
    userId?: IntFilter<"Historique"> | number
    filmId?: IntFilter<"Historique"> | number
    serieId?: IntFilter<"Historique"> | number
    dateDeVisuaisation?: DateTimeFilter<"Historique"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
  }

  export type HistoriqueOrderByWithRelationInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    dateDeVisuaisation?: SortOrder
    user?: UserOrderByWithRelationInput
    film?: FilmOrderByWithRelationInput
    serie?: SerieOrderByWithRelationInput
  }

  export type HistoriqueWhereUniqueInput = Prisma.AtLeast<{
    idHistorique?: bigint | number
    AND?: HistoriqueWhereInput | HistoriqueWhereInput[]
    OR?: HistoriqueWhereInput[]
    NOT?: HistoriqueWhereInput | HistoriqueWhereInput[]
    userId?: IntFilter<"Historique"> | number
    filmId?: IntFilter<"Historique"> | number
    serieId?: IntFilter<"Historique"> | number
    dateDeVisuaisation?: DateTimeFilter<"Historique"> | Date | string
    user?: XOR<UserRelationFilter, UserWhereInput>
    film?: XOR<FilmRelationFilter, FilmWhereInput>
    serie?: XOR<SerieRelationFilter, SerieWhereInput>
  }, "idHistorique">

  export type HistoriqueOrderByWithAggregationInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    dateDeVisuaisation?: SortOrder
    _count?: HistoriqueCountOrderByAggregateInput
    _avg?: HistoriqueAvgOrderByAggregateInput
    _max?: HistoriqueMaxOrderByAggregateInput
    _min?: HistoriqueMinOrderByAggregateInput
    _sum?: HistoriqueSumOrderByAggregateInput
  }

  export type HistoriqueScalarWhereWithAggregatesInput = {
    AND?: HistoriqueScalarWhereWithAggregatesInput | HistoriqueScalarWhereWithAggregatesInput[]
    OR?: HistoriqueScalarWhereWithAggregatesInput[]
    NOT?: HistoriqueScalarWhereWithAggregatesInput | HistoriqueScalarWhereWithAggregatesInput[]
    idHistorique?: BigIntWithAggregatesFilter<"Historique"> | bigint | number
    userId?: IntWithAggregatesFilter<"Historique"> | number
    filmId?: IntWithAggregatesFilter<"Historique"> | number
    serieId?: IntWithAggregatesFilter<"Historique"> | number
    dateDeVisuaisation?: DateTimeWithAggregatesFilter<"Historique"> | Date | string
  }

  export type UserCreateInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisCreateNestedManyWithoutUserInput
    film?: FilmCreateNestedManyWithoutUserInput
    serie?: SerieCreateNestedManyWithoutUserInput
    telechargement?: TelechargementCreateNestedManyWithoutUserInput
    favoris?: FavorisCreateNestedManyWithoutUserInput
    historique?: HistoriqueCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisUncheckedCreateNestedManyWithoutUserInput
    film?: FilmUncheckedCreateNestedManyWithoutUserInput
    serie?: SerieUncheckedCreateNestedManyWithoutUserInput
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutUserInput
    favoris?: FavorisUncheckedCreateNestedManyWithoutUserInput
    historique?: HistoriqueUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserUpdateInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUpdateManyWithoutUserNestedInput
    film?: FilmUpdateManyWithoutUserNestedInput
    serie?: SerieUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUpdateManyWithoutUserNestedInput
    favoris?: FavorisUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUncheckedUpdateManyWithoutUserNestedInput
    film?: FilmUncheckedUpdateManyWithoutUserNestedInput
    serie?: SerieUncheckedUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUncheckedUpdateManyWithoutUserNestedInput
    favoris?: FavorisUncheckedUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateManyInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
  }

  export type UserUpdateManyMutationInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
  }

  export type UserUncheckedUpdateManyInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
  }

  export type FilmCreateInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutFilmInput
    user: UserCreateNestedOneWithoutFilmInput
    Avis?: AvisCreateNestedManyWithoutFilmInput
    Favoris?: FavorisCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueCreateNestedManyWithoutFilmInput
  }

  export type FilmUncheckedCreateInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutFilmInput
    Avis?: AvisUncheckedCreateNestedManyWithoutFilmInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutFilmInput
  }

  export type FilmUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutFilmNestedInput
    user?: UserUpdateOneRequiredWithoutFilmNestedInput
    Avis?: AvisUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutFilmNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type FilmCreateManyInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
  }

  export type FilmUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
  }

  export type FilmUncheckedUpdateManyInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type SerieCreateInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutSerieInput
    user: UserCreateNestedOneWithoutSerieInput
    Avis?: AvisCreateNestedManyWithoutSerieInput
    Favoris?: FavorisCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueCreateNestedManyWithoutSerieInput
  }

  export type SerieUncheckedCreateInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutSerieInput
    Avis?: AvisUncheckedCreateNestedManyWithoutSerieInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutSerieInput
  }

  export type SerieUpdateInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutSerieNestedInput
    user?: UserUpdateOneRequiredWithoutSerieNestedInput
    Avis?: AvisUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutSerieNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutSerieNestedInput
  }

  export type SerieCreateManyInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
  }

  export type SerieUpdateManyMutationInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
  }

  export type SerieUncheckedUpdateManyInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
  }

  export type TelechargementCreateInput = {
    date: Date | string
    qualiteVideo: string
    film: FilmCreateNestedOneWithoutTelechargementInput
    serie: SerieCreateNestedOneWithoutTelechargementInput
    User?: UserCreateNestedOneWithoutTelechargementInput
  }

  export type TelechargementUncheckedCreateInput = {
    id?: number
    date: Date | string
    filmId: number
    serieId: number
    qualiteVideo: string
    userIdUser?: number | null
  }

  export type TelechargementUpdateInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    film?: FilmUpdateOneRequiredWithoutTelechargementNestedInput
    serie?: SerieUpdateOneRequiredWithoutTelechargementNestedInput
    User?: UserUpdateOneWithoutTelechargementNestedInput
  }

  export type TelechargementUncheckedUpdateInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    userIdUser?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TelechargementCreateManyInput = {
    id?: number
    date: Date | string
    filmId: number
    serieId: number
    qualiteVideo: string
    userIdUser?: number | null
  }

  export type TelechargementUpdateManyMutationInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    qualiteVideo?: StringFieldUpdateOperationsInput | string
  }

  export type TelechargementUncheckedUpdateManyInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    userIdUser?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvisCreateInput = {
    comment?: string | null
    user: UserCreateNestedOneWithoutAvisInput
    film: FilmCreateNestedOneWithoutAvisInput
    serie: SerieCreateNestedOneWithoutAvisInput
  }

  export type AvisUncheckedCreateInput = {
    idAvis?: number
    userId: number
    filmId: number
    serieId: number
    comment?: string | null
  }

  export type AvisUpdateInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAvisNestedInput
    film?: FilmUpdateOneRequiredWithoutAvisNestedInput
    serie?: SerieUpdateOneRequiredWithoutAvisNestedInput
  }

  export type AvisUncheckedUpdateInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvisCreateManyInput = {
    idAvis?: number
    userId: number
    filmId: number
    serieId: number
    comment?: string | null
  }

  export type AvisUpdateManyMutationInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvisUncheckedUpdateManyInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FavorisCreateInput = {
    idFavoris?: bigint | number
    user: UserCreateNestedOneWithoutFavorisInput
    film: FilmCreateNestedOneWithoutFavorisInput
    serie: SerieCreateNestedOneWithoutFavorisInput
  }

  export type FavorisUncheckedCreateInput = {
    idFavoris?: bigint | number
    userId: number
    filmId: number
    serieId: number
  }

  export type FavorisUpdateInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutFavorisNestedInput
    film?: FilmUpdateOneRequiredWithoutFavorisNestedInput
    serie?: SerieUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type FavorisUncheckedUpdateInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
  }

  export type FavorisCreateManyInput = {
    idFavoris?: bigint | number
    userId: number
    filmId: number
    serieId: number
  }

  export type FavorisUpdateManyMutationInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
  }

  export type FavorisUncheckedUpdateManyInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoriqueCreateInput = {
    idHistorique?: bigint | number
    dateDeVisuaisation: Date | string
    user: UserCreateNestedOneWithoutHistoriqueInput
    film: FilmCreateNestedOneWithoutHistoriqueInput
    serie: SerieCreateNestedOneWithoutHistoriqueInput
  }

  export type HistoriqueUncheckedCreateInput = {
    idHistorique?: bigint | number
    userId: number
    filmId: number
    serieId: number
    dateDeVisuaisation: Date | string
  }

  export type HistoriqueUpdateInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoriqueNestedInput
    film?: FilmUpdateOneRequiredWithoutHistoriqueNestedInput
    serie?: SerieUpdateOneRequiredWithoutHistoriqueNestedInput
  }

  export type HistoriqueUncheckedUpdateInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoriqueCreateManyInput = {
    idHistorique?: bigint | number
    userId: number
    filmId: number
    serieId: number
    dateDeVisuaisation: Date | string
  }

  export type HistoriqueUpdateManyMutationInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoriqueUncheckedUpdateManyInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type IntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type StringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type DateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type AvisListRelationFilter = {
    every?: AvisWhereInput
    some?: AvisWhereInput
    none?: AvisWhereInput
  }

  export type FilmListRelationFilter = {
    every?: FilmWhereInput
    some?: FilmWhereInput
    none?: FilmWhereInput
  }

  export type SerieListRelationFilter = {
    every?: SerieWhereInput
    some?: SerieWhereInput
    none?: SerieWhereInput
  }

  export type TelechargementListRelationFilter = {
    every?: TelechargementWhereInput
    some?: TelechargementWhereInput
    none?: TelechargementWhereInput
  }

  export type FavorisListRelationFilter = {
    every?: FavorisWhereInput
    some?: FavorisWhereInput
    none?: FavorisWhereInput
  }

  export type HistoriqueListRelationFilter = {
    every?: HistoriqueWhereInput
    some?: HistoriqueWhereInput
    none?: HistoriqueWhereInput
  }

  export type AvisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FilmOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type SerieOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type TelechargementOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type FavorisOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type HistoriqueOrderByRelationAggregateInput = {
    _count?: SortOrder
  }

  export type UserCountOrderByAggregateInput = {
    idUser?: SortOrder
    name?: SortOrder
    postname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateDeNaissance?: SortOrder
    sexe?: SortOrder
    pays?: SortOrder
  }

  export type UserAvgOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type UserMaxOrderByAggregateInput = {
    idUser?: SortOrder
    name?: SortOrder
    postname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateDeNaissance?: SortOrder
    sexe?: SortOrder
    pays?: SortOrder
  }

  export type UserMinOrderByAggregateInput = {
    idUser?: SortOrder
    name?: SortOrder
    postname?: SortOrder
    email?: SortOrder
    password?: SortOrder
    dateDeNaissance?: SortOrder
    sexe?: SortOrder
    pays?: SortOrder
  }

  export type UserSumOrderByAggregateInput = {
    idUser?: SortOrder
  }

  export type IntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type StringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type DateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type FloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type UserRelationFilter = {
    is?: UserWhereInput
    isNot?: UserWhereInput
  }

  export type FilmCountOrderByAggregateInput = {
    idFilm?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
  }

  export type FilmAvgOrderByAggregateInput = {
    idFilm?: SortOrder
    anneeDeSortie?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    userId?: SortOrder
  }

  export type FilmMaxOrderByAggregateInput = {
    idFilm?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
  }

  export type FilmMinOrderByAggregateInput = {
    idFilm?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
  }

  export type FilmSumOrderByAggregateInput = {
    idFilm?: SortOrder
    anneeDeSortie?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    userId?: SortOrder
  }

  export type FloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type SerieCountOrderByAggregateInput = {
    idSerie?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
  }

  export type SerieAvgOrderByAggregateInput = {
    idSerie?: SortOrder
    anneeDeSortie?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    userId?: SortOrder
  }

  export type SerieMaxOrderByAggregateInput = {
    idSerie?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
  }

  export type SerieMinOrderByAggregateInput = {
    idSerie?: SortOrder
    titre?: SortOrder
    realisateur?: SortOrder
    anneeDeSortie?: SortOrder
    description?: SortOrder
    acteur?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    urlDeStreaming?: SortOrder
    urlDeTelechargement?: SortOrder
    userId?: SortOrder
  }

  export type SerieSumOrderByAggregateInput = {
    idSerie?: SortOrder
    anneeDeSortie?: SortOrder
    dureeMoyenneParEpisode?: SortOrder
    userId?: SortOrder
  }

  export type IntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type FilmRelationFilter = {
    is?: FilmWhereInput
    isNot?: FilmWhereInput
  }

  export type SerieRelationFilter = {
    is?: SerieWhereInput
    isNot?: SerieWhereInput
  }

  export type UserNullableRelationFilter = {
    is?: UserWhereInput | null
    isNot?: UserWhereInput | null
  }

  export type SortOrderInput = {
    sort: SortOrder
    nulls?: NullsOrder
  }

  export type TelechargementCountOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    qualiteVideo?: SortOrder
    userIdUser?: SortOrder
  }

  export type TelechargementAvgOrderByAggregateInput = {
    id?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    userIdUser?: SortOrder
  }

  export type TelechargementMaxOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    qualiteVideo?: SortOrder
    userIdUser?: SortOrder
  }

  export type TelechargementMinOrderByAggregateInput = {
    id?: SortOrder
    date?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    qualiteVideo?: SortOrder
    userIdUser?: SortOrder
  }

  export type TelechargementSumOrderByAggregateInput = {
    id?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    userIdUser?: SortOrder
  }

  export type IntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type StringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type AvisCountOrderByAggregateInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    comment?: SortOrder
  }

  export type AvisAvgOrderByAggregateInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type AvisMaxOrderByAggregateInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    comment?: SortOrder
  }

  export type AvisMinOrderByAggregateInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    comment?: SortOrder
  }

  export type AvisSumOrderByAggregateInput = {
    idAvis?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type StringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    mode?: QueryMode
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type BigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type FavorisCountOrderByAggregateInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type FavorisAvgOrderByAggregateInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type FavorisMaxOrderByAggregateInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type FavorisMinOrderByAggregateInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type FavorisSumOrderByAggregateInput = {
    idFavoris?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type BigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type HistoriqueCountOrderByAggregateInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    dateDeVisuaisation?: SortOrder
  }

  export type HistoriqueAvgOrderByAggregateInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type HistoriqueMaxOrderByAggregateInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    dateDeVisuaisation?: SortOrder
  }

  export type HistoriqueMinOrderByAggregateInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
    dateDeVisuaisation?: SortOrder
  }

  export type HistoriqueSumOrderByAggregateInput = {
    idHistorique?: SortOrder
    userId?: SortOrder
    filmId?: SortOrder
    serieId?: SortOrder
  }

  export type AvisCreateNestedManyWithoutUserInput = {
    create?: XOR<AvisCreateWithoutUserInput, AvisUncheckedCreateWithoutUserInput> | AvisCreateWithoutUserInput[] | AvisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutUserInput | AvisCreateOrConnectWithoutUserInput[]
    createMany?: AvisCreateManyUserInputEnvelope
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
  }

  export type FilmCreateNestedManyWithoutUserInput = {
    create?: XOR<FilmCreateWithoutUserInput, FilmUncheckedCreateWithoutUserInput> | FilmCreateWithoutUserInput[] | FilmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FilmCreateOrConnectWithoutUserInput | FilmCreateOrConnectWithoutUserInput[]
    createMany?: FilmCreateManyUserInputEnvelope
    connect?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
  }

  export type SerieCreateNestedManyWithoutUserInput = {
    create?: XOR<SerieCreateWithoutUserInput, SerieUncheckedCreateWithoutUserInput> | SerieCreateWithoutUserInput[] | SerieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerieCreateOrConnectWithoutUserInput | SerieCreateOrConnectWithoutUserInput[]
    createMany?: SerieCreateManyUserInputEnvelope
    connect?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
  }

  export type TelechargementCreateNestedManyWithoutUserInput = {
    create?: XOR<TelechargementCreateWithoutUserInput, TelechargementUncheckedCreateWithoutUserInput> | TelechargementCreateWithoutUserInput[] | TelechargementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUserInput | TelechargementCreateOrConnectWithoutUserInput[]
    createMany?: TelechargementCreateManyUserInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type FavorisCreateNestedManyWithoutUserInput = {
    create?: XOR<FavorisCreateWithoutUserInput, FavorisUncheckedCreateWithoutUserInput> | FavorisCreateWithoutUserInput[] | FavorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutUserInput | FavorisCreateOrConnectWithoutUserInput[]
    createMany?: FavorisCreateManyUserInputEnvelope
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
  }

  export type HistoriqueCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoriqueCreateWithoutUserInput, HistoriqueUncheckedCreateWithoutUserInput> | HistoriqueCreateWithoutUserInput[] | HistoriqueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutUserInput | HistoriqueCreateOrConnectWithoutUserInput[]
    createMany?: HistoriqueCreateManyUserInputEnvelope
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
  }

  export type AvisUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<AvisCreateWithoutUserInput, AvisUncheckedCreateWithoutUserInput> | AvisCreateWithoutUserInput[] | AvisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutUserInput | AvisCreateOrConnectWithoutUserInput[]
    createMany?: AvisCreateManyUserInputEnvelope
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
  }

  export type FilmUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FilmCreateWithoutUserInput, FilmUncheckedCreateWithoutUserInput> | FilmCreateWithoutUserInput[] | FilmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FilmCreateOrConnectWithoutUserInput | FilmCreateOrConnectWithoutUserInput[]
    createMany?: FilmCreateManyUserInputEnvelope
    connect?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
  }

  export type SerieUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<SerieCreateWithoutUserInput, SerieUncheckedCreateWithoutUserInput> | SerieCreateWithoutUserInput[] | SerieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerieCreateOrConnectWithoutUserInput | SerieCreateOrConnectWithoutUserInput[]
    createMany?: SerieCreateManyUserInputEnvelope
    connect?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
  }

  export type TelechargementUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<TelechargementCreateWithoutUserInput, TelechargementUncheckedCreateWithoutUserInput> | TelechargementCreateWithoutUserInput[] | TelechargementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUserInput | TelechargementCreateOrConnectWithoutUserInput[]
    createMany?: TelechargementCreateManyUserInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type FavorisUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<FavorisCreateWithoutUserInput, FavorisUncheckedCreateWithoutUserInput> | FavorisCreateWithoutUserInput[] | FavorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutUserInput | FavorisCreateOrConnectWithoutUserInput[]
    createMany?: FavorisCreateManyUserInputEnvelope
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
  }

  export type HistoriqueUncheckedCreateNestedManyWithoutUserInput = {
    create?: XOR<HistoriqueCreateWithoutUserInput, HistoriqueUncheckedCreateWithoutUserInput> | HistoriqueCreateWithoutUserInput[] | HistoriqueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutUserInput | HistoriqueCreateOrConnectWithoutUserInput[]
    createMany?: HistoriqueCreateManyUserInputEnvelope
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
  }

  export type StringFieldUpdateOperationsInput = {
    set?: string
  }

  export type DateTimeFieldUpdateOperationsInput = {
    set?: Date | string
  }

  export type AvisUpdateManyWithoutUserNestedInput = {
    create?: XOR<AvisCreateWithoutUserInput, AvisUncheckedCreateWithoutUserInput> | AvisCreateWithoutUserInput[] | AvisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutUserInput | AvisCreateOrConnectWithoutUserInput[]
    upsert?: AvisUpsertWithWhereUniqueWithoutUserInput | AvisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AvisCreateManyUserInputEnvelope
    set?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    disconnect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    delete?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    update?: AvisUpdateWithWhereUniqueWithoutUserInput | AvisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AvisUpdateManyWithWhereWithoutUserInput | AvisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AvisScalarWhereInput | AvisScalarWhereInput[]
  }

  export type FilmUpdateManyWithoutUserNestedInput = {
    create?: XOR<FilmCreateWithoutUserInput, FilmUncheckedCreateWithoutUserInput> | FilmCreateWithoutUserInput[] | FilmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FilmCreateOrConnectWithoutUserInput | FilmCreateOrConnectWithoutUserInput[]
    upsert?: FilmUpsertWithWhereUniqueWithoutUserInput | FilmUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FilmCreateManyUserInputEnvelope
    set?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    disconnect?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    delete?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    connect?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    update?: FilmUpdateWithWhereUniqueWithoutUserInput | FilmUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FilmUpdateManyWithWhereWithoutUserInput | FilmUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FilmScalarWhereInput | FilmScalarWhereInput[]
  }

  export type SerieUpdateManyWithoutUserNestedInput = {
    create?: XOR<SerieCreateWithoutUserInput, SerieUncheckedCreateWithoutUserInput> | SerieCreateWithoutUserInput[] | SerieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerieCreateOrConnectWithoutUserInput | SerieCreateOrConnectWithoutUserInput[]
    upsert?: SerieUpsertWithWhereUniqueWithoutUserInput | SerieUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SerieCreateManyUserInputEnvelope
    set?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    disconnect?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    delete?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    connect?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    update?: SerieUpdateWithWhereUniqueWithoutUserInput | SerieUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SerieUpdateManyWithWhereWithoutUserInput | SerieUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SerieScalarWhereInput | SerieScalarWhereInput[]
  }

  export type TelechargementUpdateManyWithoutUserNestedInput = {
    create?: XOR<TelechargementCreateWithoutUserInput, TelechargementUncheckedCreateWithoutUserInput> | TelechargementCreateWithoutUserInput[] | TelechargementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUserInput | TelechargementCreateOrConnectWithoutUserInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutUserInput | TelechargementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TelechargementCreateManyUserInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutUserInput | TelechargementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutUserInput | TelechargementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type FavorisUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavorisCreateWithoutUserInput, FavorisUncheckedCreateWithoutUserInput> | FavorisCreateWithoutUserInput[] | FavorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutUserInput | FavorisCreateOrConnectWithoutUserInput[]
    upsert?: FavorisUpsertWithWhereUniqueWithoutUserInput | FavorisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavorisCreateManyUserInputEnvelope
    set?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    disconnect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    delete?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    update?: FavorisUpdateWithWhereUniqueWithoutUserInput | FavorisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavorisUpdateManyWithWhereWithoutUserInput | FavorisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
  }

  export type HistoriqueUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoriqueCreateWithoutUserInput, HistoriqueUncheckedCreateWithoutUserInput> | HistoriqueCreateWithoutUserInput[] | HistoriqueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutUserInput | HistoriqueCreateOrConnectWithoutUserInput[]
    upsert?: HistoriqueUpsertWithWhereUniqueWithoutUserInput | HistoriqueUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoriqueCreateManyUserInputEnvelope
    set?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    disconnect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    delete?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    update?: HistoriqueUpdateWithWhereUniqueWithoutUserInput | HistoriqueUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoriqueUpdateManyWithWhereWithoutUserInput | HistoriqueUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
  }

  export type IntFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type AvisUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<AvisCreateWithoutUserInput, AvisUncheckedCreateWithoutUserInput> | AvisCreateWithoutUserInput[] | AvisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutUserInput | AvisCreateOrConnectWithoutUserInput[]
    upsert?: AvisUpsertWithWhereUniqueWithoutUserInput | AvisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: AvisCreateManyUserInputEnvelope
    set?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    disconnect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    delete?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    update?: AvisUpdateWithWhereUniqueWithoutUserInput | AvisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: AvisUpdateManyWithWhereWithoutUserInput | AvisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: AvisScalarWhereInput | AvisScalarWhereInput[]
  }

  export type FilmUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FilmCreateWithoutUserInput, FilmUncheckedCreateWithoutUserInput> | FilmCreateWithoutUserInput[] | FilmUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FilmCreateOrConnectWithoutUserInput | FilmCreateOrConnectWithoutUserInput[]
    upsert?: FilmUpsertWithWhereUniqueWithoutUserInput | FilmUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FilmCreateManyUserInputEnvelope
    set?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    disconnect?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    delete?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    connect?: FilmWhereUniqueInput | FilmWhereUniqueInput[]
    update?: FilmUpdateWithWhereUniqueWithoutUserInput | FilmUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FilmUpdateManyWithWhereWithoutUserInput | FilmUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FilmScalarWhereInput | FilmScalarWhereInput[]
  }

  export type SerieUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<SerieCreateWithoutUserInput, SerieUncheckedCreateWithoutUserInput> | SerieCreateWithoutUserInput[] | SerieUncheckedCreateWithoutUserInput[]
    connectOrCreate?: SerieCreateOrConnectWithoutUserInput | SerieCreateOrConnectWithoutUserInput[]
    upsert?: SerieUpsertWithWhereUniqueWithoutUserInput | SerieUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: SerieCreateManyUserInputEnvelope
    set?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    disconnect?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    delete?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    connect?: SerieWhereUniqueInput | SerieWhereUniqueInput[]
    update?: SerieUpdateWithWhereUniqueWithoutUserInput | SerieUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: SerieUpdateManyWithWhereWithoutUserInput | SerieUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: SerieScalarWhereInput | SerieScalarWhereInput[]
  }

  export type TelechargementUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<TelechargementCreateWithoutUserInput, TelechargementUncheckedCreateWithoutUserInput> | TelechargementCreateWithoutUserInput[] | TelechargementUncheckedCreateWithoutUserInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutUserInput | TelechargementCreateOrConnectWithoutUserInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutUserInput | TelechargementUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: TelechargementCreateManyUserInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutUserInput | TelechargementUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutUserInput | TelechargementUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type FavorisUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<FavorisCreateWithoutUserInput, FavorisUncheckedCreateWithoutUserInput> | FavorisCreateWithoutUserInput[] | FavorisUncheckedCreateWithoutUserInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutUserInput | FavorisCreateOrConnectWithoutUserInput[]
    upsert?: FavorisUpsertWithWhereUniqueWithoutUserInput | FavorisUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: FavorisCreateManyUserInputEnvelope
    set?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    disconnect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    delete?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    update?: FavorisUpdateWithWhereUniqueWithoutUserInput | FavorisUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: FavorisUpdateManyWithWhereWithoutUserInput | FavorisUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
  }

  export type HistoriqueUncheckedUpdateManyWithoutUserNestedInput = {
    create?: XOR<HistoriqueCreateWithoutUserInput, HistoriqueUncheckedCreateWithoutUserInput> | HistoriqueCreateWithoutUserInput[] | HistoriqueUncheckedCreateWithoutUserInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutUserInput | HistoriqueCreateOrConnectWithoutUserInput[]
    upsert?: HistoriqueUpsertWithWhereUniqueWithoutUserInput | HistoriqueUpsertWithWhereUniqueWithoutUserInput[]
    createMany?: HistoriqueCreateManyUserInputEnvelope
    set?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    disconnect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    delete?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    update?: HistoriqueUpdateWithWhereUniqueWithoutUserInput | HistoriqueUpdateWithWhereUniqueWithoutUserInput[]
    updateMany?: HistoriqueUpdateManyWithWhereWithoutUserInput | HistoriqueUpdateManyWithWhereWithoutUserInput[]
    deleteMany?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
  }

  export type TelechargementCreateNestedManyWithoutFilmInput = {
    create?: XOR<TelechargementCreateWithoutFilmInput, TelechargementUncheckedCreateWithoutFilmInput> | TelechargementCreateWithoutFilmInput[] | TelechargementUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutFilmInput | TelechargementCreateOrConnectWithoutFilmInput[]
    createMany?: TelechargementCreateManyFilmInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutFilmInput = {
    create?: XOR<UserCreateWithoutFilmInput, UserUncheckedCreateWithoutFilmInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilmInput
    connect?: UserWhereUniqueInput
  }

  export type AvisCreateNestedManyWithoutFilmInput = {
    create?: XOR<AvisCreateWithoutFilmInput, AvisUncheckedCreateWithoutFilmInput> | AvisCreateWithoutFilmInput[] | AvisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutFilmInput | AvisCreateOrConnectWithoutFilmInput[]
    createMany?: AvisCreateManyFilmInputEnvelope
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
  }

  export type FavorisCreateNestedManyWithoutFilmInput = {
    create?: XOR<FavorisCreateWithoutFilmInput, FavorisUncheckedCreateWithoutFilmInput> | FavorisCreateWithoutFilmInput[] | FavorisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutFilmInput | FavorisCreateOrConnectWithoutFilmInput[]
    createMany?: FavorisCreateManyFilmInputEnvelope
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
  }

  export type HistoriqueCreateNestedManyWithoutFilmInput = {
    create?: XOR<HistoriqueCreateWithoutFilmInput, HistoriqueUncheckedCreateWithoutFilmInput> | HistoriqueCreateWithoutFilmInput[] | HistoriqueUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutFilmInput | HistoriqueCreateOrConnectWithoutFilmInput[]
    createMany?: HistoriqueCreateManyFilmInputEnvelope
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
  }

  export type TelechargementUncheckedCreateNestedManyWithoutFilmInput = {
    create?: XOR<TelechargementCreateWithoutFilmInput, TelechargementUncheckedCreateWithoutFilmInput> | TelechargementCreateWithoutFilmInput[] | TelechargementUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutFilmInput | TelechargementCreateOrConnectWithoutFilmInput[]
    createMany?: TelechargementCreateManyFilmInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type AvisUncheckedCreateNestedManyWithoutFilmInput = {
    create?: XOR<AvisCreateWithoutFilmInput, AvisUncheckedCreateWithoutFilmInput> | AvisCreateWithoutFilmInput[] | AvisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutFilmInput | AvisCreateOrConnectWithoutFilmInput[]
    createMany?: AvisCreateManyFilmInputEnvelope
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
  }

  export type FavorisUncheckedCreateNestedManyWithoutFilmInput = {
    create?: XOR<FavorisCreateWithoutFilmInput, FavorisUncheckedCreateWithoutFilmInput> | FavorisCreateWithoutFilmInput[] | FavorisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutFilmInput | FavorisCreateOrConnectWithoutFilmInput[]
    createMany?: FavorisCreateManyFilmInputEnvelope
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
  }

  export type HistoriqueUncheckedCreateNestedManyWithoutFilmInput = {
    create?: XOR<HistoriqueCreateWithoutFilmInput, HistoriqueUncheckedCreateWithoutFilmInput> | HistoriqueCreateWithoutFilmInput[] | HistoriqueUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutFilmInput | HistoriqueCreateOrConnectWithoutFilmInput[]
    createMany?: HistoriqueCreateManyFilmInputEnvelope
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
  }

  export type FloatFieldUpdateOperationsInput = {
    set?: number
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type TelechargementUpdateManyWithoutFilmNestedInput = {
    create?: XOR<TelechargementCreateWithoutFilmInput, TelechargementUncheckedCreateWithoutFilmInput> | TelechargementCreateWithoutFilmInput[] | TelechargementUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutFilmInput | TelechargementCreateOrConnectWithoutFilmInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutFilmInput | TelechargementUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: TelechargementCreateManyFilmInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutFilmInput | TelechargementUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutFilmInput | TelechargementUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutFilmNestedInput = {
    create?: XOR<UserCreateWithoutFilmInput, UserUncheckedCreateWithoutFilmInput>
    connectOrCreate?: UserCreateOrConnectWithoutFilmInput
    upsert?: UserUpsertWithoutFilmInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFilmInput, UserUpdateWithoutFilmInput>, UserUncheckedUpdateWithoutFilmInput>
  }

  export type AvisUpdateManyWithoutFilmNestedInput = {
    create?: XOR<AvisCreateWithoutFilmInput, AvisUncheckedCreateWithoutFilmInput> | AvisCreateWithoutFilmInput[] | AvisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutFilmInput | AvisCreateOrConnectWithoutFilmInput[]
    upsert?: AvisUpsertWithWhereUniqueWithoutFilmInput | AvisUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: AvisCreateManyFilmInputEnvelope
    set?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    disconnect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    delete?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    update?: AvisUpdateWithWhereUniqueWithoutFilmInput | AvisUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: AvisUpdateManyWithWhereWithoutFilmInput | AvisUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: AvisScalarWhereInput | AvisScalarWhereInput[]
  }

  export type FavorisUpdateManyWithoutFilmNestedInput = {
    create?: XOR<FavorisCreateWithoutFilmInput, FavorisUncheckedCreateWithoutFilmInput> | FavorisCreateWithoutFilmInput[] | FavorisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutFilmInput | FavorisCreateOrConnectWithoutFilmInput[]
    upsert?: FavorisUpsertWithWhereUniqueWithoutFilmInput | FavorisUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: FavorisCreateManyFilmInputEnvelope
    set?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    disconnect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    delete?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    update?: FavorisUpdateWithWhereUniqueWithoutFilmInput | FavorisUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: FavorisUpdateManyWithWhereWithoutFilmInput | FavorisUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
  }

  export type HistoriqueUpdateManyWithoutFilmNestedInput = {
    create?: XOR<HistoriqueCreateWithoutFilmInput, HistoriqueUncheckedCreateWithoutFilmInput> | HistoriqueCreateWithoutFilmInput[] | HistoriqueUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutFilmInput | HistoriqueCreateOrConnectWithoutFilmInput[]
    upsert?: HistoriqueUpsertWithWhereUniqueWithoutFilmInput | HistoriqueUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: HistoriqueCreateManyFilmInputEnvelope
    set?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    disconnect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    delete?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    update?: HistoriqueUpdateWithWhereUniqueWithoutFilmInput | HistoriqueUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: HistoriqueUpdateManyWithWhereWithoutFilmInput | HistoriqueUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
  }

  export type TelechargementUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<TelechargementCreateWithoutFilmInput, TelechargementUncheckedCreateWithoutFilmInput> | TelechargementCreateWithoutFilmInput[] | TelechargementUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutFilmInput | TelechargementCreateOrConnectWithoutFilmInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutFilmInput | TelechargementUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: TelechargementCreateManyFilmInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutFilmInput | TelechargementUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutFilmInput | TelechargementUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type AvisUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<AvisCreateWithoutFilmInput, AvisUncheckedCreateWithoutFilmInput> | AvisCreateWithoutFilmInput[] | AvisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutFilmInput | AvisCreateOrConnectWithoutFilmInput[]
    upsert?: AvisUpsertWithWhereUniqueWithoutFilmInput | AvisUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: AvisCreateManyFilmInputEnvelope
    set?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    disconnect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    delete?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    update?: AvisUpdateWithWhereUniqueWithoutFilmInput | AvisUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: AvisUpdateManyWithWhereWithoutFilmInput | AvisUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: AvisScalarWhereInput | AvisScalarWhereInput[]
  }

  export type FavorisUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<FavorisCreateWithoutFilmInput, FavorisUncheckedCreateWithoutFilmInput> | FavorisCreateWithoutFilmInput[] | FavorisUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutFilmInput | FavorisCreateOrConnectWithoutFilmInput[]
    upsert?: FavorisUpsertWithWhereUniqueWithoutFilmInput | FavorisUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: FavorisCreateManyFilmInputEnvelope
    set?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    disconnect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    delete?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    update?: FavorisUpdateWithWhereUniqueWithoutFilmInput | FavorisUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: FavorisUpdateManyWithWhereWithoutFilmInput | FavorisUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
  }

  export type HistoriqueUncheckedUpdateManyWithoutFilmNestedInput = {
    create?: XOR<HistoriqueCreateWithoutFilmInput, HistoriqueUncheckedCreateWithoutFilmInput> | HistoriqueCreateWithoutFilmInput[] | HistoriqueUncheckedCreateWithoutFilmInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutFilmInput | HistoriqueCreateOrConnectWithoutFilmInput[]
    upsert?: HistoriqueUpsertWithWhereUniqueWithoutFilmInput | HistoriqueUpsertWithWhereUniqueWithoutFilmInput[]
    createMany?: HistoriqueCreateManyFilmInputEnvelope
    set?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    disconnect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    delete?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    update?: HistoriqueUpdateWithWhereUniqueWithoutFilmInput | HistoriqueUpdateWithWhereUniqueWithoutFilmInput[]
    updateMany?: HistoriqueUpdateManyWithWhereWithoutFilmInput | HistoriqueUpdateManyWithWhereWithoutFilmInput[]
    deleteMany?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
  }

  export type TelechargementCreateNestedManyWithoutSerieInput = {
    create?: XOR<TelechargementCreateWithoutSerieInput, TelechargementUncheckedCreateWithoutSerieInput> | TelechargementCreateWithoutSerieInput[] | TelechargementUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutSerieInput | TelechargementCreateOrConnectWithoutSerieInput[]
    createMany?: TelechargementCreateManySerieInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type UserCreateNestedOneWithoutSerieInput = {
    create?: XOR<UserCreateWithoutSerieInput, UserUncheckedCreateWithoutSerieInput>
    connectOrCreate?: UserCreateOrConnectWithoutSerieInput
    connect?: UserWhereUniqueInput
  }

  export type AvisCreateNestedManyWithoutSerieInput = {
    create?: XOR<AvisCreateWithoutSerieInput, AvisUncheckedCreateWithoutSerieInput> | AvisCreateWithoutSerieInput[] | AvisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutSerieInput | AvisCreateOrConnectWithoutSerieInput[]
    createMany?: AvisCreateManySerieInputEnvelope
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
  }

  export type FavorisCreateNestedManyWithoutSerieInput = {
    create?: XOR<FavorisCreateWithoutSerieInput, FavorisUncheckedCreateWithoutSerieInput> | FavorisCreateWithoutSerieInput[] | FavorisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutSerieInput | FavorisCreateOrConnectWithoutSerieInput[]
    createMany?: FavorisCreateManySerieInputEnvelope
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
  }

  export type HistoriqueCreateNestedManyWithoutSerieInput = {
    create?: XOR<HistoriqueCreateWithoutSerieInput, HistoriqueUncheckedCreateWithoutSerieInput> | HistoriqueCreateWithoutSerieInput[] | HistoriqueUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutSerieInput | HistoriqueCreateOrConnectWithoutSerieInput[]
    createMany?: HistoriqueCreateManySerieInputEnvelope
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
  }

  export type TelechargementUncheckedCreateNestedManyWithoutSerieInput = {
    create?: XOR<TelechargementCreateWithoutSerieInput, TelechargementUncheckedCreateWithoutSerieInput> | TelechargementCreateWithoutSerieInput[] | TelechargementUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutSerieInput | TelechargementCreateOrConnectWithoutSerieInput[]
    createMany?: TelechargementCreateManySerieInputEnvelope
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
  }

  export type AvisUncheckedCreateNestedManyWithoutSerieInput = {
    create?: XOR<AvisCreateWithoutSerieInput, AvisUncheckedCreateWithoutSerieInput> | AvisCreateWithoutSerieInput[] | AvisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutSerieInput | AvisCreateOrConnectWithoutSerieInput[]
    createMany?: AvisCreateManySerieInputEnvelope
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
  }

  export type FavorisUncheckedCreateNestedManyWithoutSerieInput = {
    create?: XOR<FavorisCreateWithoutSerieInput, FavorisUncheckedCreateWithoutSerieInput> | FavorisCreateWithoutSerieInput[] | FavorisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutSerieInput | FavorisCreateOrConnectWithoutSerieInput[]
    createMany?: FavorisCreateManySerieInputEnvelope
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
  }

  export type HistoriqueUncheckedCreateNestedManyWithoutSerieInput = {
    create?: XOR<HistoriqueCreateWithoutSerieInput, HistoriqueUncheckedCreateWithoutSerieInput> | HistoriqueCreateWithoutSerieInput[] | HistoriqueUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutSerieInput | HistoriqueCreateOrConnectWithoutSerieInput[]
    createMany?: HistoriqueCreateManySerieInputEnvelope
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
  }

  export type TelechargementUpdateManyWithoutSerieNestedInput = {
    create?: XOR<TelechargementCreateWithoutSerieInput, TelechargementUncheckedCreateWithoutSerieInput> | TelechargementCreateWithoutSerieInput[] | TelechargementUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutSerieInput | TelechargementCreateOrConnectWithoutSerieInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutSerieInput | TelechargementUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: TelechargementCreateManySerieInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutSerieInput | TelechargementUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutSerieInput | TelechargementUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type UserUpdateOneRequiredWithoutSerieNestedInput = {
    create?: XOR<UserCreateWithoutSerieInput, UserUncheckedCreateWithoutSerieInput>
    connectOrCreate?: UserCreateOrConnectWithoutSerieInput
    upsert?: UserUpsertWithoutSerieInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutSerieInput, UserUpdateWithoutSerieInput>, UserUncheckedUpdateWithoutSerieInput>
  }

  export type AvisUpdateManyWithoutSerieNestedInput = {
    create?: XOR<AvisCreateWithoutSerieInput, AvisUncheckedCreateWithoutSerieInput> | AvisCreateWithoutSerieInput[] | AvisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutSerieInput | AvisCreateOrConnectWithoutSerieInput[]
    upsert?: AvisUpsertWithWhereUniqueWithoutSerieInput | AvisUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: AvisCreateManySerieInputEnvelope
    set?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    disconnect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    delete?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    update?: AvisUpdateWithWhereUniqueWithoutSerieInput | AvisUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: AvisUpdateManyWithWhereWithoutSerieInput | AvisUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: AvisScalarWhereInput | AvisScalarWhereInput[]
  }

  export type FavorisUpdateManyWithoutSerieNestedInput = {
    create?: XOR<FavorisCreateWithoutSerieInput, FavorisUncheckedCreateWithoutSerieInput> | FavorisCreateWithoutSerieInput[] | FavorisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutSerieInput | FavorisCreateOrConnectWithoutSerieInput[]
    upsert?: FavorisUpsertWithWhereUniqueWithoutSerieInput | FavorisUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: FavorisCreateManySerieInputEnvelope
    set?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    disconnect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    delete?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    update?: FavorisUpdateWithWhereUniqueWithoutSerieInput | FavorisUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: FavorisUpdateManyWithWhereWithoutSerieInput | FavorisUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
  }

  export type HistoriqueUpdateManyWithoutSerieNestedInput = {
    create?: XOR<HistoriqueCreateWithoutSerieInput, HistoriqueUncheckedCreateWithoutSerieInput> | HistoriqueCreateWithoutSerieInput[] | HistoriqueUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutSerieInput | HistoriqueCreateOrConnectWithoutSerieInput[]
    upsert?: HistoriqueUpsertWithWhereUniqueWithoutSerieInput | HistoriqueUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: HistoriqueCreateManySerieInputEnvelope
    set?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    disconnect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    delete?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    update?: HistoriqueUpdateWithWhereUniqueWithoutSerieInput | HistoriqueUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: HistoriqueUpdateManyWithWhereWithoutSerieInput | HistoriqueUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
  }

  export type TelechargementUncheckedUpdateManyWithoutSerieNestedInput = {
    create?: XOR<TelechargementCreateWithoutSerieInput, TelechargementUncheckedCreateWithoutSerieInput> | TelechargementCreateWithoutSerieInput[] | TelechargementUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: TelechargementCreateOrConnectWithoutSerieInput | TelechargementCreateOrConnectWithoutSerieInput[]
    upsert?: TelechargementUpsertWithWhereUniqueWithoutSerieInput | TelechargementUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: TelechargementCreateManySerieInputEnvelope
    set?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    disconnect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    delete?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    connect?: TelechargementWhereUniqueInput | TelechargementWhereUniqueInput[]
    update?: TelechargementUpdateWithWhereUniqueWithoutSerieInput | TelechargementUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: TelechargementUpdateManyWithWhereWithoutSerieInput | TelechargementUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
  }

  export type AvisUncheckedUpdateManyWithoutSerieNestedInput = {
    create?: XOR<AvisCreateWithoutSerieInput, AvisUncheckedCreateWithoutSerieInput> | AvisCreateWithoutSerieInput[] | AvisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: AvisCreateOrConnectWithoutSerieInput | AvisCreateOrConnectWithoutSerieInput[]
    upsert?: AvisUpsertWithWhereUniqueWithoutSerieInput | AvisUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: AvisCreateManySerieInputEnvelope
    set?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    disconnect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    delete?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    connect?: AvisWhereUniqueInput | AvisWhereUniqueInput[]
    update?: AvisUpdateWithWhereUniqueWithoutSerieInput | AvisUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: AvisUpdateManyWithWhereWithoutSerieInput | AvisUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: AvisScalarWhereInput | AvisScalarWhereInput[]
  }

  export type FavorisUncheckedUpdateManyWithoutSerieNestedInput = {
    create?: XOR<FavorisCreateWithoutSerieInput, FavorisUncheckedCreateWithoutSerieInput> | FavorisCreateWithoutSerieInput[] | FavorisUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: FavorisCreateOrConnectWithoutSerieInput | FavorisCreateOrConnectWithoutSerieInput[]
    upsert?: FavorisUpsertWithWhereUniqueWithoutSerieInput | FavorisUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: FavorisCreateManySerieInputEnvelope
    set?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    disconnect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    delete?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    connect?: FavorisWhereUniqueInput | FavorisWhereUniqueInput[]
    update?: FavorisUpdateWithWhereUniqueWithoutSerieInput | FavorisUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: FavorisUpdateManyWithWhereWithoutSerieInput | FavorisUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
  }

  export type HistoriqueUncheckedUpdateManyWithoutSerieNestedInput = {
    create?: XOR<HistoriqueCreateWithoutSerieInput, HistoriqueUncheckedCreateWithoutSerieInput> | HistoriqueCreateWithoutSerieInput[] | HistoriqueUncheckedCreateWithoutSerieInput[]
    connectOrCreate?: HistoriqueCreateOrConnectWithoutSerieInput | HistoriqueCreateOrConnectWithoutSerieInput[]
    upsert?: HistoriqueUpsertWithWhereUniqueWithoutSerieInput | HistoriqueUpsertWithWhereUniqueWithoutSerieInput[]
    createMany?: HistoriqueCreateManySerieInputEnvelope
    set?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    disconnect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    delete?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    connect?: HistoriqueWhereUniqueInput | HistoriqueWhereUniqueInput[]
    update?: HistoriqueUpdateWithWhereUniqueWithoutSerieInput | HistoriqueUpdateWithWhereUniqueWithoutSerieInput[]
    updateMany?: HistoriqueUpdateManyWithWhereWithoutSerieInput | HistoriqueUpdateManyWithWhereWithoutSerieInput[]
    deleteMany?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
  }

  export type FilmCreateNestedOneWithoutTelechargementInput = {
    create?: XOR<FilmCreateWithoutTelechargementInput, FilmUncheckedCreateWithoutTelechargementInput>
    connectOrCreate?: FilmCreateOrConnectWithoutTelechargementInput
    connect?: FilmWhereUniqueInput
  }

  export type SerieCreateNestedOneWithoutTelechargementInput = {
    create?: XOR<SerieCreateWithoutTelechargementInput, SerieUncheckedCreateWithoutTelechargementInput>
    connectOrCreate?: SerieCreateOrConnectWithoutTelechargementInput
    connect?: SerieWhereUniqueInput
  }

  export type UserCreateNestedOneWithoutTelechargementInput = {
    create?: XOR<UserCreateWithoutTelechargementInput, UserUncheckedCreateWithoutTelechargementInput>
    connectOrCreate?: UserCreateOrConnectWithoutTelechargementInput
    connect?: UserWhereUniqueInput
  }

  export type FilmUpdateOneRequiredWithoutTelechargementNestedInput = {
    create?: XOR<FilmCreateWithoutTelechargementInput, FilmUncheckedCreateWithoutTelechargementInput>
    connectOrCreate?: FilmCreateOrConnectWithoutTelechargementInput
    upsert?: FilmUpsertWithoutTelechargementInput
    connect?: FilmWhereUniqueInput
    update?: XOR<XOR<FilmUpdateToOneWithWhereWithoutTelechargementInput, FilmUpdateWithoutTelechargementInput>, FilmUncheckedUpdateWithoutTelechargementInput>
  }

  export type SerieUpdateOneRequiredWithoutTelechargementNestedInput = {
    create?: XOR<SerieCreateWithoutTelechargementInput, SerieUncheckedCreateWithoutTelechargementInput>
    connectOrCreate?: SerieCreateOrConnectWithoutTelechargementInput
    upsert?: SerieUpsertWithoutTelechargementInput
    connect?: SerieWhereUniqueInput
    update?: XOR<XOR<SerieUpdateToOneWithWhereWithoutTelechargementInput, SerieUpdateWithoutTelechargementInput>, SerieUncheckedUpdateWithoutTelechargementInput>
  }

  export type UserUpdateOneWithoutTelechargementNestedInput = {
    create?: XOR<UserCreateWithoutTelechargementInput, UserUncheckedCreateWithoutTelechargementInput>
    connectOrCreate?: UserCreateOrConnectWithoutTelechargementInput
    upsert?: UserUpsertWithoutTelechargementInput
    disconnect?: UserWhereInput | boolean
    delete?: UserWhereInput | boolean
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutTelechargementInput, UserUpdateWithoutTelechargementInput>, UserUncheckedUpdateWithoutTelechargementInput>
  }

  export type NullableIntFieldUpdateOperationsInput = {
    set?: number | null
    increment?: number
    decrement?: number
    multiply?: number
    divide?: number
  }

  export type UserCreateNestedOneWithoutAvisInput = {
    create?: XOR<UserCreateWithoutAvisInput, UserUncheckedCreateWithoutAvisInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvisInput
    connect?: UserWhereUniqueInput
  }

  export type FilmCreateNestedOneWithoutAvisInput = {
    create?: XOR<FilmCreateWithoutAvisInput, FilmUncheckedCreateWithoutAvisInput>
    connectOrCreate?: FilmCreateOrConnectWithoutAvisInput
    connect?: FilmWhereUniqueInput
  }

  export type SerieCreateNestedOneWithoutAvisInput = {
    create?: XOR<SerieCreateWithoutAvisInput, SerieUncheckedCreateWithoutAvisInput>
    connectOrCreate?: SerieCreateOrConnectWithoutAvisInput
    connect?: SerieWhereUniqueInput
  }

  export type NullableStringFieldUpdateOperationsInput = {
    set?: string | null
  }

  export type UserUpdateOneRequiredWithoutAvisNestedInput = {
    create?: XOR<UserCreateWithoutAvisInput, UserUncheckedCreateWithoutAvisInput>
    connectOrCreate?: UserCreateOrConnectWithoutAvisInput
    upsert?: UserUpsertWithoutAvisInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutAvisInput, UserUpdateWithoutAvisInput>, UserUncheckedUpdateWithoutAvisInput>
  }

  export type FilmUpdateOneRequiredWithoutAvisNestedInput = {
    create?: XOR<FilmCreateWithoutAvisInput, FilmUncheckedCreateWithoutAvisInput>
    connectOrCreate?: FilmCreateOrConnectWithoutAvisInput
    upsert?: FilmUpsertWithoutAvisInput
    connect?: FilmWhereUniqueInput
    update?: XOR<XOR<FilmUpdateToOneWithWhereWithoutAvisInput, FilmUpdateWithoutAvisInput>, FilmUncheckedUpdateWithoutAvisInput>
  }

  export type SerieUpdateOneRequiredWithoutAvisNestedInput = {
    create?: XOR<SerieCreateWithoutAvisInput, SerieUncheckedCreateWithoutAvisInput>
    connectOrCreate?: SerieCreateOrConnectWithoutAvisInput
    upsert?: SerieUpsertWithoutAvisInput
    connect?: SerieWhereUniqueInput
    update?: XOR<XOR<SerieUpdateToOneWithWhereWithoutAvisInput, SerieUpdateWithoutAvisInput>, SerieUncheckedUpdateWithoutAvisInput>
  }

  export type UserCreateNestedOneWithoutFavorisInput = {
    create?: XOR<UserCreateWithoutFavorisInput, UserUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavorisInput
    connect?: UserWhereUniqueInput
  }

  export type FilmCreateNestedOneWithoutFavorisInput = {
    create?: XOR<FilmCreateWithoutFavorisInput, FilmUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: FilmCreateOrConnectWithoutFavorisInput
    connect?: FilmWhereUniqueInput
  }

  export type SerieCreateNestedOneWithoutFavorisInput = {
    create?: XOR<SerieCreateWithoutFavorisInput, SerieUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: SerieCreateOrConnectWithoutFavorisInput
    connect?: SerieWhereUniqueInput
  }

  export type BigIntFieldUpdateOperationsInput = {
    set?: bigint | number
    increment?: bigint | number
    decrement?: bigint | number
    multiply?: bigint | number
    divide?: bigint | number
  }

  export type UserUpdateOneRequiredWithoutFavorisNestedInput = {
    create?: XOR<UserCreateWithoutFavorisInput, UserUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: UserCreateOrConnectWithoutFavorisInput
    upsert?: UserUpsertWithoutFavorisInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutFavorisInput, UserUpdateWithoutFavorisInput>, UserUncheckedUpdateWithoutFavorisInput>
  }

  export type FilmUpdateOneRequiredWithoutFavorisNestedInput = {
    create?: XOR<FilmCreateWithoutFavorisInput, FilmUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: FilmCreateOrConnectWithoutFavorisInput
    upsert?: FilmUpsertWithoutFavorisInput
    connect?: FilmWhereUniqueInput
    update?: XOR<XOR<FilmUpdateToOneWithWhereWithoutFavorisInput, FilmUpdateWithoutFavorisInput>, FilmUncheckedUpdateWithoutFavorisInput>
  }

  export type SerieUpdateOneRequiredWithoutFavorisNestedInput = {
    create?: XOR<SerieCreateWithoutFavorisInput, SerieUncheckedCreateWithoutFavorisInput>
    connectOrCreate?: SerieCreateOrConnectWithoutFavorisInput
    upsert?: SerieUpsertWithoutFavorisInput
    connect?: SerieWhereUniqueInput
    update?: XOR<XOR<SerieUpdateToOneWithWhereWithoutFavorisInput, SerieUpdateWithoutFavorisInput>, SerieUncheckedUpdateWithoutFavorisInput>
  }

  export type UserCreateNestedOneWithoutHistoriqueInput = {
    create?: XOR<UserCreateWithoutHistoriqueInput, UserUncheckedCreateWithoutHistoriqueInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoriqueInput
    connect?: UserWhereUniqueInput
  }

  export type FilmCreateNestedOneWithoutHistoriqueInput = {
    create?: XOR<FilmCreateWithoutHistoriqueInput, FilmUncheckedCreateWithoutHistoriqueInput>
    connectOrCreate?: FilmCreateOrConnectWithoutHistoriqueInput
    connect?: FilmWhereUniqueInput
  }

  export type SerieCreateNestedOneWithoutHistoriqueInput = {
    create?: XOR<SerieCreateWithoutHistoriqueInput, SerieUncheckedCreateWithoutHistoriqueInput>
    connectOrCreate?: SerieCreateOrConnectWithoutHistoriqueInput
    connect?: SerieWhereUniqueInput
  }

  export type UserUpdateOneRequiredWithoutHistoriqueNestedInput = {
    create?: XOR<UserCreateWithoutHistoriqueInput, UserUncheckedCreateWithoutHistoriqueInput>
    connectOrCreate?: UserCreateOrConnectWithoutHistoriqueInput
    upsert?: UserUpsertWithoutHistoriqueInput
    connect?: UserWhereUniqueInput
    update?: XOR<XOR<UserUpdateToOneWithWhereWithoutHistoriqueInput, UserUpdateWithoutHistoriqueInput>, UserUncheckedUpdateWithoutHistoriqueInput>
  }

  export type FilmUpdateOneRequiredWithoutHistoriqueNestedInput = {
    create?: XOR<FilmCreateWithoutHistoriqueInput, FilmUncheckedCreateWithoutHistoriqueInput>
    connectOrCreate?: FilmCreateOrConnectWithoutHistoriqueInput
    upsert?: FilmUpsertWithoutHistoriqueInput
    connect?: FilmWhereUniqueInput
    update?: XOR<XOR<FilmUpdateToOneWithWhereWithoutHistoriqueInput, FilmUpdateWithoutHistoriqueInput>, FilmUncheckedUpdateWithoutHistoriqueInput>
  }

  export type SerieUpdateOneRequiredWithoutHistoriqueNestedInput = {
    create?: XOR<SerieCreateWithoutHistoriqueInput, SerieUncheckedCreateWithoutHistoriqueInput>
    connectOrCreate?: SerieCreateOrConnectWithoutHistoriqueInput
    upsert?: SerieUpsertWithoutHistoriqueInput
    connect?: SerieWhereUniqueInput
    update?: XOR<XOR<SerieUpdateToOneWithWhereWithoutHistoriqueInput, SerieUpdateWithoutHistoriqueInput>, SerieUncheckedUpdateWithoutHistoriqueInput>
  }

  export type NestedIntFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntFilter<$PrismaModel> | number
  }

  export type NestedStringFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringFilter<$PrismaModel> | string
  }

  export type NestedDateTimeFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeFilter<$PrismaModel> | Date | string
  }

  export type NestedIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel>
    in?: number[] | ListIntFieldRefInput<$PrismaModel>
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel>
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedIntFilter<$PrismaModel>
    _min?: NestedIntFilter<$PrismaModel>
    _max?: NestedIntFilter<$PrismaModel>
  }

  export type NestedFloatFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatFilter<$PrismaModel> | number
  }

  export type NestedStringWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel>
    in?: string[] | ListStringFieldRefInput<$PrismaModel>
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel>
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringWithAggregatesFilter<$PrismaModel> | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedStringFilter<$PrismaModel>
    _max?: NestedStringFilter<$PrismaModel>
  }

  export type NestedDateTimeWithAggregatesFilter<$PrismaModel = never> = {
    equals?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    in?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    notIn?: Date[] | string[] | ListDateTimeFieldRefInput<$PrismaModel>
    lt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    lte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gt?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    gte?: Date | string | DateTimeFieldRefInput<$PrismaModel>
    not?: NestedDateTimeWithAggregatesFilter<$PrismaModel> | Date | string
    _count?: NestedIntFilter<$PrismaModel>
    _min?: NestedDateTimeFilter<$PrismaModel>
    _max?: NestedDateTimeFilter<$PrismaModel>
  }

  export type NestedFloatWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel>
    in?: number[] | ListFloatFieldRefInput<$PrismaModel>
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel>
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatWithAggregatesFilter<$PrismaModel> | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedFloatFilter<$PrismaModel>
    _min?: NestedFloatFilter<$PrismaModel>
    _max?: NestedFloatFilter<$PrismaModel>
  }

  export type NestedIntNullableFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableFilter<$PrismaModel> | number | null
  }

  export type NestedIntNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: number | IntFieldRefInput<$PrismaModel> | null
    in?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListIntFieldRefInput<$PrismaModel> | null
    lt?: number | IntFieldRefInput<$PrismaModel>
    lte?: number | IntFieldRefInput<$PrismaModel>
    gt?: number | IntFieldRefInput<$PrismaModel>
    gte?: number | IntFieldRefInput<$PrismaModel>
    not?: NestedIntNullableWithAggregatesFilter<$PrismaModel> | number | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _avg?: NestedFloatNullableFilter<$PrismaModel>
    _sum?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedIntNullableFilter<$PrismaModel>
    _max?: NestedIntNullableFilter<$PrismaModel>
  }

  export type NestedFloatNullableFilter<$PrismaModel = never> = {
    equals?: number | FloatFieldRefInput<$PrismaModel> | null
    in?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    notIn?: number[] | ListFloatFieldRefInput<$PrismaModel> | null
    lt?: number | FloatFieldRefInput<$PrismaModel>
    lte?: number | FloatFieldRefInput<$PrismaModel>
    gt?: number | FloatFieldRefInput<$PrismaModel>
    gte?: number | FloatFieldRefInput<$PrismaModel>
    not?: NestedFloatNullableFilter<$PrismaModel> | number | null
  }

  export type NestedStringNullableFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableFilter<$PrismaModel> | string | null
  }

  export type NestedStringNullableWithAggregatesFilter<$PrismaModel = never> = {
    equals?: string | StringFieldRefInput<$PrismaModel> | null
    in?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    notIn?: string[] | ListStringFieldRefInput<$PrismaModel> | null
    lt?: string | StringFieldRefInput<$PrismaModel>
    lte?: string | StringFieldRefInput<$PrismaModel>
    gt?: string | StringFieldRefInput<$PrismaModel>
    gte?: string | StringFieldRefInput<$PrismaModel>
    contains?: string | StringFieldRefInput<$PrismaModel>
    startsWith?: string | StringFieldRefInput<$PrismaModel>
    endsWith?: string | StringFieldRefInput<$PrismaModel>
    not?: NestedStringNullableWithAggregatesFilter<$PrismaModel> | string | null
    _count?: NestedIntNullableFilter<$PrismaModel>
    _min?: NestedStringNullableFilter<$PrismaModel>
    _max?: NestedStringNullableFilter<$PrismaModel>
  }

  export type NestedBigIntFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntFilter<$PrismaModel> | bigint | number
  }

  export type NestedBigIntWithAggregatesFilter<$PrismaModel = never> = {
    equals?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    in?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    notIn?: bigint[] | number[] | ListBigIntFieldRefInput<$PrismaModel>
    lt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    lte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gt?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    gte?: bigint | number | BigIntFieldRefInput<$PrismaModel>
    not?: NestedBigIntWithAggregatesFilter<$PrismaModel> | bigint | number
    _count?: NestedIntFilter<$PrismaModel>
    _avg?: NestedFloatFilter<$PrismaModel>
    _sum?: NestedBigIntFilter<$PrismaModel>
    _min?: NestedBigIntFilter<$PrismaModel>
    _max?: NestedBigIntFilter<$PrismaModel>
  }

  export type AvisCreateWithoutUserInput = {
    comment?: string | null
    film: FilmCreateNestedOneWithoutAvisInput
    serie: SerieCreateNestedOneWithoutAvisInput
  }

  export type AvisUncheckedCreateWithoutUserInput = {
    idAvis?: number
    filmId: number
    serieId: number
    comment?: string | null
  }

  export type AvisCreateOrConnectWithoutUserInput = {
    where: AvisWhereUniqueInput
    create: XOR<AvisCreateWithoutUserInput, AvisUncheckedCreateWithoutUserInput>
  }

  export type AvisCreateManyUserInputEnvelope = {
    data: AvisCreateManyUserInput | AvisCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FilmCreateWithoutUserInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutFilmInput
    Avis?: AvisCreateNestedManyWithoutFilmInput
    Favoris?: FavorisCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueCreateNestedManyWithoutFilmInput
  }

  export type FilmUncheckedCreateWithoutUserInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutFilmInput
    Avis?: AvisUncheckedCreateNestedManyWithoutFilmInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutFilmInput
  }

  export type FilmCreateOrConnectWithoutUserInput = {
    where: FilmWhereUniqueInput
    create: XOR<FilmCreateWithoutUserInput, FilmUncheckedCreateWithoutUserInput>
  }

  export type FilmCreateManyUserInputEnvelope = {
    data: FilmCreateManyUserInput | FilmCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type SerieCreateWithoutUserInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutSerieInput
    Avis?: AvisCreateNestedManyWithoutSerieInput
    Favoris?: FavorisCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueCreateNestedManyWithoutSerieInput
  }

  export type SerieUncheckedCreateWithoutUserInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutSerieInput
    Avis?: AvisUncheckedCreateNestedManyWithoutSerieInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutSerieInput
  }

  export type SerieCreateOrConnectWithoutUserInput = {
    where: SerieWhereUniqueInput
    create: XOR<SerieCreateWithoutUserInput, SerieUncheckedCreateWithoutUserInput>
  }

  export type SerieCreateManyUserInputEnvelope = {
    data: SerieCreateManyUserInput | SerieCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type TelechargementCreateWithoutUserInput = {
    date: Date | string
    qualiteVideo: string
    film: FilmCreateNestedOneWithoutTelechargementInput
    serie: SerieCreateNestedOneWithoutTelechargementInput
  }

  export type TelechargementUncheckedCreateWithoutUserInput = {
    id?: number
    date: Date | string
    filmId: number
    serieId: number
    qualiteVideo: string
  }

  export type TelechargementCreateOrConnectWithoutUserInput = {
    where: TelechargementWhereUniqueInput
    create: XOR<TelechargementCreateWithoutUserInput, TelechargementUncheckedCreateWithoutUserInput>
  }

  export type TelechargementCreateManyUserInputEnvelope = {
    data: TelechargementCreateManyUserInput | TelechargementCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type FavorisCreateWithoutUserInput = {
    idFavoris?: bigint | number
    film: FilmCreateNestedOneWithoutFavorisInput
    serie: SerieCreateNestedOneWithoutFavorisInput
  }

  export type FavorisUncheckedCreateWithoutUserInput = {
    idFavoris?: bigint | number
    filmId: number
    serieId: number
  }

  export type FavorisCreateOrConnectWithoutUserInput = {
    where: FavorisWhereUniqueInput
    create: XOR<FavorisCreateWithoutUserInput, FavorisUncheckedCreateWithoutUserInput>
  }

  export type FavorisCreateManyUserInputEnvelope = {
    data: FavorisCreateManyUserInput | FavorisCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type HistoriqueCreateWithoutUserInput = {
    idHistorique?: bigint | number
    dateDeVisuaisation: Date | string
    film: FilmCreateNestedOneWithoutHistoriqueInput
    serie: SerieCreateNestedOneWithoutHistoriqueInput
  }

  export type HistoriqueUncheckedCreateWithoutUserInput = {
    idHistorique?: bigint | number
    filmId: number
    serieId: number
    dateDeVisuaisation: Date | string
  }

  export type HistoriqueCreateOrConnectWithoutUserInput = {
    where: HistoriqueWhereUniqueInput
    create: XOR<HistoriqueCreateWithoutUserInput, HistoriqueUncheckedCreateWithoutUserInput>
  }

  export type HistoriqueCreateManyUserInputEnvelope = {
    data: HistoriqueCreateManyUserInput | HistoriqueCreateManyUserInput[]
    skipDuplicates?: boolean
  }

  export type AvisUpsertWithWhereUniqueWithoutUserInput = {
    where: AvisWhereUniqueInput
    update: XOR<AvisUpdateWithoutUserInput, AvisUncheckedUpdateWithoutUserInput>
    create: XOR<AvisCreateWithoutUserInput, AvisUncheckedCreateWithoutUserInput>
  }

  export type AvisUpdateWithWhereUniqueWithoutUserInput = {
    where: AvisWhereUniqueInput
    data: XOR<AvisUpdateWithoutUserInput, AvisUncheckedUpdateWithoutUserInput>
  }

  export type AvisUpdateManyWithWhereWithoutUserInput = {
    where: AvisScalarWhereInput
    data: XOR<AvisUpdateManyMutationInput, AvisUncheckedUpdateManyWithoutUserInput>
  }

  export type AvisScalarWhereInput = {
    AND?: AvisScalarWhereInput | AvisScalarWhereInput[]
    OR?: AvisScalarWhereInput[]
    NOT?: AvisScalarWhereInput | AvisScalarWhereInput[]
    idAvis?: IntFilter<"Avis"> | number
    userId?: IntFilter<"Avis"> | number
    filmId?: IntFilter<"Avis"> | number
    serieId?: IntFilter<"Avis"> | number
    comment?: StringNullableFilter<"Avis"> | string | null
  }

  export type FilmUpsertWithWhereUniqueWithoutUserInput = {
    where: FilmWhereUniqueInput
    update: XOR<FilmUpdateWithoutUserInput, FilmUncheckedUpdateWithoutUserInput>
    create: XOR<FilmCreateWithoutUserInput, FilmUncheckedCreateWithoutUserInput>
  }

  export type FilmUpdateWithWhereUniqueWithoutUserInput = {
    where: FilmWhereUniqueInput
    data: XOR<FilmUpdateWithoutUserInput, FilmUncheckedUpdateWithoutUserInput>
  }

  export type FilmUpdateManyWithWhereWithoutUserInput = {
    where: FilmScalarWhereInput
    data: XOR<FilmUpdateManyMutationInput, FilmUncheckedUpdateManyWithoutUserInput>
  }

  export type FilmScalarWhereInput = {
    AND?: FilmScalarWhereInput | FilmScalarWhereInput[]
    OR?: FilmScalarWhereInput[]
    NOT?: FilmScalarWhereInput | FilmScalarWhereInput[]
    idFilm?: IntFilter<"Film"> | number
    titre?: StringFilter<"Film"> | string
    realisateur?: StringFilter<"Film"> | string
    anneeDeSortie?: IntFilter<"Film"> | number
    description?: StringFilter<"Film"> | string
    acteur?: StringFilter<"Film"> | string
    dureeMoyenneParEpisode?: FloatFilter<"Film"> | number
    urlDeStreaming?: StringFilter<"Film"> | string
    urlDeTelechargement?: StringFilter<"Film"> | string
    userId?: IntFilter<"Film"> | number
  }

  export type SerieUpsertWithWhereUniqueWithoutUserInput = {
    where: SerieWhereUniqueInput
    update: XOR<SerieUpdateWithoutUserInput, SerieUncheckedUpdateWithoutUserInput>
    create: XOR<SerieCreateWithoutUserInput, SerieUncheckedCreateWithoutUserInput>
  }

  export type SerieUpdateWithWhereUniqueWithoutUserInput = {
    where: SerieWhereUniqueInput
    data: XOR<SerieUpdateWithoutUserInput, SerieUncheckedUpdateWithoutUserInput>
  }

  export type SerieUpdateManyWithWhereWithoutUserInput = {
    where: SerieScalarWhereInput
    data: XOR<SerieUpdateManyMutationInput, SerieUncheckedUpdateManyWithoutUserInput>
  }

  export type SerieScalarWhereInput = {
    AND?: SerieScalarWhereInput | SerieScalarWhereInput[]
    OR?: SerieScalarWhereInput[]
    NOT?: SerieScalarWhereInput | SerieScalarWhereInput[]
    idSerie?: IntFilter<"Serie"> | number
    titre?: StringFilter<"Serie"> | string
    realisateur?: StringFilter<"Serie"> | string
    anneeDeSortie?: IntFilter<"Serie"> | number
    description?: StringFilter<"Serie"> | string
    acteur?: StringFilter<"Serie"> | string
    dureeMoyenneParEpisode?: FloatFilter<"Serie"> | number
    urlDeStreaming?: StringFilter<"Serie"> | string
    urlDeTelechargement?: StringFilter<"Serie"> | string
    userId?: IntFilter<"Serie"> | number
  }

  export type TelechargementUpsertWithWhereUniqueWithoutUserInput = {
    where: TelechargementWhereUniqueInput
    update: XOR<TelechargementUpdateWithoutUserInput, TelechargementUncheckedUpdateWithoutUserInput>
    create: XOR<TelechargementCreateWithoutUserInput, TelechargementUncheckedCreateWithoutUserInput>
  }

  export type TelechargementUpdateWithWhereUniqueWithoutUserInput = {
    where: TelechargementWhereUniqueInput
    data: XOR<TelechargementUpdateWithoutUserInput, TelechargementUncheckedUpdateWithoutUserInput>
  }

  export type TelechargementUpdateManyWithWhereWithoutUserInput = {
    where: TelechargementScalarWhereInput
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyWithoutUserInput>
  }

  export type TelechargementScalarWhereInput = {
    AND?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
    OR?: TelechargementScalarWhereInput[]
    NOT?: TelechargementScalarWhereInput | TelechargementScalarWhereInput[]
    id?: IntFilter<"Telechargement"> | number
    date?: DateTimeFilter<"Telechargement"> | Date | string
    filmId?: IntFilter<"Telechargement"> | number
    serieId?: IntFilter<"Telechargement"> | number
    qualiteVideo?: StringFilter<"Telechargement"> | string
    userIdUser?: IntNullableFilter<"Telechargement"> | number | null
  }

  export type FavorisUpsertWithWhereUniqueWithoutUserInput = {
    where: FavorisWhereUniqueInput
    update: XOR<FavorisUpdateWithoutUserInput, FavorisUncheckedUpdateWithoutUserInput>
    create: XOR<FavorisCreateWithoutUserInput, FavorisUncheckedCreateWithoutUserInput>
  }

  export type FavorisUpdateWithWhereUniqueWithoutUserInput = {
    where: FavorisWhereUniqueInput
    data: XOR<FavorisUpdateWithoutUserInput, FavorisUncheckedUpdateWithoutUserInput>
  }

  export type FavorisUpdateManyWithWhereWithoutUserInput = {
    where: FavorisScalarWhereInput
    data: XOR<FavorisUpdateManyMutationInput, FavorisUncheckedUpdateManyWithoutUserInput>
  }

  export type FavorisScalarWhereInput = {
    AND?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
    OR?: FavorisScalarWhereInput[]
    NOT?: FavorisScalarWhereInput | FavorisScalarWhereInput[]
    idFavoris?: BigIntFilter<"Favoris"> | bigint | number
    userId?: IntFilter<"Favoris"> | number
    filmId?: IntFilter<"Favoris"> | number
    serieId?: IntFilter<"Favoris"> | number
  }

  export type HistoriqueUpsertWithWhereUniqueWithoutUserInput = {
    where: HistoriqueWhereUniqueInput
    update: XOR<HistoriqueUpdateWithoutUserInput, HistoriqueUncheckedUpdateWithoutUserInput>
    create: XOR<HistoriqueCreateWithoutUserInput, HistoriqueUncheckedCreateWithoutUserInput>
  }

  export type HistoriqueUpdateWithWhereUniqueWithoutUserInput = {
    where: HistoriqueWhereUniqueInput
    data: XOR<HistoriqueUpdateWithoutUserInput, HistoriqueUncheckedUpdateWithoutUserInput>
  }

  export type HistoriqueUpdateManyWithWhereWithoutUserInput = {
    where: HistoriqueScalarWhereInput
    data: XOR<HistoriqueUpdateManyMutationInput, HistoriqueUncheckedUpdateManyWithoutUserInput>
  }

  export type HistoriqueScalarWhereInput = {
    AND?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
    OR?: HistoriqueScalarWhereInput[]
    NOT?: HistoriqueScalarWhereInput | HistoriqueScalarWhereInput[]
    idHistorique?: BigIntFilter<"Historique"> | bigint | number
    userId?: IntFilter<"Historique"> | number
    filmId?: IntFilter<"Historique"> | number
    serieId?: IntFilter<"Historique"> | number
    dateDeVisuaisation?: DateTimeFilter<"Historique"> | Date | string
  }

  export type TelechargementCreateWithoutFilmInput = {
    date: Date | string
    qualiteVideo: string
    serie: SerieCreateNestedOneWithoutTelechargementInput
    User?: UserCreateNestedOneWithoutTelechargementInput
  }

  export type TelechargementUncheckedCreateWithoutFilmInput = {
    id?: number
    date: Date | string
    serieId: number
    qualiteVideo: string
    userIdUser?: number | null
  }

  export type TelechargementCreateOrConnectWithoutFilmInput = {
    where: TelechargementWhereUniqueInput
    create: XOR<TelechargementCreateWithoutFilmInput, TelechargementUncheckedCreateWithoutFilmInput>
  }

  export type TelechargementCreateManyFilmInputEnvelope = {
    data: TelechargementCreateManyFilmInput | TelechargementCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutFilmInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisCreateNestedManyWithoutUserInput
    serie?: SerieCreateNestedManyWithoutUserInput
    telechargement?: TelechargementCreateNestedManyWithoutUserInput
    favoris?: FavorisCreateNestedManyWithoutUserInput
    historique?: HistoriqueCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFilmInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisUncheckedCreateNestedManyWithoutUserInput
    serie?: SerieUncheckedCreateNestedManyWithoutUserInput
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutUserInput
    favoris?: FavorisUncheckedCreateNestedManyWithoutUserInput
    historique?: HistoriqueUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFilmInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFilmInput, UserUncheckedCreateWithoutFilmInput>
  }

  export type AvisCreateWithoutFilmInput = {
    comment?: string | null
    user: UserCreateNestedOneWithoutAvisInput
    serie: SerieCreateNestedOneWithoutAvisInput
  }

  export type AvisUncheckedCreateWithoutFilmInput = {
    idAvis?: number
    userId: number
    serieId: number
    comment?: string | null
  }

  export type AvisCreateOrConnectWithoutFilmInput = {
    where: AvisWhereUniqueInput
    create: XOR<AvisCreateWithoutFilmInput, AvisUncheckedCreateWithoutFilmInput>
  }

  export type AvisCreateManyFilmInputEnvelope = {
    data: AvisCreateManyFilmInput | AvisCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type FavorisCreateWithoutFilmInput = {
    idFavoris?: bigint | number
    user: UserCreateNestedOneWithoutFavorisInput
    serie: SerieCreateNestedOneWithoutFavorisInput
  }

  export type FavorisUncheckedCreateWithoutFilmInput = {
    idFavoris?: bigint | number
    userId: number
    serieId: number
  }

  export type FavorisCreateOrConnectWithoutFilmInput = {
    where: FavorisWhereUniqueInput
    create: XOR<FavorisCreateWithoutFilmInput, FavorisUncheckedCreateWithoutFilmInput>
  }

  export type FavorisCreateManyFilmInputEnvelope = {
    data: FavorisCreateManyFilmInput | FavorisCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type HistoriqueCreateWithoutFilmInput = {
    idHistorique?: bigint | number
    dateDeVisuaisation: Date | string
    user: UserCreateNestedOneWithoutHistoriqueInput
    serie: SerieCreateNestedOneWithoutHistoriqueInput
  }

  export type HistoriqueUncheckedCreateWithoutFilmInput = {
    idHistorique?: bigint | number
    userId: number
    serieId: number
    dateDeVisuaisation: Date | string
  }

  export type HistoriqueCreateOrConnectWithoutFilmInput = {
    where: HistoriqueWhereUniqueInput
    create: XOR<HistoriqueCreateWithoutFilmInput, HistoriqueUncheckedCreateWithoutFilmInput>
  }

  export type HistoriqueCreateManyFilmInputEnvelope = {
    data: HistoriqueCreateManyFilmInput | HistoriqueCreateManyFilmInput[]
    skipDuplicates?: boolean
  }

  export type TelechargementUpsertWithWhereUniqueWithoutFilmInput = {
    where: TelechargementWhereUniqueInput
    update: XOR<TelechargementUpdateWithoutFilmInput, TelechargementUncheckedUpdateWithoutFilmInput>
    create: XOR<TelechargementCreateWithoutFilmInput, TelechargementUncheckedCreateWithoutFilmInput>
  }

  export type TelechargementUpdateWithWhereUniqueWithoutFilmInput = {
    where: TelechargementWhereUniqueInput
    data: XOR<TelechargementUpdateWithoutFilmInput, TelechargementUncheckedUpdateWithoutFilmInput>
  }

  export type TelechargementUpdateManyWithWhereWithoutFilmInput = {
    where: TelechargementScalarWhereInput
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyWithoutFilmInput>
  }

  export type UserUpsertWithoutFilmInput = {
    update: XOR<UserUpdateWithoutFilmInput, UserUncheckedUpdateWithoutFilmInput>
    create: XOR<UserCreateWithoutFilmInput, UserUncheckedCreateWithoutFilmInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFilmInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFilmInput, UserUncheckedUpdateWithoutFilmInput>
  }

  export type UserUpdateWithoutFilmInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUpdateManyWithoutUserNestedInput
    serie?: SerieUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUpdateManyWithoutUserNestedInput
    favoris?: FavorisUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFilmInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUncheckedUpdateManyWithoutUserNestedInput
    serie?: SerieUncheckedUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUncheckedUpdateManyWithoutUserNestedInput
    favoris?: FavorisUncheckedUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AvisUpsertWithWhereUniqueWithoutFilmInput = {
    where: AvisWhereUniqueInput
    update: XOR<AvisUpdateWithoutFilmInput, AvisUncheckedUpdateWithoutFilmInput>
    create: XOR<AvisCreateWithoutFilmInput, AvisUncheckedCreateWithoutFilmInput>
  }

  export type AvisUpdateWithWhereUniqueWithoutFilmInput = {
    where: AvisWhereUniqueInput
    data: XOR<AvisUpdateWithoutFilmInput, AvisUncheckedUpdateWithoutFilmInput>
  }

  export type AvisUpdateManyWithWhereWithoutFilmInput = {
    where: AvisScalarWhereInput
    data: XOR<AvisUpdateManyMutationInput, AvisUncheckedUpdateManyWithoutFilmInput>
  }

  export type FavorisUpsertWithWhereUniqueWithoutFilmInput = {
    where: FavorisWhereUniqueInput
    update: XOR<FavorisUpdateWithoutFilmInput, FavorisUncheckedUpdateWithoutFilmInput>
    create: XOR<FavorisCreateWithoutFilmInput, FavorisUncheckedCreateWithoutFilmInput>
  }

  export type FavorisUpdateWithWhereUniqueWithoutFilmInput = {
    where: FavorisWhereUniqueInput
    data: XOR<FavorisUpdateWithoutFilmInput, FavorisUncheckedUpdateWithoutFilmInput>
  }

  export type FavorisUpdateManyWithWhereWithoutFilmInput = {
    where: FavorisScalarWhereInput
    data: XOR<FavorisUpdateManyMutationInput, FavorisUncheckedUpdateManyWithoutFilmInput>
  }

  export type HistoriqueUpsertWithWhereUniqueWithoutFilmInput = {
    where: HistoriqueWhereUniqueInput
    update: XOR<HistoriqueUpdateWithoutFilmInput, HistoriqueUncheckedUpdateWithoutFilmInput>
    create: XOR<HistoriqueCreateWithoutFilmInput, HistoriqueUncheckedCreateWithoutFilmInput>
  }

  export type HistoriqueUpdateWithWhereUniqueWithoutFilmInput = {
    where: HistoriqueWhereUniqueInput
    data: XOR<HistoriqueUpdateWithoutFilmInput, HistoriqueUncheckedUpdateWithoutFilmInput>
  }

  export type HistoriqueUpdateManyWithWhereWithoutFilmInput = {
    where: HistoriqueScalarWhereInput
    data: XOR<HistoriqueUpdateManyMutationInput, HistoriqueUncheckedUpdateManyWithoutFilmInput>
  }

  export type TelechargementCreateWithoutSerieInput = {
    date: Date | string
    qualiteVideo: string
    film: FilmCreateNestedOneWithoutTelechargementInput
    User?: UserCreateNestedOneWithoutTelechargementInput
  }

  export type TelechargementUncheckedCreateWithoutSerieInput = {
    id?: number
    date: Date | string
    filmId: number
    qualiteVideo: string
    userIdUser?: number | null
  }

  export type TelechargementCreateOrConnectWithoutSerieInput = {
    where: TelechargementWhereUniqueInput
    create: XOR<TelechargementCreateWithoutSerieInput, TelechargementUncheckedCreateWithoutSerieInput>
  }

  export type TelechargementCreateManySerieInputEnvelope = {
    data: TelechargementCreateManySerieInput | TelechargementCreateManySerieInput[]
    skipDuplicates?: boolean
  }

  export type UserCreateWithoutSerieInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisCreateNestedManyWithoutUserInput
    film?: FilmCreateNestedManyWithoutUserInput
    telechargement?: TelechargementCreateNestedManyWithoutUserInput
    favoris?: FavorisCreateNestedManyWithoutUserInput
    historique?: HistoriqueCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutSerieInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisUncheckedCreateNestedManyWithoutUserInput
    film?: FilmUncheckedCreateNestedManyWithoutUserInput
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutUserInput
    favoris?: FavorisUncheckedCreateNestedManyWithoutUserInput
    historique?: HistoriqueUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutSerieInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutSerieInput, UserUncheckedCreateWithoutSerieInput>
  }

  export type AvisCreateWithoutSerieInput = {
    comment?: string | null
    user: UserCreateNestedOneWithoutAvisInput
    film: FilmCreateNestedOneWithoutAvisInput
  }

  export type AvisUncheckedCreateWithoutSerieInput = {
    idAvis?: number
    userId: number
    filmId: number
    comment?: string | null
  }

  export type AvisCreateOrConnectWithoutSerieInput = {
    where: AvisWhereUniqueInput
    create: XOR<AvisCreateWithoutSerieInput, AvisUncheckedCreateWithoutSerieInput>
  }

  export type AvisCreateManySerieInputEnvelope = {
    data: AvisCreateManySerieInput | AvisCreateManySerieInput[]
    skipDuplicates?: boolean
  }

  export type FavorisCreateWithoutSerieInput = {
    idFavoris?: bigint | number
    user: UserCreateNestedOneWithoutFavorisInput
    film: FilmCreateNestedOneWithoutFavorisInput
  }

  export type FavorisUncheckedCreateWithoutSerieInput = {
    idFavoris?: bigint | number
    userId: number
    filmId: number
  }

  export type FavorisCreateOrConnectWithoutSerieInput = {
    where: FavorisWhereUniqueInput
    create: XOR<FavorisCreateWithoutSerieInput, FavorisUncheckedCreateWithoutSerieInput>
  }

  export type FavorisCreateManySerieInputEnvelope = {
    data: FavorisCreateManySerieInput | FavorisCreateManySerieInput[]
    skipDuplicates?: boolean
  }

  export type HistoriqueCreateWithoutSerieInput = {
    idHistorique?: bigint | number
    dateDeVisuaisation: Date | string
    user: UserCreateNestedOneWithoutHistoriqueInput
    film: FilmCreateNestedOneWithoutHistoriqueInput
  }

  export type HistoriqueUncheckedCreateWithoutSerieInput = {
    idHistorique?: bigint | number
    userId: number
    filmId: number
    dateDeVisuaisation: Date | string
  }

  export type HistoriqueCreateOrConnectWithoutSerieInput = {
    where: HistoriqueWhereUniqueInput
    create: XOR<HistoriqueCreateWithoutSerieInput, HistoriqueUncheckedCreateWithoutSerieInput>
  }

  export type HistoriqueCreateManySerieInputEnvelope = {
    data: HistoriqueCreateManySerieInput | HistoriqueCreateManySerieInput[]
    skipDuplicates?: boolean
  }

  export type TelechargementUpsertWithWhereUniqueWithoutSerieInput = {
    where: TelechargementWhereUniqueInput
    update: XOR<TelechargementUpdateWithoutSerieInput, TelechargementUncheckedUpdateWithoutSerieInput>
    create: XOR<TelechargementCreateWithoutSerieInput, TelechargementUncheckedCreateWithoutSerieInput>
  }

  export type TelechargementUpdateWithWhereUniqueWithoutSerieInput = {
    where: TelechargementWhereUniqueInput
    data: XOR<TelechargementUpdateWithoutSerieInput, TelechargementUncheckedUpdateWithoutSerieInput>
  }

  export type TelechargementUpdateManyWithWhereWithoutSerieInput = {
    where: TelechargementScalarWhereInput
    data: XOR<TelechargementUpdateManyMutationInput, TelechargementUncheckedUpdateManyWithoutSerieInput>
  }

  export type UserUpsertWithoutSerieInput = {
    update: XOR<UserUpdateWithoutSerieInput, UserUncheckedUpdateWithoutSerieInput>
    create: XOR<UserCreateWithoutSerieInput, UserUncheckedCreateWithoutSerieInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutSerieInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutSerieInput, UserUncheckedUpdateWithoutSerieInput>
  }

  export type UserUpdateWithoutSerieInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUpdateManyWithoutUserNestedInput
    film?: FilmUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUpdateManyWithoutUserNestedInput
    favoris?: FavorisUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutSerieInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUncheckedUpdateManyWithoutUserNestedInput
    film?: FilmUncheckedUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUncheckedUpdateManyWithoutUserNestedInput
    favoris?: FavorisUncheckedUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type AvisUpsertWithWhereUniqueWithoutSerieInput = {
    where: AvisWhereUniqueInput
    update: XOR<AvisUpdateWithoutSerieInput, AvisUncheckedUpdateWithoutSerieInput>
    create: XOR<AvisCreateWithoutSerieInput, AvisUncheckedCreateWithoutSerieInput>
  }

  export type AvisUpdateWithWhereUniqueWithoutSerieInput = {
    where: AvisWhereUniqueInput
    data: XOR<AvisUpdateWithoutSerieInput, AvisUncheckedUpdateWithoutSerieInput>
  }

  export type AvisUpdateManyWithWhereWithoutSerieInput = {
    where: AvisScalarWhereInput
    data: XOR<AvisUpdateManyMutationInput, AvisUncheckedUpdateManyWithoutSerieInput>
  }

  export type FavorisUpsertWithWhereUniqueWithoutSerieInput = {
    where: FavorisWhereUniqueInput
    update: XOR<FavorisUpdateWithoutSerieInput, FavorisUncheckedUpdateWithoutSerieInput>
    create: XOR<FavorisCreateWithoutSerieInput, FavorisUncheckedCreateWithoutSerieInput>
  }

  export type FavorisUpdateWithWhereUniqueWithoutSerieInput = {
    where: FavorisWhereUniqueInput
    data: XOR<FavorisUpdateWithoutSerieInput, FavorisUncheckedUpdateWithoutSerieInput>
  }

  export type FavorisUpdateManyWithWhereWithoutSerieInput = {
    where: FavorisScalarWhereInput
    data: XOR<FavorisUpdateManyMutationInput, FavorisUncheckedUpdateManyWithoutSerieInput>
  }

  export type HistoriqueUpsertWithWhereUniqueWithoutSerieInput = {
    where: HistoriqueWhereUniqueInput
    update: XOR<HistoriqueUpdateWithoutSerieInput, HistoriqueUncheckedUpdateWithoutSerieInput>
    create: XOR<HistoriqueCreateWithoutSerieInput, HistoriqueUncheckedCreateWithoutSerieInput>
  }

  export type HistoriqueUpdateWithWhereUniqueWithoutSerieInput = {
    where: HistoriqueWhereUniqueInput
    data: XOR<HistoriqueUpdateWithoutSerieInput, HistoriqueUncheckedUpdateWithoutSerieInput>
  }

  export type HistoriqueUpdateManyWithWhereWithoutSerieInput = {
    where: HistoriqueScalarWhereInput
    data: XOR<HistoriqueUpdateManyMutationInput, HistoriqueUncheckedUpdateManyWithoutSerieInput>
  }

  export type FilmCreateWithoutTelechargementInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    user: UserCreateNestedOneWithoutFilmInput
    Avis?: AvisCreateNestedManyWithoutFilmInput
    Favoris?: FavorisCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueCreateNestedManyWithoutFilmInput
  }

  export type FilmUncheckedCreateWithoutTelechargementInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    Avis?: AvisUncheckedCreateNestedManyWithoutFilmInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutFilmInput
  }

  export type FilmCreateOrConnectWithoutTelechargementInput = {
    where: FilmWhereUniqueInput
    create: XOR<FilmCreateWithoutTelechargementInput, FilmUncheckedCreateWithoutTelechargementInput>
  }

  export type SerieCreateWithoutTelechargementInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    user: UserCreateNestedOneWithoutSerieInput
    Avis?: AvisCreateNestedManyWithoutSerieInput
    Favoris?: FavorisCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueCreateNestedManyWithoutSerieInput
  }

  export type SerieUncheckedCreateWithoutTelechargementInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    Avis?: AvisUncheckedCreateNestedManyWithoutSerieInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutSerieInput
  }

  export type SerieCreateOrConnectWithoutTelechargementInput = {
    where: SerieWhereUniqueInput
    create: XOR<SerieCreateWithoutTelechargementInput, SerieUncheckedCreateWithoutTelechargementInput>
  }

  export type UserCreateWithoutTelechargementInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisCreateNestedManyWithoutUserInput
    film?: FilmCreateNestedManyWithoutUserInput
    serie?: SerieCreateNestedManyWithoutUserInput
    favoris?: FavorisCreateNestedManyWithoutUserInput
    historique?: HistoriqueCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutTelechargementInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisUncheckedCreateNestedManyWithoutUserInput
    film?: FilmUncheckedCreateNestedManyWithoutUserInput
    serie?: SerieUncheckedCreateNestedManyWithoutUserInput
    favoris?: FavorisUncheckedCreateNestedManyWithoutUserInput
    historique?: HistoriqueUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutTelechargementInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutTelechargementInput, UserUncheckedCreateWithoutTelechargementInput>
  }

  export type FilmUpsertWithoutTelechargementInput = {
    update: XOR<FilmUpdateWithoutTelechargementInput, FilmUncheckedUpdateWithoutTelechargementInput>
    create: XOR<FilmCreateWithoutTelechargementInput, FilmUncheckedCreateWithoutTelechargementInput>
    where?: FilmWhereInput
  }

  export type FilmUpdateToOneWithWhereWithoutTelechargementInput = {
    where?: FilmWhereInput
    data: XOR<FilmUpdateWithoutTelechargementInput, FilmUncheckedUpdateWithoutTelechargementInput>
  }

  export type FilmUpdateWithoutTelechargementInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutFilmNestedInput
    Avis?: AvisUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateWithoutTelechargementInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    Avis?: AvisUncheckedUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type SerieUpsertWithoutTelechargementInput = {
    update: XOR<SerieUpdateWithoutTelechargementInput, SerieUncheckedUpdateWithoutTelechargementInput>
    create: XOR<SerieCreateWithoutTelechargementInput, SerieUncheckedCreateWithoutTelechargementInput>
    where?: SerieWhereInput
  }

  export type SerieUpdateToOneWithWhereWithoutTelechargementInput = {
    where?: SerieWhereInput
    data: XOR<SerieUpdateWithoutTelechargementInput, SerieUncheckedUpdateWithoutTelechargementInput>
  }

  export type SerieUpdateWithoutTelechargementInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    user?: UserUpdateOneRequiredWithoutSerieNestedInput
    Avis?: AvisUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateWithoutTelechargementInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    Avis?: AvisUncheckedUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutSerieNestedInput
  }

  export type UserUpsertWithoutTelechargementInput = {
    update: XOR<UserUpdateWithoutTelechargementInput, UserUncheckedUpdateWithoutTelechargementInput>
    create: XOR<UserCreateWithoutTelechargementInput, UserUncheckedCreateWithoutTelechargementInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutTelechargementInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutTelechargementInput, UserUncheckedUpdateWithoutTelechargementInput>
  }

  export type UserUpdateWithoutTelechargementInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUpdateManyWithoutUserNestedInput
    film?: FilmUpdateManyWithoutUserNestedInput
    serie?: SerieUpdateManyWithoutUserNestedInput
    favoris?: FavorisUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutTelechargementInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUncheckedUpdateManyWithoutUserNestedInput
    film?: FilmUncheckedUpdateManyWithoutUserNestedInput
    serie?: SerieUncheckedUpdateManyWithoutUserNestedInput
    favoris?: FavorisUncheckedUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type UserCreateWithoutAvisInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    film?: FilmCreateNestedManyWithoutUserInput
    serie?: SerieCreateNestedManyWithoutUserInput
    telechargement?: TelechargementCreateNestedManyWithoutUserInput
    favoris?: FavorisCreateNestedManyWithoutUserInput
    historique?: HistoriqueCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutAvisInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    film?: FilmUncheckedCreateNestedManyWithoutUserInput
    serie?: SerieUncheckedCreateNestedManyWithoutUserInput
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutUserInput
    favoris?: FavorisUncheckedCreateNestedManyWithoutUserInput
    historique?: HistoriqueUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutAvisInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutAvisInput, UserUncheckedCreateWithoutAvisInput>
  }

  export type FilmCreateWithoutAvisInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutFilmInput
    user: UserCreateNestedOneWithoutFilmInput
    Favoris?: FavorisCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueCreateNestedManyWithoutFilmInput
  }

  export type FilmUncheckedCreateWithoutAvisInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutFilmInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutFilmInput
  }

  export type FilmCreateOrConnectWithoutAvisInput = {
    where: FilmWhereUniqueInput
    create: XOR<FilmCreateWithoutAvisInput, FilmUncheckedCreateWithoutAvisInput>
  }

  export type SerieCreateWithoutAvisInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutSerieInput
    user: UserCreateNestedOneWithoutSerieInput
    Favoris?: FavorisCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueCreateNestedManyWithoutSerieInput
  }

  export type SerieUncheckedCreateWithoutAvisInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutSerieInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutSerieInput
  }

  export type SerieCreateOrConnectWithoutAvisInput = {
    where: SerieWhereUniqueInput
    create: XOR<SerieCreateWithoutAvisInput, SerieUncheckedCreateWithoutAvisInput>
  }

  export type UserUpsertWithoutAvisInput = {
    update: XOR<UserUpdateWithoutAvisInput, UserUncheckedUpdateWithoutAvisInput>
    create: XOR<UserCreateWithoutAvisInput, UserUncheckedCreateWithoutAvisInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutAvisInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutAvisInput, UserUncheckedUpdateWithoutAvisInput>
  }

  export type UserUpdateWithoutAvisInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    film?: FilmUpdateManyWithoutUserNestedInput
    serie?: SerieUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUpdateManyWithoutUserNestedInput
    favoris?: FavorisUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutAvisInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    film?: FilmUncheckedUpdateManyWithoutUserNestedInput
    serie?: SerieUncheckedUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUncheckedUpdateManyWithoutUserNestedInput
    favoris?: FavorisUncheckedUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FilmUpsertWithoutAvisInput = {
    update: XOR<FilmUpdateWithoutAvisInput, FilmUncheckedUpdateWithoutAvisInput>
    create: XOR<FilmCreateWithoutAvisInput, FilmUncheckedCreateWithoutAvisInput>
    where?: FilmWhereInput
  }

  export type FilmUpdateToOneWithWhereWithoutAvisInput = {
    where?: FilmWhereInput
    data: XOR<FilmUpdateWithoutAvisInput, FilmUncheckedUpdateWithoutAvisInput>
  }

  export type FilmUpdateWithoutAvisInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutFilmNestedInput
    user?: UserUpdateOneRequiredWithoutFilmNestedInput
    Favoris?: FavorisUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateWithoutAvisInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type SerieUpsertWithoutAvisInput = {
    update: XOR<SerieUpdateWithoutAvisInput, SerieUncheckedUpdateWithoutAvisInput>
    create: XOR<SerieCreateWithoutAvisInput, SerieUncheckedCreateWithoutAvisInput>
    where?: SerieWhereInput
  }

  export type SerieUpdateToOneWithWhereWithoutAvisInput = {
    where?: SerieWhereInput
    data: XOR<SerieUpdateWithoutAvisInput, SerieUncheckedUpdateWithoutAvisInput>
  }

  export type SerieUpdateWithoutAvisInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutSerieNestedInput
    user?: UserUpdateOneRequiredWithoutSerieNestedInput
    Favoris?: FavorisUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateWithoutAvisInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutSerieNestedInput
  }

  export type UserCreateWithoutFavorisInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisCreateNestedManyWithoutUserInput
    film?: FilmCreateNestedManyWithoutUserInput
    serie?: SerieCreateNestedManyWithoutUserInput
    telechargement?: TelechargementCreateNestedManyWithoutUserInput
    historique?: HistoriqueCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutFavorisInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisUncheckedCreateNestedManyWithoutUserInput
    film?: FilmUncheckedCreateNestedManyWithoutUserInput
    serie?: SerieUncheckedCreateNestedManyWithoutUserInput
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutUserInput
    historique?: HistoriqueUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutFavorisInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutFavorisInput, UserUncheckedCreateWithoutFavorisInput>
  }

  export type FilmCreateWithoutFavorisInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutFilmInput
    user: UserCreateNestedOneWithoutFilmInput
    Avis?: AvisCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueCreateNestedManyWithoutFilmInput
  }

  export type FilmUncheckedCreateWithoutFavorisInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutFilmInput
    Avis?: AvisUncheckedCreateNestedManyWithoutFilmInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutFilmInput
  }

  export type FilmCreateOrConnectWithoutFavorisInput = {
    where: FilmWhereUniqueInput
    create: XOR<FilmCreateWithoutFavorisInput, FilmUncheckedCreateWithoutFavorisInput>
  }

  export type SerieCreateWithoutFavorisInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutSerieInput
    user: UserCreateNestedOneWithoutSerieInput
    Avis?: AvisCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueCreateNestedManyWithoutSerieInput
  }

  export type SerieUncheckedCreateWithoutFavorisInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutSerieInput
    Avis?: AvisUncheckedCreateNestedManyWithoutSerieInput
    Historique?: HistoriqueUncheckedCreateNestedManyWithoutSerieInput
  }

  export type SerieCreateOrConnectWithoutFavorisInput = {
    where: SerieWhereUniqueInput
    create: XOR<SerieCreateWithoutFavorisInput, SerieUncheckedCreateWithoutFavorisInput>
  }

  export type UserUpsertWithoutFavorisInput = {
    update: XOR<UserUpdateWithoutFavorisInput, UserUncheckedUpdateWithoutFavorisInput>
    create: XOR<UserCreateWithoutFavorisInput, UserUncheckedCreateWithoutFavorisInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutFavorisInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutFavorisInput, UserUncheckedUpdateWithoutFavorisInput>
  }

  export type UserUpdateWithoutFavorisInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUpdateManyWithoutUserNestedInput
    film?: FilmUpdateManyWithoutUserNestedInput
    serie?: SerieUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutFavorisInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUncheckedUpdateManyWithoutUserNestedInput
    film?: FilmUncheckedUpdateManyWithoutUserNestedInput
    serie?: SerieUncheckedUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUncheckedUpdateManyWithoutUserNestedInput
    historique?: HistoriqueUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FilmUpsertWithoutFavorisInput = {
    update: XOR<FilmUpdateWithoutFavorisInput, FilmUncheckedUpdateWithoutFavorisInput>
    create: XOR<FilmCreateWithoutFavorisInput, FilmUncheckedCreateWithoutFavorisInput>
    where?: FilmWhereInput
  }

  export type FilmUpdateToOneWithWhereWithoutFavorisInput = {
    where?: FilmWhereInput
    data: XOR<FilmUpdateWithoutFavorisInput, FilmUncheckedUpdateWithoutFavorisInput>
  }

  export type FilmUpdateWithoutFavorisInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutFilmNestedInput
    user?: UserUpdateOneRequiredWithoutFilmNestedInput
    Avis?: AvisUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateWithoutFavorisInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutFilmNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type SerieUpsertWithoutFavorisInput = {
    update: XOR<SerieUpdateWithoutFavorisInput, SerieUncheckedUpdateWithoutFavorisInput>
    create: XOR<SerieCreateWithoutFavorisInput, SerieUncheckedCreateWithoutFavorisInput>
    where?: SerieWhereInput
  }

  export type SerieUpdateToOneWithWhereWithoutFavorisInput = {
    where?: SerieWhereInput
    data: XOR<SerieUpdateWithoutFavorisInput, SerieUncheckedUpdateWithoutFavorisInput>
  }

  export type SerieUpdateWithoutFavorisInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutSerieNestedInput
    user?: UserUpdateOneRequiredWithoutSerieNestedInput
    Avis?: AvisUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateWithoutFavorisInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutSerieNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutSerieNestedInput
  }

  export type UserCreateWithoutHistoriqueInput = {
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisCreateNestedManyWithoutUserInput
    film?: FilmCreateNestedManyWithoutUserInput
    serie?: SerieCreateNestedManyWithoutUserInput
    telechargement?: TelechargementCreateNestedManyWithoutUserInput
    favoris?: FavorisCreateNestedManyWithoutUserInput
  }

  export type UserUncheckedCreateWithoutHistoriqueInput = {
    idUser?: number
    name: string
    postname: string
    email: string
    password: string
    dateDeNaissance: Date | string
    sexe: string
    pays: string
    avis?: AvisUncheckedCreateNestedManyWithoutUserInput
    film?: FilmUncheckedCreateNestedManyWithoutUserInput
    serie?: SerieUncheckedCreateNestedManyWithoutUserInput
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutUserInput
    favoris?: FavorisUncheckedCreateNestedManyWithoutUserInput
  }

  export type UserCreateOrConnectWithoutHistoriqueInput = {
    where: UserWhereUniqueInput
    create: XOR<UserCreateWithoutHistoriqueInput, UserUncheckedCreateWithoutHistoriqueInput>
  }

  export type FilmCreateWithoutHistoriqueInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutFilmInput
    user: UserCreateNestedOneWithoutFilmInput
    Avis?: AvisCreateNestedManyWithoutFilmInput
    Favoris?: FavorisCreateNestedManyWithoutFilmInput
  }

  export type FilmUncheckedCreateWithoutHistoriqueInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutFilmInput
    Avis?: AvisUncheckedCreateNestedManyWithoutFilmInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutFilmInput
  }

  export type FilmCreateOrConnectWithoutHistoriqueInput = {
    where: FilmWhereUniqueInput
    create: XOR<FilmCreateWithoutHistoriqueInput, FilmUncheckedCreateWithoutHistoriqueInput>
  }

  export type SerieCreateWithoutHistoriqueInput = {
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    telechargement?: TelechargementCreateNestedManyWithoutSerieInput
    user: UserCreateNestedOneWithoutSerieInput
    Avis?: AvisCreateNestedManyWithoutSerieInput
    Favoris?: FavorisCreateNestedManyWithoutSerieInput
  }

  export type SerieUncheckedCreateWithoutHistoriqueInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
    userId: number
    telechargement?: TelechargementUncheckedCreateNestedManyWithoutSerieInput
    Avis?: AvisUncheckedCreateNestedManyWithoutSerieInput
    Favoris?: FavorisUncheckedCreateNestedManyWithoutSerieInput
  }

  export type SerieCreateOrConnectWithoutHistoriqueInput = {
    where: SerieWhereUniqueInput
    create: XOR<SerieCreateWithoutHistoriqueInput, SerieUncheckedCreateWithoutHistoriqueInput>
  }

  export type UserUpsertWithoutHistoriqueInput = {
    update: XOR<UserUpdateWithoutHistoriqueInput, UserUncheckedUpdateWithoutHistoriqueInput>
    create: XOR<UserCreateWithoutHistoriqueInput, UserUncheckedCreateWithoutHistoriqueInput>
    where?: UserWhereInput
  }

  export type UserUpdateToOneWithWhereWithoutHistoriqueInput = {
    where?: UserWhereInput
    data: XOR<UserUpdateWithoutHistoriqueInput, UserUncheckedUpdateWithoutHistoriqueInput>
  }

  export type UserUpdateWithoutHistoriqueInput = {
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUpdateManyWithoutUserNestedInput
    film?: FilmUpdateManyWithoutUserNestedInput
    serie?: SerieUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUpdateManyWithoutUserNestedInput
    favoris?: FavorisUpdateManyWithoutUserNestedInput
  }

  export type UserUncheckedUpdateWithoutHistoriqueInput = {
    idUser?: IntFieldUpdateOperationsInput | number
    name?: StringFieldUpdateOperationsInput | string
    postname?: StringFieldUpdateOperationsInput | string
    email?: StringFieldUpdateOperationsInput | string
    password?: StringFieldUpdateOperationsInput | string
    dateDeNaissance?: DateTimeFieldUpdateOperationsInput | Date | string
    sexe?: StringFieldUpdateOperationsInput | string
    pays?: StringFieldUpdateOperationsInput | string
    avis?: AvisUncheckedUpdateManyWithoutUserNestedInput
    film?: FilmUncheckedUpdateManyWithoutUserNestedInput
    serie?: SerieUncheckedUpdateManyWithoutUserNestedInput
    telechargement?: TelechargementUncheckedUpdateManyWithoutUserNestedInput
    favoris?: FavorisUncheckedUpdateManyWithoutUserNestedInput
  }

  export type FilmUpsertWithoutHistoriqueInput = {
    update: XOR<FilmUpdateWithoutHistoriqueInput, FilmUncheckedUpdateWithoutHistoriqueInput>
    create: XOR<FilmCreateWithoutHistoriqueInput, FilmUncheckedCreateWithoutHistoriqueInput>
    where?: FilmWhereInput
  }

  export type FilmUpdateToOneWithWhereWithoutHistoriqueInput = {
    where?: FilmWhereInput
    data: XOR<FilmUpdateWithoutHistoriqueInput, FilmUncheckedUpdateWithoutHistoriqueInput>
  }

  export type FilmUpdateWithoutHistoriqueInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutFilmNestedInput
    user?: UserUpdateOneRequiredWithoutFilmNestedInput
    Avis?: AvisUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateWithoutHistoriqueInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutFilmNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type SerieUpsertWithoutHistoriqueInput = {
    update: XOR<SerieUpdateWithoutHistoriqueInput, SerieUncheckedUpdateWithoutHistoriqueInput>
    create: XOR<SerieCreateWithoutHistoriqueInput, SerieUncheckedCreateWithoutHistoriqueInput>
    where?: SerieWhereInput
  }

  export type SerieUpdateToOneWithWhereWithoutHistoriqueInput = {
    where?: SerieWhereInput
    data: XOR<SerieUpdateWithoutHistoriqueInput, SerieUncheckedUpdateWithoutHistoriqueInput>
  }

  export type SerieUpdateWithoutHistoriqueInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutSerieNestedInput
    user?: UserUpdateOneRequiredWithoutSerieNestedInput
    Avis?: AvisUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateWithoutHistoriqueInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    userId?: IntFieldUpdateOperationsInput | number
    telechargement?: TelechargementUncheckedUpdateManyWithoutSerieNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutSerieNestedInput
  }

  export type AvisCreateManyUserInput = {
    idAvis?: number
    filmId: number
    serieId: number
    comment?: string | null
  }

  export type FilmCreateManyUserInput = {
    idFilm?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
  }

  export type SerieCreateManyUserInput = {
    idSerie?: number
    titre: string
    realisateur: string
    anneeDeSortie: number
    description: string
    acteur: string
    dureeMoyenneParEpisode: number
    urlDeStreaming: string
    urlDeTelechargement: string
  }

  export type TelechargementCreateManyUserInput = {
    id?: number
    date: Date | string
    filmId: number
    serieId: number
    qualiteVideo: string
  }

  export type FavorisCreateManyUserInput = {
    idFavoris?: bigint | number
    filmId: number
    serieId: number
  }

  export type HistoriqueCreateManyUserInput = {
    idHistorique?: bigint | number
    filmId: number
    serieId: number
    dateDeVisuaisation: Date | string
  }

  export type AvisUpdateWithoutUserInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    film?: FilmUpdateOneRequiredWithoutAvisNestedInput
    serie?: SerieUpdateOneRequiredWithoutAvisNestedInput
  }

  export type AvisUncheckedUpdateWithoutUserInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvisUncheckedUpdateManyWithoutUserInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FilmUpdateWithoutUserInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutFilmNestedInput
    Avis?: AvisUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateWithoutUserInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUncheckedUpdateManyWithoutFilmNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutFilmNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutFilmNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutFilmNestedInput
  }

  export type FilmUncheckedUpdateManyWithoutUserInput = {
    idFilm?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
  }

  export type SerieUpdateWithoutUserInput = {
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUpdateManyWithoutSerieNestedInput
    Avis?: AvisUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateWithoutUserInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
    telechargement?: TelechargementUncheckedUpdateManyWithoutSerieNestedInput
    Avis?: AvisUncheckedUpdateManyWithoutSerieNestedInput
    Favoris?: FavorisUncheckedUpdateManyWithoutSerieNestedInput
    Historique?: HistoriqueUncheckedUpdateManyWithoutSerieNestedInput
  }

  export type SerieUncheckedUpdateManyWithoutUserInput = {
    idSerie?: IntFieldUpdateOperationsInput | number
    titre?: StringFieldUpdateOperationsInput | string
    realisateur?: StringFieldUpdateOperationsInput | string
    anneeDeSortie?: IntFieldUpdateOperationsInput | number
    description?: StringFieldUpdateOperationsInput | string
    acteur?: StringFieldUpdateOperationsInput | string
    dureeMoyenneParEpisode?: FloatFieldUpdateOperationsInput | number
    urlDeStreaming?: StringFieldUpdateOperationsInput | string
    urlDeTelechargement?: StringFieldUpdateOperationsInput | string
  }

  export type TelechargementUpdateWithoutUserInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    film?: FilmUpdateOneRequiredWithoutTelechargementNestedInput
    serie?: SerieUpdateOneRequiredWithoutTelechargementNestedInput
  }

  export type TelechargementUncheckedUpdateWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
  }

  export type TelechargementUncheckedUpdateManyWithoutUserInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
  }

  export type FavorisUpdateWithoutUserInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    film?: FilmUpdateOneRequiredWithoutFavorisNestedInput
    serie?: SerieUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type FavorisUncheckedUpdateWithoutUserInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
  }

  export type FavorisUncheckedUpdateManyWithoutUserInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoriqueUpdateWithoutUserInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
    film?: FilmUpdateOneRequiredWithoutHistoriqueNestedInput
    serie?: SerieUpdateOneRequiredWithoutHistoriqueNestedInput
  }

  export type HistoriqueUncheckedUpdateWithoutUserInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoriqueUncheckedUpdateManyWithoutUserInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    filmId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementCreateManyFilmInput = {
    id?: number
    date: Date | string
    serieId: number
    qualiteVideo: string
    userIdUser?: number | null
  }

  export type AvisCreateManyFilmInput = {
    idAvis?: number
    userId: number
    serieId: number
    comment?: string | null
  }

  export type FavorisCreateManyFilmInput = {
    idFavoris?: bigint | number
    userId: number
    serieId: number
  }

  export type HistoriqueCreateManyFilmInput = {
    idHistorique?: bigint | number
    userId: number
    serieId: number
    dateDeVisuaisation: Date | string
  }

  export type TelechargementUpdateWithoutFilmInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    serie?: SerieUpdateOneRequiredWithoutTelechargementNestedInput
    User?: UserUpdateOneWithoutTelechargementNestedInput
  }

  export type TelechargementUncheckedUpdateWithoutFilmInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serieId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    userIdUser?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TelechargementUncheckedUpdateManyWithoutFilmInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    serieId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    userIdUser?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvisUpdateWithoutFilmInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAvisNestedInput
    serie?: SerieUpdateOneRequiredWithoutAvisNestedInput
  }

  export type AvisUncheckedUpdateWithoutFilmInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvisUncheckedUpdateManyWithoutFilmInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FavorisUpdateWithoutFilmInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutFavorisNestedInput
    serie?: SerieUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type FavorisUncheckedUpdateWithoutFilmInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
  }

  export type FavorisUncheckedUpdateManyWithoutFilmInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoriqueUpdateWithoutFilmInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoriqueNestedInput
    serie?: SerieUpdateOneRequiredWithoutHistoriqueNestedInput
  }

  export type HistoriqueUncheckedUpdateWithoutFilmInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoriqueUncheckedUpdateManyWithoutFilmInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    serieId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type TelechargementCreateManySerieInput = {
    id?: number
    date: Date | string
    filmId: number
    qualiteVideo: string
    userIdUser?: number | null
  }

  export type AvisCreateManySerieInput = {
    idAvis?: number
    userId: number
    filmId: number
    comment?: string | null
  }

  export type FavorisCreateManySerieInput = {
    idFavoris?: bigint | number
    userId: number
    filmId: number
  }

  export type HistoriqueCreateManySerieInput = {
    idHistorique?: bigint | number
    userId: number
    filmId: number
    dateDeVisuaisation: Date | string
  }

  export type TelechargementUpdateWithoutSerieInput = {
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    film?: FilmUpdateOneRequiredWithoutTelechargementNestedInput
    User?: UserUpdateOneWithoutTelechargementNestedInput
  }

  export type TelechargementUncheckedUpdateWithoutSerieInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    filmId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    userIdUser?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type TelechargementUncheckedUpdateManyWithoutSerieInput = {
    id?: IntFieldUpdateOperationsInput | number
    date?: DateTimeFieldUpdateOperationsInput | Date | string
    filmId?: IntFieldUpdateOperationsInput | number
    qualiteVideo?: StringFieldUpdateOperationsInput | string
    userIdUser?: NullableIntFieldUpdateOperationsInput | number | null
  }

  export type AvisUpdateWithoutSerieInput = {
    comment?: NullableStringFieldUpdateOperationsInput | string | null
    user?: UserUpdateOneRequiredWithoutAvisNestedInput
    film?: FilmUpdateOneRequiredWithoutAvisNestedInput
  }

  export type AvisUncheckedUpdateWithoutSerieInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type AvisUncheckedUpdateManyWithoutSerieInput = {
    idAvis?: IntFieldUpdateOperationsInput | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    comment?: NullableStringFieldUpdateOperationsInput | string | null
  }

  export type FavorisUpdateWithoutSerieInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    user?: UserUpdateOneRequiredWithoutFavorisNestedInput
    film?: FilmUpdateOneRequiredWithoutFavorisNestedInput
  }

  export type FavorisUncheckedUpdateWithoutSerieInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
  }

  export type FavorisUncheckedUpdateManyWithoutSerieInput = {
    idFavoris?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
  }

  export type HistoriqueUpdateWithoutSerieInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
    user?: UserUpdateOneRequiredWithoutHistoriqueNestedInput
    film?: FilmUpdateOneRequiredWithoutHistoriqueNestedInput
  }

  export type HistoriqueUncheckedUpdateWithoutSerieInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }

  export type HistoriqueUncheckedUpdateManyWithoutSerieInput = {
    idHistorique?: BigIntFieldUpdateOperationsInput | bigint | number
    userId?: IntFieldUpdateOperationsInput | number
    filmId?: IntFieldUpdateOperationsInput | number
    dateDeVisuaisation?: DateTimeFieldUpdateOperationsInput | Date | string
  }



  /**
   * Aliases for legacy arg types
   */
    /**
     * @deprecated Use UserCountOutputTypeDefaultArgs instead
     */
    export type UserCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FilmCountOutputTypeDefaultArgs instead
     */
    export type FilmCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FilmCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SerieCountOutputTypeDefaultArgs instead
     */
    export type SerieCountOutputTypeArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SerieCountOutputTypeDefaultArgs<ExtArgs>
    /**
     * @deprecated Use UserDefaultArgs instead
     */
    export type UserArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = UserDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FilmDefaultArgs instead
     */
    export type FilmArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FilmDefaultArgs<ExtArgs>
    /**
     * @deprecated Use SerieDefaultArgs instead
     */
    export type SerieArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = SerieDefaultArgs<ExtArgs>
    /**
     * @deprecated Use TelechargementDefaultArgs instead
     */
    export type TelechargementArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = TelechargementDefaultArgs<ExtArgs>
    /**
     * @deprecated Use AvisDefaultArgs instead
     */
    export type AvisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = AvisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use FavorisDefaultArgs instead
     */
    export type FavorisArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = FavorisDefaultArgs<ExtArgs>
    /**
     * @deprecated Use HistoriqueDefaultArgs instead
     */
    export type HistoriqueArgs<ExtArgs extends $Extensions.InternalArgs = $Extensions.DefaultArgs> = HistoriqueDefaultArgs<ExtArgs>

  /**
   * Batch Payload for updateMany & deleteMany & createMany
   */

  export type BatchPayload = {
    count: number
  }

  /**
   * DMMF
   */
  export const dmmf: runtime.BaseDMMF
}